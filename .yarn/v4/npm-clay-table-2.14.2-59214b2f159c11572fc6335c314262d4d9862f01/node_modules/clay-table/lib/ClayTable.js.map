{"version":3,"sources":["../src/ClayTable.js"],"names":["ClayTable","_eventHandler","add","dom","on","document","_handleDocClick","bind","delegate","element","_handleRowFocus","EventHandler","removeAllListeners","Array","prototype","indexOf","call","filter","parentElement","children","childrenElement","getAttribute","event","closest","target","elementIndex","_getItemIndex","flattenItems","items","item","emit","data","name","originalEvent","removeClasses","querySelectorAll","delegateTarget","querySelector","addClasses","ClayComponent","STATE","actionsMenuVariant","Config","string","object","defaultEventHandler","elementClasses","id","array","schema","shapeOf","fields","arrayOf","contentRenderer","contentRendererMap","fieldName","required","fieldsMap","label","sortable","bool","sortingOrder","oneOf","inputNameField","inputNamesMap","inputValueField","selectable","value","showActionsMenu","showCheckbox","size","spritemap","tableClasses","useDefaultClasses","wrapTable","Soy","register","templates"],"mappings":"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","file":"ClayTable.js","sourcesContent":["import 'clay-button';\nimport 'clay-checkbox';\nimport 'clay-label';\nimport 'clay-link';\nimport 'clay-progress-bar';\n// eslint-disable-next-line\nimport { ClayActionsDropdown, flatten } from 'clay-dropdown';\nimport {Config} from 'metal-state';\nimport {EventHandler} from 'metal-events';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport dom from 'metal-dom';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayTable.soy.js';\n\n/**\n * Metal ClayTable component.\n * @extends ClayComponent\n */\nclass ClayTable extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis._eventHandler.add(\n\t\t\tdom.on(document, 'click', this._handleDocClick.bind(this)),\n\t\t\tdom.delegate(\n\t\t\t\tthis.element,\n\t\t\t\t'focus',\n\t\t\t\t'tr',\n\t\t\t\tthis._handleRowFocus.bind(this)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis._eventHandler = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tsuper.detached();\n\t\tthis._eventHandler.removeAllListeners();\n\t}\n\n\t/**\n\t * Returns the index of the element.\n\t * @param {!Node} element\n\t * @private\n\t * @return {?(number|undefined)} the index.\n\t */\n\t_getItemIndex(element) {\n\t\treturn Array.prototype.indexOf.call(\n\t\t\tArray.prototype.filter.call(\n\t\t\t\telement.parentElement.children,\n\t\t\t\tchildrenElement => !childrenElement.getAttribute('id')\n\t\t\t),\n\t\t\telement\n\t\t);\n\t}\n\n\t/**\n\t * Continues the propagation of the cell content click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleCellContentClick(event) {\n\t\tconst element = dom.closest(event.target, 'tr');\n\t\tconst elementIndex = this._getItemIndex(element);\n\t\tconst flattenItems = flatten(this.items);\n\t\tconst item = flattenItems[elementIndex];\n\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\titem,\n\t\t\t},\n\t\t\tname: 'cellContentClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Handles document click in order to remove the class `table-focus` from\n\t * the focused table row. This is to handle quickMenu accessibility.\n\t * @private\n\t */\n\t_handleDocClick() {\n\t\tdom.removeClasses(this.element.querySelectorAll('tr'), 'table-focus');\n\t}\n\n\t/**\n\t * Continues the propagation of the checkbox changed event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemToggled(event) {\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\tevent,\n\t\t\t},\n\t\t\tname: 'itemToggled',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the row content click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleRowContentClick(event) {\n\t\tconst elementIndex = this._getItemIndex(event.delegateTarget);\n\t\tconst flattenItems = flatten(this.items);\n\t\tconst item = flattenItems[elementIndex];\n\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\titem,\n\t\t\t},\n\t\t\tname: 'rowContentClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Handles each row focus in order to add the class `table-focus` to the row.\n\t * This is to handle quickMenu accessibility.\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleRowFocus(event) {\n\t\tdom.removeClasses(\n\t\t\tthis.element.querySelector('.table-focus'),\n\t\t\t'table-focus'\n\t\t);\n\t\tdom.addClasses(dom.closest(event.target, 'tr'), 'table-focus');\n\t}\n\n\t/**\n\t * Continues the propagation of the column sorting button click event\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleSortingClick(event) {\n\t\tthis.emit('sortingButtonClicked', event);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayTable.STATE = {\n\t/**\n\t * Variant name to render the actions menu\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\tactionsMenuVariant: Config.string(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * List of items to display in the table.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(array|undefined)}\n\t */\n\titems: Config.array(),\n\n\t/**\n\t * Schema of the table containing an element per column with label and the\n\t * name of the field with the value.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {!object}\n\t */\n\tschema: Config.shapeOf({\n\t\tfields: Config.arrayOf(\n\t\t\tConfig.shapeOf({\n\t\t\t\tcontentRenderer: Config.string(),\n\t\t\t\tcontentRendererMap: Config.object(),\n\t\t\t\tfieldName: Config.string().required(),\n\t\t\t\tfieldsMap: Config.object(),\n\t\t\t\tlabel: Config.string(),\n\t\t\t\tsortable: Config.bool(),\n\t\t\t\tsortingOrder: Config.oneOf(['asc', 'desc']),\n\t\t\t})\n\t\t),\n\t\tinputNameField: Config.string(),\n\t\tinputNamesMap: Config.object(),\n\t\tinputValueField: Config.string(),\n\t}).required(),\n\n\t/**\n\t * Flag to indicate if the table items are selectable or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?bool}\n\t */\n\tselectable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the rows will show an actions menu or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?bool}\n\t */\n\tshowActionsMenu: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the checkbox is show or not when selectable is true.\n\t * @default false\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?bool}\n\t */\n\tshowCheckbox: Config.bool().value(false),\n\n\t/**\n\t * Table responsive sizes. Available `lg`, `md`, `sm` and `xl`.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\tsize: Config.oneOf(['lg', 'md', 'sm', 'xl']),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * CSS classes to be applied to the table.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?(string|undefined)}\n\t */\n\ttableClasses: Config.string(),\n\n\t/**\n\t * Flag to indicate if the wrapper and the table should use default css\n\t * classes or not.\n\t * @default true\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?string}\n\t */\n\tuseDefaultClasses: Config.bool().value(true),\n\n\t/**\n\t * Flag to indicate if the table is wrapped inside a div or not.\n\t * @default true\n\t * @instance\n\t * @memberof ClayTable\n\t * @type {?string}\n\t */\n\twrapTable: Config.bool().value(true),\n};\n\ndefineWebComponent('clay-table', ClayTable);\n\nSoy.register(ClayTable, templates);\n\nexport {ClayTable};\nexport default ClayTable;\n"]}