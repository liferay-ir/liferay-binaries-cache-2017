{"version":3,"sources":["../src/ClayDropdown.js"],"names":["ClayDropdown","addListener","_defaultToggle","event","preventDefault","expanded","emit","data","name","originalEvent","ClayComponent","STATE","button","Config","shapeOf","label","string","required","style","oneOf","type","contentRenderer","object","defaultEventHandler","disabled","bool","value","elementClasses","id","icon","items","itemsValidator","itemsIconAlignment","any","preferredAlign","searchable","showToggleIcon","spritemap","triggerAriaLabel","triggerClasses","triggerTitle","triggerSize","Soy","register","templates"],"mappings":"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","file":"ClayDropdown.js","sourcesContent":["import 'clay-icon';\nimport './ClayDropdownBase';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport {itemsValidator, preferredAlign} from './validators';\nimport templates from './ClayDropdown.soy.js';\n\n/**\n * Implementation for Metal Clay Dropdown.\n * @extends ClayComponent\n */\nclass ClayDropdown extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener('toggle', this._defaultToggle, true);\n\t}\n\n\t/**\n\t * Toggles the dropdown, closing it when open or opening it when closed.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultToggle(event) {\n\t\tevent.preventDefault();\n\n\t\tthis.expanded = !this.expanded;\n\t}\n\n\t/**\n\t * Handles footer button click.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_handleButtonClick(event) {\n\t\tthis.emit('buttonClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the item clicked event\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemClick(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'itemClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the toggle event.\n\t * @param {!Event} event\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\ttoggle(event) {\n\t\treturn !this.emit({\n\t\t\tname: 'toggle',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayDropdown.STATE = {\n\t/**\n\t * Button configuration to place a button at dropdown footer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tbutton: Config.shapeOf({\n\t\tlabel: Config.string().required(),\n\t\tstyle: Config.oneOf(['primary', 'secondary']),\n\t\ttype: Config.oneOf(['button', 'reset', 'submit']),\n\t}),\n\n\t/**\n\t * Content Renderer name of items.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tcontentRenderer: Config.string(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if menu is disabled\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Flag to indicate if menu is expanded.\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?bool}\n\t */\n\texpanded: Config.bool().value(false),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Icon to use in the trigger.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * List of menu items.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {!Array}\n\t */\n\titems: itemsValidator.required(),\n\n\t/**\n\t * Position in which item icon will be placed. Needed if any item has icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\titemsIconAlignment: Config.oneOf(['left', 'right', 'left-right']),\n\n\t/**\n\t * Label of the trigger button.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any(),\n\n\t/**\n\t * The preferred alignment for the dropdown content.\n\t * @default BottomLeft\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tpreferredAlign: preferredAlign.value('BottomLeft'),\n\n\t/**\n\t * Flag to indicate if menu has a search field and search through elements\n\t * is possible.\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?bool}\n\t */\n\tsearchable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if toggle icon should appear or not.\n\t * @default true\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?bool}\n\t */\n\tshowToggleIcon: Config.bool().value(true),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * Style of the trigger button.\n\t * @default unstyled\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?string}\n\t */\n\tstyle: Config.oneOf(['link', 'primary', 'secondary', 'unstyled']).value(\n\t\t'unstyled'\n\t),\n\n\t/**\n\t * Aria label attribute for the trigger element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerAriaLabel: Config.string(),\n\n\t/**\n\t * CSS classes to be applied to the trigger element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerClasses: Config.string(),\n\n\t/**\n\t * The title attribute of the trigger element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerTitle: Config.string(),\n\n\t/**\n\t * Size of the trigger button.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerSize: Config.oneOf(['sm']),\n};\n\ndefineWebComponent('clay-dropdown', ClayDropdown);\n\nSoy.register(ClayDropdown, templates);\n\nexport {ClayDropdown};\nexport default ClayDropdown;\n"]}