{"version":3,"sources":["../src/ClayActionsDropdown.js"],"names":["ClayActionsDropdown","addListener","_defaultToggle","event","preventDefault","expanded","emit","data","name","originalEvent","ClayComponent","STATE","button","Config","shapeOf","label","string","required","style","oneOf","value","type","caption","object","defaultEventHandler","disabled","bool","elementClasses","helpText","id","items","itemsValidator","itemsIconAlignment","preferredAlign","spritemap","triggerAriaLabel","triggerClasses","triggerTitle","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,mB;;;;;;;;;;;;AACL;;;6BAGW;AACV,QAAKC,WAAL,CAAiB,QAAjB,EAA2B,KAAKC,cAAhC,EAAgD,IAAhD;AACA;;AAED;;;;;;;;iCAKeC,K,EAAO;AACrBA,SAAMC,cAAN;;AAEA,QAAKC,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACA;;AAED;;;;;;;;qCAKmBF,K,EAAO;AACzB,QAAKG,IAAL,CAAU,eAAV,EAA2BH,KAA3B;AACA;;AAED;;;;;;;;;mCAMiBA,K,EAAO;AACvB,UAAO,CAAC,KAAKG,IAAL,CAAU;AACjBC,UAAMJ,MAAMI,IADK;AAEjBC,UAAM,aAFW;AAGjBC,mBAAeN;AAHE,IAAV,CAAR;AAKA;;AAED;;;;;;;;yBAKOA,K,EAAO;AACb,UAAO,CAAC,KAAKG,IAAL,CAAU;AACjBE,UAAM,QADW;AAEjBC,mBAAeN;AAFE,IAAV,CAAR;AAIA;;;;EApDgCO,uB;;AAuDlC;;;;;;;AAKAV,oBAAoBW,KAApB,GAA4B;AAC3B;;;;;;;AAOAC,SAAQC,mBAAOC,OAAP,CAAe;AACtBC,SAAOF,mBAAOG,MAAP,GAAgBC,QAAhB,EADe;AAEtBC,SAAOL,mBAAOM,KAAP,CAAa,CAAC,SAAD,EAAY,WAAZ,CAAb,EAAuCC,KAAvC,CAA6C,SAA7C,CAFe;AAGtBC,QAAMR,mBAAOM,KAAP,CAAa,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAAb;AAHgB,EAAf,CARmB;;AAc3B;;;;;;;AAOAG,UAAST,mBAAOG,MAAP,EArBkB;;AAuB3B;;;;;;;AAOAT,OAAMM,mBAAOU,MAAP,EA9BqB;;AAgC3B;;;;;;;;AAQAC,sBAAqBX,mBAAOU,MAAP,EAxCM;;AA0C3B;;;;;;;AAOAE,WAAUZ,mBAAOa,IAAP,GAAcN,KAAd,CAAoB,KAApB,CAjDiB;;AAmD3B;;;;;;;AAOAO,iBAAgBd,mBAAOG,MAAP,EA1DW;;AA4D3B;;;;;;;AAOAX,WAAUQ,mBAAOa,IAAP,GAAcN,KAAd,CAAoB,KAApB,CAnEiB;;AAqE3B;;;;;;;AAOAQ,WAAUf,mBAAOG,MAAP,EA5EiB;;AA8E3B;;;;;;;AAOAa,KAAIhB,mBAAOG,MAAP,EArFuB;;AAuF3B;;;;;;;AAOAc,QAAOC,2BAAed,QAAf,EA9FoB;;AAgG3B;;;;;;;AAOAe,qBAAoBnB,mBAAOM,KAAP,CAAa,CAAC,MAAD,EAAS,OAAT,EAAkB,YAAlB,CAAb,CAvGO;;AAyG3B;;;;;;;AAOAc,iBAAgBA,2BAAeb,KAAf,CAAqB,YAArB,CAhHW;;AAkH3B;;;;;;;AAOAc,YAAWrB,mBAAOG,MAAP,GAAgBC,QAAhB,EAzHgB;;AA2H3B;;;;;;;AAOAkB,mBAAkBtB,mBAAOG,MAAP,EAlIS;;AAoI3B;;;;;;;AAOAoB,iBAAgBvB,mBAAOG,MAAP,EA3IW;;AA6I3B;;;;;;;AAOAqB,eAAcxB,mBAAOG,MAAP;AApJa,CAA5B;;AAuJA,iCAAmB,uBAAnB,EAA4ChB,mBAA5C;;AAEAsC,mBAAIC,QAAJ,CAAavC,mBAAb,EAAkCwC,gCAAlC;;QAEQxC,mB,GAAAA,mB;kBACOA,mB","file":"ClayActionsDropdown.js","sourcesContent":["import 'clay-icon';\nimport './ClayDropdownBase';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport {itemsValidator, preferredAlign} from './validators';\nimport templates from './ClayActionsDropdown.soy.js';\n\n/**\n * Implementation for Metal Clay Action Dropdown.\n * @extends ClayComponent\n */\nclass ClayActionsDropdown extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener('toggle', this._defaultToggle, true);\n\t}\n\n\t/**\n\t * Toggles the dropdown, closing it when open or opening it when closed.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultToggle(event) {\n\t\tevent.preventDefault();\n\n\t\tthis.expanded = !this.expanded;\n\t}\n\n\t/**\n\t * Handles footer button click.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_handleButtonClick(event) {\n\t\tthis.emit('buttonClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the item clicked event\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemClick(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'itemClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the toggle event.\n\t * @param {!Event} event\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\ttoggle(event) {\n\t\treturn !this.emit({\n\t\t\tname: 'toggle',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayActionsDropdown.STATE = {\n\t/**\n\t * Button configuration to place a button at dropdown footer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tbutton: Config.shapeOf({\n\t\tlabel: Config.string().required(),\n\t\tstyle: Config.oneOf(['primary', 'secondary']).value('primary'),\n\t\ttype: Config.oneOf(['button', 'reset', 'submit']),\n\t}),\n\n\t/**\n\t * Caption text of the dropdown.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tcaption: Config.string(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if menu is disabled\n\t * @default false\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Flag to indicate if menu is expanded.\n\t * @default false\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?bool}\n\t */\n\texpanded: Config.bool().value(false),\n\n\t/**\n\t * Help text to be shown on top of the open dropdown.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\thelpText: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * List of menu items.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {!Array}\n\t */\n\titems: itemsValidator.required(),\n\n\t/**\n\t * Position in which item icon will be placed. Needed if any item has icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\titemsIconAlignment: Config.oneOf(['left', 'right', 'left-right']),\n\n\t/**\n\t * The preferred alignment for the dropdown content.\n\t * @default BottomLeft\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\tpreferredAlign: preferredAlign.value('BottomLeft'),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * Aria label attribute for the trigger element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerAriaLabel: Config.string(),\n\n\t/**\n\t * CSS classes to be applied to the trigger element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerClasses: Config.string(),\n\n\t/**\n\t * String to be used for title attribute of action dropdown\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayActionsDropdown\n\t * @type {?(string|undefined)}\n\t */\n\ttriggerTitle: Config.string(),\n};\n\ndefineWebComponent('clay-actions-dropdown', ClayActionsDropdown);\n\nSoy.register(ClayActionsDropdown, templates);\n\nexport {ClayActionsDropdown};\nexport default ClayActionsDropdown;\n"]}