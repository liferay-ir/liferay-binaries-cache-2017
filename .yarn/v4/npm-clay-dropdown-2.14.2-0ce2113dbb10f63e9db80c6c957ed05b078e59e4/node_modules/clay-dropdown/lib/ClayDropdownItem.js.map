{"version":3,"sources":["../src/ClayDropdownItem.js"],"names":["ClayDropdownItem","event","emit","active","element","focus","ClayComponent","STATE","itemShape","checked","contentRenderer","Config","string","data","object","defaultEventHandler","disabled","href","icon","icons","inputName","inputValue","items","itemsIconAlignment","oneOf","label","maxItems","separator","spritemap","target","title","type","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,gB;;;;;;;;;;;;AACL;;;;;;mCAMiBC,K,EAAO;AACvB,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;AAED;;;;;;;;;qCAMmBA,K,EAAO;AACzB,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;AAED;;;;;;+BAGa;AACZ,OAAI,KAAKE,MAAT,EAAiB;AAChB,SAAKC,OAAL,CAAaC,KAAb;AACA;AACD;;;;EA5B6BC,uB;;AA+B/B;;;;;;;AAKAN,iBAAiBO,KAAjB,GAAyB;AACxB;;;;;;;AAOAJ,SAAQK,sBAAUL,MARM;;AAUxB;;;;;;;AAOAM,UAASD,sBAAUC,OAjBK;;AAmBxB;;;;;;;AAOAC,kBAAiBC,mBAAOC,MAAP,EA1BO;;AA4BxB;;;;;;;AAOAC,OAAMF,mBAAOG,MAAP,EAnCkB;;AAqCxB;;;;;;;;AAQAC,sBAAqBJ,mBAAOG,MAAP,EA7CG;;AA+CxB;;;;;;;AAOAE,WAAUR,sBAAUQ,QAtDI;;AAwDxB;;;;;;;AAOAC,OAAMT,sBAAUS,IA/DQ;;AAiExB;;;;;;;;AAQAC,OAAMV,sBAAUU,IAzEQ;;AA2ExB;;;;;;;AAOAC,QAAOX,sBAAUW,KAlFO;;AAoFxB;;;;;;;AAOAC,YAAWZ,sBAAUY,SA3FG;;AA6FxB;;;;;;;AAOAC,aAAYb,sBAAUa,UApGE;;AAsGxB;;;;;;;AAOAC,QAAOd,sBAAUc,KA7GO;;AA+GxB;;;;;;;AAOAC,qBAAoBZ,mBAAOa,KAAP,CAAa,CAAC,MAAD,EAAS,OAAT,EAAkB,YAAlB,CAAb,CAtHI;;AAwHxB;;;;;;;AAOAC,QAAOjB,sBAAUiB,KA/HO;;AAiIxB;;;;;;;AAOAC,WAAUlB,sBAAUkB,QAxII;;AA0IxB;;;;;;;AAOAC,YAAWnB,sBAAUmB,SAjJG;;AAmJxB;;;;;;;AAOAC,YAAWjB,mBAAOC,MAAP,EA1Ja;;AA4JxB;;;;;;;AAOAiB,SAAQlB,mBAAOa,KAAP,CAAa,CAAC,QAAD,EAAW,OAAX,CAAb,CAnKgB;;AAqKxB;;;;;;;AAOAM,QAAOtB,sBAAUsB,KA5KO;;AA8KxB;;;;;;;AAOAC,OAAMpB,mBAAOC,MAAP;AArLkB,CAAzB;;AAwLA,iCAAmB,oBAAnB,EAAyCZ,gBAAzC;;AAEAgC,mBAAIC,QAAJ,CAAajC,gBAAb,EAA+BkC,6BAA/B;;QAEQlC,gB,GAAAA,gB;kBACOA,gB","file":"ClayDropdownItem.js","sourcesContent":["import 'clay-button';\nimport 'clay-checkbox';\nimport 'clay-icon';\nimport 'clay-link';\nimport 'clay-radio';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport {itemShape} from './validators';\nimport templates from './ClayDropdownItem.soy.js';\n\n/**\n * Implementation of the Metal Clay Icon.\n * @extends ClayComponent\n */\nclass ClayDropdownItem extends ClayComponent {\n\t/**\n\t * Continues the propagation of the item clicked event\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemClick(event) {\n\t\treturn !this.emit('itemClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the item clicked event\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemKeyDown(event) {\n\t\treturn !this.emit('itemKeyDown', event);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tsyncActive() {\n\t\tif (this.active) {\n\t\t\tthis.element.focus();\n\t\t}\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayDropdownItem.STATE = {\n\t/**\n\t * Flag to indicate if the item is active or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?bool}\n\t */\n\tactive: itemShape.active,\n\n\t/**\n\t * Flag to indicate if the item is checked or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?bool}\n\t */\n\tchecked: itemShape.checked,\n\n\t/**\n\t * Name of the content renderer for the different deltempaltes.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\tcontentRenderer: Config.string(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the item is disabled or not\n\t * @default false\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?bool}\n\t */\n\tdisabled: itemShape.disabled,\n\n\t/**\n\t * Href of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\thref: itemShape.href,\n\n\t/**\n\t * Icon of the item.\n\t * @default undefined\n\t * @deprecated since version 2.13.x\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\ticon: itemShape.icon,\n\n\t/**\n\t * Icons of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(object|undefined)}\n\t */\n\ticons: itemShape.icons,\n\n\t/**\n\t * Name of the item input in case is selectable.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\tinputName: itemShape.inputName,\n\n\t/**\n\t * Value of the item input in case is selectable.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: itemShape.inputValue,\n\n\t/**\n\t * List of child items of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(array|undefined)}\n\t */\n\titems: itemShape.items,\n\n\t/**\n\t * Position in which item icons will be placed. Needed if any item has icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownBase\n\t * @type {?(string|undefined)}\n\t */\n\titemsIconAlignment: Config.oneOf(['left', 'right', 'left-right']),\n\n\t/**\n\t * Label of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\tlabel: itemShape.label,\n\n\t/**\n\t * Number of max child items of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(number|undefined)}\n\t */\n\tmaxItems: itemShape.maxItems,\n\n\t/**\n\t * Flag to indicate if the item has a separator or not.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(bool|undefined)}\n\t */\n\tseparator: itemShape.separator,\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * Sets the HTML attribute target on the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\ttarget: Config.oneOf(['_blank', '_self']),\n\n\t/**\n\t * Title of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\ttitle: itemShape.title,\n\n\t/**\n\t * Type of the item.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDropdownItem\n\t * @type {?(string|undefined)}\n\t */\n\ttype: Config.string(),\n};\n\ndefineWebComponent('clay-dropdown-item', ClayDropdownItem);\n\nSoy.register(ClayDropdownItem, templates);\n\nexport {ClayDropdownItem};\nexport default ClayDropdownItem;\n"]}