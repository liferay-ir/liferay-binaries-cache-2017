{"version":3,"sources":["../src/ClayCheckbox.js"],"names":["ClayCheckbox","refs","input","indeterminate","ClayComponent","STATE","ariaLabelledBy","Config","string","checked","bool","value","data","object","defaultEventHandler","disabled","elementClasses","id","inline","label","labelContent","any","name","showLabel","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,Y;;;;;;;;;;;;AACL;;;sCAGoB;AACnB,QAAKC,IAAL,CAAUC,KAAV,CAAgBC,aAAhB,GAAgC,KAAKA,aAArC;AACA;;;;EANyBC,uB;;AAS3B;;;;;;;AAKAJ,aAAaK,KAAb,GAAqB;AACpB;;;;;;;AAOAC,iBAAgBC,mBAAOC,MAAP,EARI;;AAUpB;;;;;;;AAOAC,UAASF,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAjBW;;AAmBpB;;;;;;;AAOAC,OAAML,mBAAOM,MAAP,EA1Bc;;AA4BpB;;;;;;;;AAQAC,sBAAqBP,mBAAOM,MAAP,EApCD;;AAsCpB;;;;;;;AAOAE,WAAUR,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA7CU;;AA+CpB;;;;;;;AAOAK,iBAAgBT,mBAAOC,MAAP,EAtDI;;AAwDpB;;;;;;;AAOAS,KAAIV,mBAAOC,MAAP,EA/DgB;;AAiEpB;;;;;;;AAOAL,gBAAeI,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAxEK;;AA0EpB;;;;;;;AAOAO,SAAQX,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAjFY;;AAmFpB;;;;;;;AAOAQ,QAAOZ,mBAAOC,MAAP,EA1Fa;;AA4FpB;;;;;;;AAOAY,eAAcb,mBAAOc,GAAP,EAnGM;;AAqGpB;;;;;;;AAOAC,OAAMf,mBAAOC,MAAP,EA5Gc;;AA8GpB;;;;;;;AAOAe,YAAWhB,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,IAApB,CArHS;;AAuHpB;;;;;;;AAOAA,QAAOJ,mBAAOC,MAAP;AA9Ha,CAArB;;AAiIA,iCAAmB,eAAnB,EAAoCR,YAApC;;AAEAwB,mBAAIC,QAAJ,CAAazB,YAAb,EAA2B0B,yBAA3B;;QAEQ1B,Y,GAAAA,Y;kBACOA,Y","file":"ClayCheckbox.js","sourcesContent":["import ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayCheckbox.soy.js';\n\n/**\n * Implementation of the Metal Clay Checkbox.\n * @extends ClayComponent\n */\nclass ClayCheckbox extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tsyncIndeterminate() {\n\t\tthis.refs.input.indeterminate = this.indeterminate;\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nClayCheckbox.STATE = {\n\t/**\n\t * Aria labelled by attribute to apply to the input.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\tariaLabelledBy: Config.string(),\n\n\t/**\n\t * Flag to indicate if checkbox is checked.\n\t * @default false\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?bool}\n\t */\n\tchecked: Config.bool().value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if checkbox is disabled.\n\t * @default false\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Flag to indicate if checkbox's checked state is indeterminate.\n\t * @default false\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?bool}\n\t */\n\tindeterminate: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if input should be wrapped to be inline or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?bool}\n\t */\n\tinline: Config.bool().value(false),\n\n\t/**\n\t * Label of the input. Required for accessibility.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\tlabel: Config.string(),\n\n\t/**\n\t * Custom content of the checkbox label. Use it to use your custom html.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(html|undefined)}\n\t */\n\tlabelContent: Config.any(),\n\n\t/**\n\t * Name to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\tname: Config.string(),\n\n\t/**\n\t * Flag to indicate if label should be hide.\n\t * @default true\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?bool}\n\t */\n\tshowLabel: Config.bool().value(true),\n\n\t/**\n\t * Value to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCheckbox\n\t * @type {?(string|undefined)}\n\t */\n\tvalue: Config.string(),\n};\n\ndefineWebComponent('clay-checkbox', ClayCheckbox);\n\nSoy.register(ClayCheckbox, templates);\n\nexport {ClayCheckbox};\nexport default ClayCheckbox;\n"]}