{"version":3,"sources":["../src/index.js"],"names":["config","globalConfig","log","rootPkgJson","pkgJson","imports","dependencies","Object","keys","forEach","namespace","localName","ns","addNamespace","pkgName","importVersion","importName","name","undefined","info"],"mappings":";;;;;;kBAYe,uBAA8D;AAAA,KAApDA,MAAoD,QAApDA,MAAoD;AAAA,KAA5CC,YAA4C,QAA5CA,YAA4C;AAAA,KAA9BC,GAA8B,QAA9BA,GAA8B;AAAA,KAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,KAAVC,OAAU,SAAVA,OAAU;;AAC5E,KAAIC,UAAUL,OAAOK,OAAP,IAAkBJ,aAAaI,OAA/B,IAA0C,EAAxD;;AAEAA,WAAU,qCAAuBA,OAAvB,CAAV;;AAEAD,SAAQE,YAAR,GAAuBF,QAAQE,YAAR,IAAwB,EAA/C;;AAEAC,QAAOC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6B,qBAAa;AACzCF,SAAOC,IAAP,CAAYH,QAAQK,SAAR,CAAZ,EAAgCD,OAAhC,CAAwC,mBAAW;AAClD,OAAME,YAAYC,GAAGC,YAAH,CAAgBC,OAAhB,EAAyBX,WAAzB,CAAlB;;AAEA,OAAMY,gBAAgBV,QAAQK,SAAR,EAAmBI,OAAnB,CAAtB;AACA,OAAME,aACLN,cAAc,EAAd,GACGI,OADH,GAEGF,GAAGC,YAAH,CAAgBC,OAAhB,EAAyB,EAACG,MAAMP,SAAP,EAAzB,CAHJ;;AAKAN,WAAQE,YAAR,CAAqBU,UAArB,IAAmCD,aAAnC;;AAEA,OACCX,QAAQE,YAAR,CAAqBK,SAArB,MAAoCO,SAApC,IACAd,QAAQE,YAAR,CAAqBK,SAArB,MAAoCI,aAFrC,EAGE;AACDb,QAAIiB,IAAJ,CACC,6BADD,EAEC,qBAFD,EAGIH,UAHJ,SAGkBD,aAHlB,EAIC,yDAJD,EAKC,4BALD,EAMIJ,SANJ,SAMiBP,QAAQE,YAAR,CAAqBK,SAArB,CANjB;AAQA,IAZD,MAYO;AACNT,QAAIiB,IAAJ,CACC,6BADD,EAEC,qBAFD,EAGIH,UAHJ,SAGkBD,aAHlB;AAKA;AACD,GA9BD;AA+BA,EAhCD;AAiCA,C;;AA9CD;;IAAYH,E;;AACZ","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as ns from 'liferay-npm-build-tools-common/lib/namespace';\nimport {normalizeImportsConfig} from 'liferay-npm-build-tools-common/lib/imports';\n\n/**\n * @return {void}\n */\nexport default function({config, globalConfig, log, rootPkgJson}, {pkgJson}) {\n\tlet imports = config.imports || globalConfig.imports || {};\n\n\timports = normalizeImportsConfig(imports);\n\n\tpkgJson.dependencies = pkgJson.dependencies || {};\n\n\tObject.keys(imports).forEach(namespace => {\n\t\tObject.keys(imports[namespace]).forEach(pkgName => {\n\t\t\tconst localName = ns.addNamespace(pkgName, rootPkgJson);\n\n\t\t\tconst importVersion = imports[namespace][pkgName];\n\t\t\tconst importName =\n\t\t\t\tnamespace === ''\n\t\t\t\t\t? pkgName\n\t\t\t\t\t: ns.addNamespace(pkgName, {name: namespace});\n\n\t\t\tpkgJson.dependencies[importName] = importVersion;\n\n\t\t\tif (\n\t\t\t\tpkgJson.dependencies[localName] !== undefined &&\n\t\t\t\tpkgJson.dependencies[localName] !== importVersion\n\t\t\t) {\n\t\t\t\tlog.info(\n\t\t\t\t\t'inject-imports-dependencies',\n\t\t\t\t\t'Injected dependency',\n\t\t\t\t\t`${importName}@${importVersion}`,\n\t\t\t\t\t'(however, note that the same dependency in package.json',\n\t\t\t\t\t'has different constraints:',\n\t\t\t\t\t`${localName}@${pkgJson.dependencies[localName]})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlog.info(\n\t\t\t\t\t'inject-imports-dependencies',\n\t\t\t\t\t'Injected dependency',\n\t\t\t\t\t`${importName}@${importVersion}`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t});\n}\n"]}