'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (_ref, _ref2) {
	var config = _ref.config,
	    globalConfig = _ref.globalConfig,
	    log = _ref.log,
	    rootPkgJson = _ref.rootPkgJson;
	var pkgJson = _ref2.pkgJson;

	var imports = config.imports || globalConfig.imports || {};

	imports = (0, _imports.normalizeImportsConfig)(imports);

	pkgJson.dependencies = pkgJson.dependencies || {};

	Object.keys(imports).forEach(function (namespace) {
		Object.keys(imports[namespace]).forEach(function (pkgName) {
			var localName = ns.addNamespace(pkgName, rootPkgJson);

			var importVersion = imports[namespace][pkgName];
			var importName = namespace === '' ? pkgName : ns.addNamespace(pkgName, { name: namespace });

			pkgJson.dependencies[importName] = importVersion;

			if (pkgJson.dependencies[localName] !== undefined && pkgJson.dependencies[localName] !== importVersion) {
				log.info('inject-imports-dependencies', 'Injected dependency', importName + '@' + importVersion, '(however, note that the same dependency in package.json', 'has different constraints:', localName + '@' + pkgJson.dependencies[localName] + ')');
			} else {
				log.info('inject-imports-dependencies', 'Injected dependency', importName + '@' + importVersion);
			}
		});
	});
};

var _namespace = require('liferay-npm-build-tools-common/lib/namespace');

var ns = _interopRequireWildcard(_namespace);

var _imports = require('liferay-npm-build-tools-common/lib/imports');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
//# sourceMappingURL=index.js.map