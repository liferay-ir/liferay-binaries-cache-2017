'use strict';

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

it('injects imports', function () {
	var pkgJson = {
		name: 'package',
		version: '2.0.0',
		dependencies: {
			'root$pkg-a': '^1.0.0',
			'root$pkg-b': '^2.0.0',
			'root$pkg-c': '^3.0.0'
		}
	};

	(0, _index2.default)({
		rootPkgJson: {
			name: 'root',
			version: '1.0.0'
		},
		globalConfig: {
			imports: {
				provider: {
					'pkg-a': '^1.0.0',
					'pkg-b': '^2.0.0'
				},
				'': {
					'pkg-c': '^3.0.0'
				}
			}
		},
		config: {},
		log: new _pluginLogger2.default()
	}, { pkgJson: pkgJson });

	expect(pkgJson).toMatchSnapshot();
});

it('injects imports even when not present in package.json', function () {
	var pkgJson = {
		name: 'package',
		version: '2.0.0'
	};

	(0, _index2.default)({
		rootPkgJson: {
			name: 'root',
			version: '1.0.0'
		},
		globalConfig: {
			imports: {
				provider: {
					'pkg-a': '^1.0.0'
				}
			}
		},
		config: {},
		log: new _pluginLogger2.default()
	}, { pkgJson: pkgJson });

	expect(pkgJson).toMatchSnapshot();
});

it('logs results correctly', function () {
	var pkgJson = {
		name: 'package',
		version: '2.0.0',
		dependencies: {
			'root$pkg-a': '^1.0.0',
			'root$pkg-b': '^2.0.0'
		}
	};
	var log = new _pluginLogger2.default();

	(0, _index2.default)({
		rootPkgJson: {
			name: 'root',
			version: '1.0.0'
		},
		globalConfig: {
			imports: {
				provider: {
					'pkg-a': '^1.0.0',
					'pkg-b': '^3.0.0'
				},
				'': {
					'pkg-c': '^3.0.0'
				}
			}
		},
		config: {},
		log: log
	}, { pkgJson: pkgJson });

	expect(log.messages).toMatchSnapshot();
});
//# sourceMappingURL=index.test.js.map