{"version":3,"sources":["../src/JSXComponent.js"],"names":["JSXComponent","event","type","willReceiveProps","changes","removeKeys","getDataManager","getPropsInstance","getStateKeys","retObj","mixin","props","i","length","key","hasOwnProperty","render","DATA_MANAGER","RENDERER"],"mappings":"AAAA;;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;;;;;IAWMA,Y;;;;;;;;;;;;;AAeL;;;;;;yCAMuBC,K,EAAO;AAC7B,OAAIA,MAAMC,IAAN,KAAe,OAAnB,EAA4B;AAC3B,SAAKC,gBAAL,CAAsBF,MAAMG,OAA5B;AACA;AACD;;AAED;;;;;;;+BAIa;AACZ,OAAMC,0CACF,KAAKC,cAAL,GACDC,gBADC,CACgB,IADhB,EAEDC,YAFC,EADE,IAIL,KAJK,EAKL,KALK,EAAN;;AAQA,OAAMC,SAAS,cAAOC,KAAP,CAAa,EAAb,EAAiB,KAAKC,KAAtB,CAAf;;AAEA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,WAAWQ,MAA/B,EAAuCD,GAAvC,EAA4C;AAC3C,QAAME,MAAMT,WAAWO,CAAX,CAAZ;;AAEA,QAAIH,OAAOM,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC/B,YAAOL,OAAOK,GAAP,CAAP;AACA;AACD;;AAED,UAAOL,MAAP;AACA;;AAED;;;;;;;;;qCAMmB,CAAE;;;;AA1DrB;;;;;;;;;;2BAUuB;AACtB,UAAO,8BAAuBO,MAAvB,gDAAP;AACA;;;;;;AAiDFhB,aAAaiB,YAAb;AACAjB,aAAakB,QAAb;;kBAEelB,Y","file":"JSXComponent.js","sourcesContent":["'use strict';\n\nimport './iDOMHelpers';\nimport {object} from 'metal';\nimport Component from 'metal-component';\nimport IncrementalDomRenderer from 'metal-incremental-dom';\nimport JSXDataManager from './JSXDataManager';\nimport JSXRenderer from './JSXRenderer';\n\n/**\n * A component that has built-in integration with JSX templates. Example:\n *\n * <code>\n * class MyComponent extends JSXComponent {\n *   render() {\n *     return <div>Hello World</div>\n *   }\n * }\n * </code>\n */\nclass JSXComponent extends Component {\n\t/**\n\t * Creates and renders the given function, which can either be a simple\n\t * JSX function or a component constructor.\n\t * @param {!function()} fnOrCtor Either be a simple jsx dom function or a\n\t *     component constructor.\n\t * @param {Object=} opt_data Optional config data for the function.\n\t * @param {Element=} opt_element Optional parent for the rendered content.\n\t * @return {!Component} The rendered component's instance.\n\t * @override\n\t */\n\tstatic render(...args) {\n\t\treturn IncrementalDomRenderer.render(...args);\n\t}\n\n\t/**\n\t * Fires before state batch changes. Provides hook point for modifying\n\t *     state.\n\t * @param {Event} event\n\t * @protected\n\t */\n\thandleStateWillChange_(event) {\n\t\tif (event.type !== 'state') {\n\t\t\tthis.willReceiveProps(event.changes);\n\t\t}\n\t}\n\n\t/**\n\t * Returns props that are not used or declared in the component.\n\t * @return {Object} Object containing props\n\t */\n\totherProps() {\n\t\tconst removeKeys = [\n\t\t\t...this.getDataManager()\n\t\t\t\t.getPropsInstance(this)\n\t\t\t\t.getStateKeys(),\n\t\t\t'key',\n\t\t\t'ref',\n\t\t];\n\n\t\tconst retObj = object.mixin({}, this.props);\n\n\t\tfor (let i = 0; i < removeKeys.length; i++) {\n\t\t\tconst key = removeKeys[i];\n\n\t\t\tif (retObj.hasOwnProperty(key)) {\n\t\t\t\tdelete retObj[key];\n\t\t\t}\n\t\t}\n\n\t\treturn retObj;\n\t}\n\n\t/**\n\t * Lifecycle. Called when the component is about to receive new props.\n\t * Provides a hook point for modifying state that can be used in the next\n\t * rerender.\n\t * @param {Object} changes Changes made to this.props\n\t */\n\twillReceiveProps() {}\n}\n\nJSXComponent.DATA_MANAGER = JSXDataManager;\nJSXComponent.RENDERER = JSXRenderer;\n\nexport default JSXComponent;\n"]}