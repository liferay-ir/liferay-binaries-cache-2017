{"version":3,"sources":["../src/JSXDataManager.js"],"names":["JSXDataManager","component","props","data","keys","Set","Object","forEach","hasStateKey","key","comp","config","ctor","constructor","state","getManagerData","props_","getInitialConfig","configState","mixin","mergeState","addUnconfiguredProps_","state_","setEventData","type","getStateStatic","dispose","call","name","get","getStateKeys","prevProps","propsChanged","replaceNonInternal"],"mappings":"AAAA;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;;;IAGMA,c;;;;;;;;;;;;AACL;;;;;;;wCAOsBC,S,EAAWC,K,EAAOC,I,EAAM;AAC7C,OAAIC,OAAO,IAAIC,GAAJ,8BACPC,OAAOF,IAAP,CAAYD,IAAZ,CADO,sBAEPG,OAAOF,IAAP,CAAYH,UAAUC,KAAtB,CAFO,GAAX;;AAKAE,QAAKG,OAAL,CAAa,eAAO;AACnB,QAAI,CAACL,MAAMM,WAAN,CAAkBC,GAAlB,CAAL,EAA6B;AAC5BR,eAAUC,KAAV,CAAgBO,GAAhB,IAAuBN,KAAKM,GAAL,CAAvB;AACA;AACD,IAJD;AAKA;;AAED;;;;;;;;;;;+BAQaC,I,EAAMC,M,EAAQ;AAC1B,OAAMC,OAAOF,KAAKG,WAAlB;AACAH,QAAKR,KAAL,GAAa,EAAb;AACAQ,QAAKI,KAAL,GAAa,EAAb;AACA,OAAMX,OAAO,KAAKY,cAAL,CAAoBL,IAApB,CAAb;;AAEAP,QAAKa,MAAL,GAAc,yBAAUN,KAAKO,gBAAL,EAAV,EAAmCP,KAAKR,KAAxC,EAA+CQ,IAA/C,CAAd;AACAP,QAAKa,MAAL,CAAYE,WAAZ,CACC,cAAOC,KAAP,CACC,EADD,EAECR,MAFD,EAGC,8BAAkBC,IAAlB,EAAwB,OAAxB,EAAiC,qBAAMQ,UAAvC,CAHD,CADD;AAOA,QAAKC,qBAAL,CAA2BX,IAA3B,EAAiCP,KAAKa,MAAtC,EAA8CN,KAAKO,gBAAL,EAA9C;;AAEAd,QAAKmB,MAAL,GAAc,yBAAU,EAAV,EAAcZ,KAAKI,KAAnB,EAA0BJ,IAA1B,CAAd;AACAP,QAAKmB,MAAL,CAAYC,YAAZ,CAAyB;AACxBC,UAAM;AADkB,IAAzB;AAGArB,QAAKmB,MAAL,CAAYJ,WAAZ,CAAwB,qBAAMO,cAAN,CAAqBb,IAArB,CAAxB;AACA;;AAED;;;;;;0BAGQX,S,EAAW;AAClB,OAAME,OAAO,KAAKY,cAAL,CAAoBd,SAApB,CAAb;AACAE,QAAKa,MAAL,CAAYU,OAAZ;AACA,wCAAqBA,OAArB,CAA6BC,IAA7B,CAAkC,IAAlC,EAAwC1B,SAAxC;AACA;;AAED;;;;;;;;;;;sBAQIA,S,EAAW2B,I,EAAM;AACpB,UAAO,KAAKb,cAAL,CAAoBd,SAApB,EAA+Be,MAA/B,CAAsCa,GAAtC,CAA0CD,IAA1C,CAAP;AACA;;AAED;;;;;;;;mCAKiB3B,S,EAAW;AAC3B,UAAO,KAAKc,cAAL,CAAoBd,SAApB,EAA+Be,MAAtC;AACA;;AAED;;;;;;;;;;8BAOYf,S,EAAW;AACtB,UAAO,KAAKc,cAAL,CAAoBd,SAApB,EAA+Be,MAA/B,CAAsCc,YAAtC,EAAP;AACA;;AAED;;;;;;;;;qCAMmB7B,S,EAAWE,I,EAAM;AACnC,OAAI4B,kBAAJ;AACA,OAAI9B,UAAU+B,YAAd,EAA4B;AAC3BD,gBAAY,cAAOZ,KAAP,CAAa,EAAb,EAAiBlB,UAAUC,KAA3B,CAAZ;AACA;;AAED,OAAMA,QAAQ,KAAKa,cAAL,CAAoBd,SAApB,EAA+Be,MAA7C;AACA,wCAAqBiB,kBAArB,CAAwCN,IAAxC,CACC,IADD,EAEC1B,SAFD,EAGCE,IAHD,EAICD,KAJD,EAPmC,CAYhC;AACH,QAAKmB,qBAAL,CAA2BpB,SAA3B,EAAsCC,KAAtC,EAA6CC,IAA7C;AACA,OAAIF,UAAU+B,YAAd,EAA4B;AAC3B/B,cAAU+B,YAAV,CAAuBD,SAAvB;AACA;AACD;;;;EApH2B,qCAAqBlB,W;;kBAuHnC,IAAIb,cAAJ,E","file":"JSXDataManager.js","sourcesContent":["'use strict';\n\nimport {getStaticProperty, object} from 'metal';\nimport {ComponentDataManager} from 'metal-component';\nimport State from 'metal-state';\n\n/**\n * DataManager for JSX\n */\nclass JSXDataManager extends ComponentDataManager.constructor {\n\t/**\n\t * Manually adds props that weren't configured via `PROPS`.\n\t * @param {!Component} component\n\t * @param {!State} props\n\t * @param {!Object} data\n\t * @protected\n\t */\n\taddUnconfiguredProps_(component, props, data) {\n\t\tlet keys = new Set([\n\t\t\t...Object.keys(data),\n\t\t\t...Object.keys(component.props),\n\t\t]);\n\n\t\tkeys.forEach(key => {\n\t\t\tif (!props.hasStateKey(key)) {\n\t\t\t\tcomponent.props[key] = data[key];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Overrides the original method so that we can have two separate `State`\n\t * instances: one responsible for `state` and another for `props`.\n\t * @param {!Component} comp\n\t * @param {!Object} config\n\t * @protected\n\t * @override\n\t */\n\tcreateState_(comp, config) {\n\t\tconst ctor = comp.constructor;\n\t\tcomp.props = {};\n\t\tcomp.state = {};\n\t\tconst data = this.getManagerData(comp);\n\n\t\tdata.props_ = new State(comp.getInitialConfig(), comp.props, comp);\n\t\tdata.props_.configState(\n\t\t\tobject.mixin(\n\t\t\t\t{},\n\t\t\t\tconfig,\n\t\t\t\tgetStaticProperty(ctor, 'PROPS', State.mergeState)\n\t\t\t)\n\t\t);\n\t\tthis.addUnconfiguredProps_(comp, data.props_, comp.getInitialConfig());\n\n\t\tdata.state_ = new State({}, comp.state, comp);\n\t\tdata.state_.setEventData({\n\t\t\ttype: 'state',\n\t\t});\n\t\tdata.state_.configState(State.getStateStatic(ctor));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdispose(component) {\n\t\tconst data = this.getManagerData(component);\n\t\tdata.props_.dispose();\n\t\tComponentDataManager.dispose.call(this, component);\n\t}\n\n\t/**\n\t * Overrides the original method so we can get properties from `props` by\n\t * default.\n\t * @param {!Component} component\n\t * @param {string} name\n\t * @return {*}\n\t * @override\n\t */\n\tget(component, name) {\n\t\treturn this.getManagerData(component).props_.get(name);\n\t}\n\n\t/**\n\t * Gets the `State` instance being used for \"props\".\n\t * @param {!Component} component\n\t * @return {!Object}\n\t */\n\tgetPropsInstance(component) {\n\t\treturn this.getManagerData(component).props_;\n\t}\n\n\t/**\n\t * Overrides the original method so we can enable \"sync\" methods just for\n\t * `props`.\n\t * @param {!Component} component\n\t * @return {!Array<string>}\n\t * @override\n\t */\n\tgetSyncKeys(component) {\n\t\treturn this.getManagerData(component).props_.getStateKeys();\n\t}\n\n\t/**\n\t * Overrides the original method so we can replace values in `props`.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t * @override\n\t */\n\treplaceNonInternal(component, data) {\n\t\tlet prevProps;\n\t\tif (component.propsChanged) {\n\t\t\tprevProps = object.mixin({}, component.props);\n\t\t}\n\n\t\tconst props = this.getManagerData(component).props_;\n\t\tComponentDataManager.replaceNonInternal.call(\n\t\t\tthis,\n\t\t\tcomponent,\n\t\t\tdata,\n\t\t\tprops\n\t\t); // eslint-disable-line\n\t\tthis.addUnconfiguredProps_(component, props, data);\n\t\tif (component.propsChanged) {\n\t\t\tcomponent.propsChanged(prevProps);\n\t\t}\n\t}\n}\n\nexport default new JSXDataManager();\n"]}