{"version":3,"sources":["../src/JSXRenderer.js"],"names":["COUNT_PROP","INC_DOM_DATA","KEY_PREFIX","JSXRenderer","changes","state","props","component","key","comp","getPatchingComponent","data","getRenderer","getData","rootElementRendered","jsxRenderer_","incElementCount","element","node","IncrementalDOM","currentElement","render","iDOMHelpers","renderArbitrary","elementVoid","skipChild","constructor","RENDERER_NAME"],"mappings":"AAAA;;;;;;;;;;AAEA;;AACA;;;;;;;;;;;;AAEA,IAAMA,aAAa,iBAAnB;AACA,IAAMC,eAAe,sBAArB;AACA,IAAMC,aAAa,aAAnB;;AAEA;;;;IAGMC,W;;;;;;;;;;;;AACL;;;wCAGsBC,O,EAAS;AAC9B,UAAO,CAACA,QAAQC,KAAT,EAAgBD,QAAQE,KAAxB,CAAP;AACA;;AAED;;;;;;;;;;;;8BASYC,S,EAAWC,G,EAAK;AAC3BA,+HAAwBD,SAAxB,EAAmCC,GAAnC;AACA,OAAMC,OAAO,KAAKC,oBAAL,EAAb;AACA,OAAMC,OAAOF,KAAKG,WAAL,GAAmBC,OAAnB,CAA2BJ,IAA3B,CAAb;AACA,OAAI,CAAC,4BAAgBD,GAAhB,CAAL,EAA2B;AAC1B,QAAIG,KAAKG,mBAAT,EAA8B;AAC7BN,WAAMN,aAAaa,aAAaC,eAAb,EAAnB;AACA,KAFD,MAEO,IAAIP,KAAKQ,OAAL,IAAgBR,KAAKQ,OAAL,CAAahB,YAAb,CAApB,EAAgD;AACtDO,WAAMC,KAAKQ,OAAL,CAAahB,YAAb,EAA2BO,GAAjC;AACA;AACD;AACD,OAAI,CAACG,KAAKG,mBAAV,EAA+B;AAC9BH,SAAKG,mBAAL,GAA2B,IAA3B;AACA;AACD,UAAON,GAAP;AACA;;AAED;;;;;;qCAGmBU,I,EAAM;AACxBA,QAAKlB,UAAL,IAAmB,CAAnB;AACA;;AAED;;;;;;;oCAIkB;AACjB,OAAMkB,OAAOC,eAAeC,cAAf,EAAb;AACAF,QAAKlB,UAAL,IAAmB,CAACkB,KAAKlB,UAAL,KAAoB,CAArB,IAA0B,CAA7C;AACA,UAAOkB,KAAKlB,UAAL,CAAP;AACA;;AAED;;;;;;;;;;wBAOMO,S,EAAW;AAChB,QAAKM,OAAL,CAAaN,SAAb,EAAwBO,mBAAxB,GAA8C,KAA9C;AACA,mHAAYP,SAAZ;AACA;;AAED;;;;;;;;;;+BAOaA,S,EAAW;AACvB,OAAIA,UAAUc,MAAd,EAAsB;AACrBC,gBAAYC,eAAZ,CAA4BhB,UAAUc,MAAV,EAA5B;AACA,IAFD,MAEO;AACN,2HAAmBd,SAAnB;AACA;AACD;;AAED;;;;;;;8BAIY;AACXY,kBAAeK,WAAf,CAA2BT,aAAaC,eAAxC;AACA;;AAED;;;;;;+BAGa;AACZD,gBAAaU,SAAb;AACA;AACA;;;;EA5FwB,8BAAuBC,W;;AA+FjD,IAAMX,eAAe,IAAIZ,WAAJ,EAArB;AACAY,aAAaY,aAAb,GAA6B,KAA7B;;kBAEeZ,Y","file":"JSXRenderer.js","sourcesContent":["'use strict';\n\nimport {isDefAndNotNull} from 'metal';\nimport IncrementalDomRenderer from 'metal-incremental-dom';\n\nconst COUNT_PROP = '__metalJsxCount';\nconst INC_DOM_DATA = '__incrementalDOMData';\nconst KEY_PREFIX = '_metal_jsx_';\n\n/**\n * Renderer that handles JSX.\n */\nclass JSXRenderer extends IncrementalDomRenderer.constructor {\n\t/**\n\t * @inheritDoc\n\t */\n\tbuildShouldUpdateArgs(changes) {\n\t\treturn [changes.state, changes.props];\n\t}\n\n\t/**\n\t * Called when generating a key for the next dom element to be created via\n\t * incremental dom. Adds keys to elements that don't have one yet, according\n\t * to their position in the parent. This helps use cases that use\n\t * conditionally rendered elements, which is very common in JSX.\n\t * @param {!Component} component\n\t * @param {string} key\n\t * @return {?string}\n\t */\n\tgenerateKey(component, key) {\n\t\tkey = super.generateKey(component, key);\n\t\tconst comp = this.getPatchingComponent();\n\t\tconst data = comp.getRenderer().getData(comp);\n\t\tif (!isDefAndNotNull(key)) {\n\t\t\tif (data.rootElementRendered) {\n\t\t\t\tkey = KEY_PREFIX + jsxRenderer_.incElementCount();\n\t\t\t} else if (comp.element && comp.element[INC_DOM_DATA]) {\n\t\t\t\tkey = comp.element[INC_DOM_DATA].key;\n\t\t\t}\n\t\t}\n\t\tif (!data.rootElementRendered) {\n\t\t\tdata.rootElementRendered = true;\n\t\t}\n\t\treturn key;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\thandleNodeRendered(node) {\n\t\tnode[COUNT_PROP] = 0;\n\t}\n\n\t/**\n\t * Increments the number of children in the current element.\n\t * @return {number}\n\t */\n\tincElementCount() {\n\t\tconst node = IncrementalDOM.currentElement();\n\t\tnode[COUNT_PROP] = (node[COUNT_PROP] || 0) + 1;\n\t\treturn node[COUNT_PROP];\n\t}\n\n\t/**\n\t * Overrides the original method from `IncrementalDomRenderer` so we can\n\t * keep track of if the root element of the patched component has already\n\t * been rendered or not.\n\t * @param {!Component} component\n\t * @override\n\t */\n\tpatch(component) {\n\t\tthis.getData(component).rootElementRendered = false;\n\t\tsuper.patch(component);\n\t}\n\n\t/**\n\t * Overrides the original method from `IncrementalDomRenderer` to handle the\n\t * case where developers return a child node directly from the \"render\"\n\t * function.\n\t * @param {!Component} component\n\t * @override\n\t */\n\trenderIncDom(component) {\n\t\tif (component.render) {\n\t\t\tiDOMHelpers.renderArbitrary(component.render());\n\t\t} else {\n\t\t\tsuper.renderIncDom(component);\n\t\t}\n\t}\n\n\t/**\n\t * Skips the current child in the count (used when a conditional render\n\t * decided not to render anything).\n\t */\n\tskipChild() {\n\t\tIncrementalDOM.elementVoid(jsxRenderer_.incElementCount);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tskipRender() {\n\t\tjsxRenderer_.skipChild();\n\t\tsuper.skipRender();\n\t}\n}\n\nconst jsxRenderer_ = new JSXRenderer();\njsxRenderer_.RENDERER_NAME = 'jsx';\n\nexport default jsxRenderer_;\n"]}