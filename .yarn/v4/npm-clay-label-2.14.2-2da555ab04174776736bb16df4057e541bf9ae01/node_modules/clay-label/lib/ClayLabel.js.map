{"version":3,"sources":["../src/ClayLabel.js"],"names":["ClayLabel","event","emit","name","originalEvent","ClayComponent","STATE","closeable","Config","bool","value","data","object","defaultEventHandler","elementClasses","string","href","id","label","any","size","oneOf","spritemap","style","oneOfType","tabIndex","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,S;;;;;;;;;;;;AACL;;;;;;0CAMwBC,K,EAAO;AAC9B,UAAO,CAAC,KAAKC,IAAL,CAAU;AACjBC,UAAM,OADW;AAEjBC,mBAAeH;AAFE,IAAV,CAAR;AAIA;;;;EAZsBI,uB;;AAexB;;;;;;;AAKAL,UAAUM,KAAV,GAAkB;AACjB;;;;;;;AAOAC,YAAWC,mBAAOC,IAAP,GAAcC,KAAd,CAAoB,KAApB,CARM;;AAUjB;;;;;;;AAOAC,OAAMH,mBAAOI,MAAP,EAjBW;;AAmBjB;;;;;;;;AAQAC,sBAAqBL,mBAAOI,MAAP,EA3BJ;;AA6BjB;;;;;;;AAOAE,iBAAgBN,mBAAOO,MAAP,EApCC;;AAsCjB;;;;;;;AAOAC,OAAMR,mBAAOO,MAAP,EA7CW;;AA+CjB;;;;;;;AAOAE,KAAIT,mBAAOO,MAAP,EAtDa;;AAwDjB;;;;;;;AAOAG,QAAOV,mBAAOW,GAAP,EA/DU;;AAiEjB;;;;;;;AAOAC,OAAMZ,mBAAOa,KAAP,CAAa,CAAC,IAAD,CAAb,CAxEW;;AA0EjB;;;;;;;AAOAC,YAAWd,mBAAOO,MAAP,EAjFM;;AAmFjB;;;;;;;AAOAQ,QAAOf,mBAAOgB,SAAP,CAAiB,CACvBhB,mBAAOC,IAAP,EADuB,EAEvBD,mBAAOa,KAAP,CAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,SAA3C,CAAb,CAFuB,CAAjB,EAGJX,KAHI,CAGE,WAHF,CA1FU;;AA+FjB;;;;;;;AAOAe,WAAUjB,mBAAOO,MAAP;AAtGO,CAAlB;;AAyGA,iCAAmB,YAAnB,EAAiCf,SAAjC;;AAEA0B,mBAAIC,QAAJ,CAAa3B,SAAb,EAAwB4B,sBAAxB;;QAEQ5B,S,GAAAA,S;kBACOA,S","file":"ClayLabel.js","sourcesContent":["import 'clay-button';\nimport 'clay-link';\nimport {Config} from 'metal-state';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayLabel.soy.js';\n\n/**\n * Metal Clay Label component.\n * @extends ClayComponent\n */\nclass ClayLabel extends ClayComponent {\n\t/**\n\t * Handle `click` button and emit event `close`.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleCloseButtonClick(event) {\n\t\treturn !this.emit({\n\t\t\tname: 'close',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayLabel.STATE = {\n\t/**\n\t * Flag to indicate if the label is closeable.\n\t * @default false\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?bool}\n\t */\n\tcloseable: Config.bool().value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * HREF in label.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The label of the badge element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any(),\n\n\t/**\n\t * The size of the label element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\tsize: Config.oneOf(['lg']),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * Label style color.\n\t * @default secondary\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(bool|string)}\n\t */\n\tstyle: Config.oneOfType([\n\t\tConfig.bool(),\n\t\tConfig.oneOf(['danger', 'info', 'secondary', 'warning', 'success']),\n\t]).value('secondary'),\n\n\t/**\n\t * Flag to indicate if the element can be focused.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\ttabIndex: Config.string(),\n};\n\ndefineWebComponent('clay-label', ClayLabel);\n\nSoy.register(ClayLabel, templates);\n\nexport {ClayLabel};\nexport default ClayLabel;\n"]}