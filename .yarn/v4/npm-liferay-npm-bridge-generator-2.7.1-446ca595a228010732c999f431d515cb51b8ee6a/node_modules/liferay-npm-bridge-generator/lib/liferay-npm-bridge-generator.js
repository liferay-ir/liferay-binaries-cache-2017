'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = main;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = _yargs2.default
// Whether or not to explain what's going on
.option('verbose', {
	alias: 'v',
	default: false
}).argv;

// Default template used to generate bridges
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

var defaultTemplate = 'Liferay.Loader.define(\'{PKG_NAME}@{PKG_VERSION}/{DEST_MOD}\', [\'module\', \'{SRC_MOD}\'], function (module, src) {\n  module.exports = src;\n});\n';

/**
 * Main entry point
 * @return {void}
 */
function main() {
	var pkgJson = (0, _readJsonSync2.default)('./package.json');
	var config = (0, _readJsonSync2.default)('./.npmbridgerc');

	Object.keys(config).forEach(function (key) {
		var opts = config[key];

		log('\'' + key + '\' bridges:');

		// Input folder where source modules live
		var input = opts['input'] || 'classes/META-INF/resources/node_modules';

		// Output folder where bridge modules must be placed
		var output = opts['output'] || 'classes/META-INF/resources/bridge';

		// The glob expression(s) to filter source modules
		var fileGlobs = opts['file-globs'] || '**/lib/**/*.js';

		// A mapper to convert source file paths to destination file paths
		var destFileMapper = opts['dest-file-mapper'] || {
			from: '(.*)\\$(.*)@.*/lib/(.*)',
			to: '$2/src/$3'
		};

		// A mapper to convert source file paths to source module names
		var srcModNameMapper = opts['src-mod-name-mapper'] || {
			from: '(.*)@[^/]*(.*)\\.js$',
			to: '$1$2'
		};

		// A mapper to convert destination file paths to destination module names
		var destModNameMapper = opts['dest-mod-name-mapper'] || {
			from: '(.*)\\.js$',
			to: 'bridge/$1'
		};

		// Template used to generate bridges
		var template = opts['template'] || defaultTemplate;

		// Go!
		_globby2.default.sync(fileGlobs.split(','), {
			cwd: input
		}).forEach(function (srcFile) {
			var destFile = srcFile.replace(new RegExp(destFileMapper.from), destFileMapper.to);
			var srcMod = srcFile.replace(new RegExp(srcModNameMapper.from), srcModNameMapper.to);
			var destMod = destFile.replace(new RegExp(destModNameMapper.from), destModNameMapper.to);
			var absDestFile = _path2.default.join(output, destFile);

			var contents = template;

			contents = contents.replace('{PKG_NAME}', pkgJson.name);
			contents = contents.replace('{PKG_VERSION}', pkgJson.version);
			contents = contents.replace('{SRC_MOD}', srcMod);
			contents = contents.replace('{DEST_MOD}', destMod);

			_fsExtra2.default.mkdirsSync(_path2.default.dirname(absDestFile));
			_fsExtra2.default.writeFileSync(absDestFile, contents);

			log(srcFile, '->', destFile);
		});
	});
}

/**
 * Log a message if verbose argument is active.
 * @param  {Array} args arguments given to the function
 * @return {void}
 */
function log() {
	if (argv.verbose) {
		var _console;

		(_console = console).log.apply(_console, arguments);
	}
}
//# sourceMappingURL=liferay-npm-bridge-generator.js.map