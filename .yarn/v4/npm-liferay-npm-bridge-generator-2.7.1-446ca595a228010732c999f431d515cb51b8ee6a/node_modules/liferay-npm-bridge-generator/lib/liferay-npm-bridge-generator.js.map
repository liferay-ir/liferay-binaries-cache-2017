{"version":3,"sources":["../src/liferay-npm-bridge-generator.js"],"names":["main","argv","option","alias","default","defaultTemplate","pkgJson","config","Object","keys","forEach","opts","key","log","input","output","fileGlobs","destFileMapper","from","to","srcModNameMapper","destModNameMapper","template","sync","split","cwd","destFile","srcFile","replace","RegExp","srcMod","destMod","absDestFile","join","contents","name","version","mkdirsSync","dirname","writeFileSync","verbose"],"mappings":";;;;;kBA6BwBA,I;;AAvBxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,OAAO;AACZ;AADY,CAEXC,MAFW,CAEJ,SAFI,EAEO;AAClBC,QAAO,GADW;AAElBC,UAAS;AAFS,CAFP,EAKTH,IALJ;;AAOA;AAnBA;;;;;;AAoBA,IAAMI,wKAAN;;AAKA;;;;AAIe,SAASL,IAAT,GAAgB;AAC9B,KAAMM,UAAU,4BAAa,gBAAb,CAAhB;AACA,KAAMC,SAAS,4BAAa,gBAAb,CAAf;;AAEAC,QAAOC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,eAAO;AAClC,MAAMC,OAAOJ,OAAOK,GAAP,CAAb;;AAEAC,aAAQD,GAAR;;AAEA;AACA,MAAME,QACLH,KAAK,OAAL,KAAiB,yCADlB;;AAGA;AACA,MAAMI,SAASJ,KAAK,QAAL,KAAkB,mCAAjC;;AAEA;AACA,MAAMK,YAAYL,KAAK,YAAL,KAAsB,gBAAxC;;AAEA;AACA,MAAMM,iBAAiBN,KAAK,kBAAL,KAA4B;AAClDO,SAAM,yBAD4C;AAElDC,OAAI;AAF8C,GAAnD;;AAKA;AACA,MAAMC,mBAAmBT,KAAK,qBAAL,KAA+B;AACvDO,SAAM,sBADiD;AAEvDC,OAAI;AAFmD,GAAxD;;AAKA;AACA,MAAME,oBAAoBV,KAAK,sBAAL,KAAgC;AACzDO,SAAM,YADmD;AAEzDC,OAAI;AAFqD,GAA1D;;AAKA;AACA,MAAMG,WAAWX,KAAK,UAAL,KAAoBN,eAArC;;AAEA;AACA,mBACEkB,IADF,CACOP,UAAUQ,KAAV,CAAgB,GAAhB,CADP,EAC6B;AAC3BC,QAAKX;AADsB,GAD7B,EAIEJ,OAJF,CAIU,mBAAW;AACnB,OAAMgB,WAAWC,QAAQC,OAAR,CAChB,IAAIC,MAAJ,CAAWZ,eAAeC,IAA1B,CADgB,EAEhBD,eAAeE,EAFC,CAAjB;AAIA,OAAMW,SAASH,QAAQC,OAAR,CACd,IAAIC,MAAJ,CAAWT,iBAAiBF,IAA5B,CADc,EAEdE,iBAAiBD,EAFH,CAAf;AAIA,OAAMY,UAAUL,SAASE,OAAT,CACf,IAAIC,MAAJ,CAAWR,kBAAkBH,IAA7B,CADe,EAEfG,kBAAkBF,EAFH,CAAhB;AAIA,OAAMa,cAAc,eAAKC,IAAL,CAAUlB,MAAV,EAAkBW,QAAlB,CAApB;;AAEA,OAAIQ,WAAWZ,QAAf;;AAEAY,cAAWA,SAASN,OAAT,CAAiB,YAAjB,EAA+BtB,QAAQ6B,IAAvC,CAAX;AACAD,cAAWA,SAASN,OAAT,CAAiB,eAAjB,EAAkCtB,QAAQ8B,OAA1C,CAAX;AACAF,cAAWA,SAASN,OAAT,CAAiB,WAAjB,EAA8BE,MAA9B,CAAX;AACAI,cAAWA,SAASN,OAAT,CAAiB,YAAjB,EAA+BG,OAA/B,CAAX;;AAEA,qBAAGM,UAAH,CAAc,eAAKC,OAAL,CAAaN,WAAb,CAAd;AACA,qBAAGO,aAAH,CAAiBP,WAAjB,EAA8BE,QAA9B;;AAEArB,OAAIc,OAAJ,EAAa,IAAb,EAAmBD,QAAnB;AACA,GA9BF;AA+BA,EApED;AAqEA;;AAED;;;;;AAKA,SAASb,GAAT,GAAsB;AACrB,KAAIZ,KAAKuC,OAAT,EAAkB;AAAA;;AACjB,uBAAQ3B,GAAR;AACA;AACD","file":"liferay-npm-bridge-generator.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport yargs from 'yargs';\n\nconst argv = yargs\n\t// Whether or not to explain what's going on\n\t.option('verbose', {\n\t\talias: 'v',\n\t\tdefault: false,\n\t}).argv;\n\n// Default template used to generate bridges\nconst defaultTemplate = `Liferay.Loader.define('{PKG_NAME}@{PKG_VERSION}/{DEST_MOD}', ['module', '{SRC_MOD}'], function (module, src) {\n  module.exports = src;\n});\n`;\n\n/**\n * Main entry point\n * @return {void}\n */\nexport default function main() {\n\tconst pkgJson = readJsonSync('./package.json');\n\tconst config = readJsonSync('./.npmbridgerc');\n\n\tObject.keys(config).forEach(key => {\n\t\tconst opts = config[key];\n\n\t\tlog(`'${key}' bridges:`);\n\n\t\t// Input folder where source modules live\n\t\tconst input =\n\t\t\topts['input'] || 'classes/META-INF/resources/node_modules';\n\n\t\t// Output folder where bridge modules must be placed\n\t\tconst output = opts['output'] || 'classes/META-INF/resources/bridge';\n\n\t\t// The glob expression(s) to filter source modules\n\t\tconst fileGlobs = opts['file-globs'] || '**/lib/**/*.js';\n\n\t\t// A mapper to convert source file paths to destination file paths\n\t\tconst destFileMapper = opts['dest-file-mapper'] || {\n\t\t\tfrom: '(.*)\\\\$(.*)@.*/lib/(.*)',\n\t\t\tto: '$2/src/$3',\n\t\t};\n\n\t\t// A mapper to convert source file paths to source module names\n\t\tconst srcModNameMapper = opts['src-mod-name-mapper'] || {\n\t\t\tfrom: '(.*)@[^/]*(.*)\\\\.js$',\n\t\t\tto: '$1$2',\n\t\t};\n\n\t\t// A mapper to convert destination file paths to destination module names\n\t\tconst destModNameMapper = opts['dest-mod-name-mapper'] || {\n\t\t\tfrom: '(.*)\\\\.js$',\n\t\t\tto: 'bridge/$1',\n\t\t};\n\n\t\t// Template used to generate bridges\n\t\tconst template = opts['template'] || defaultTemplate;\n\n\t\t// Go!\n\t\tglobby\n\t\t\t.sync(fileGlobs.split(','), {\n\t\t\t\tcwd: input,\n\t\t\t})\n\t\t\t.forEach(srcFile => {\n\t\t\t\tconst destFile = srcFile.replace(\n\t\t\t\t\tnew RegExp(destFileMapper.from),\n\t\t\t\t\tdestFileMapper.to\n\t\t\t\t);\n\t\t\t\tconst srcMod = srcFile.replace(\n\t\t\t\t\tnew RegExp(srcModNameMapper.from),\n\t\t\t\t\tsrcModNameMapper.to\n\t\t\t\t);\n\t\t\t\tconst destMod = destFile.replace(\n\t\t\t\t\tnew RegExp(destModNameMapper.from),\n\t\t\t\t\tdestModNameMapper.to\n\t\t\t\t);\n\t\t\t\tconst absDestFile = path.join(output, destFile);\n\n\t\t\t\tlet contents = template;\n\n\t\t\t\tcontents = contents.replace('{PKG_NAME}', pkgJson.name);\n\t\t\t\tcontents = contents.replace('{PKG_VERSION}', pkgJson.version);\n\t\t\t\tcontents = contents.replace('{SRC_MOD}', srcMod);\n\t\t\t\tcontents = contents.replace('{DEST_MOD}', destMod);\n\n\t\t\t\tfs.mkdirsSync(path.dirname(absDestFile));\n\t\t\t\tfs.writeFileSync(absDestFile, contents);\n\n\t\t\t\tlog(srcFile, '->', destFile);\n\t\t\t});\n\t});\n}\n\n/**\n * Log a message if verbose argument is active.\n * @param  {Array} args arguments given to the function\n * @return {void}\n */\nfunction log(...args) {\n\tif (argv.verbose) {\n\t\tconsole.log(...args);\n\t}\n}\n"]}