{"version":3,"sources":["../src/assertions.js"],"names":["assertBoolean","assertDef","assertDefAndNotNull","assertFunction","assertNotNull","assertNumber","assertObject","assertString","assertDocument","assertDocumentFragment","assertElement","assertWindow","value","errorMessage","Error"],"mappings":";;;;;QAoBgBA,a,GAAAA,a;QAWAC,S,GAAAA,S;QAWAC,mB,GAAAA,mB;QAWAC,c,GAAAA,c;QAWAC,a,GAAAA,a;QAWAC,Y,GAAAA,Y;QAWAC,Y,GAAAA,Y;QAWAC,Y,GAAAA,Y;QAWAC,c,GAAAA,c;QAWAC,sB,GAAAA,sB;QAWAC,a,GAAAA,a;QAWAC,Y,GAAAA,Y;;AA7IhB;;AAeA;;;;;AAKO,SAASX,aAAT,CAAuBY,KAAvB,EAA8BC,YAA9B,EAA4C;AAClD,MAAI,CAAC,sBAAUD,KAAV,CAAL,EAAuB;AACtB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASZ,SAAT,CAAmBW,KAAnB,EAA0BC,YAA1B,EAAwC;AAC9C,MAAI,CAAC,kBAAMD,KAAN,CAAL,EAAmB;AAClB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASX,mBAAT,CAA6BU,KAA7B,EAAoCC,YAApC,EAAkD;AACxD,MAAI,CAAC,4BAAgBD,KAAhB,CAAL,EAA6B;AAC5B,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASV,cAAT,CAAwBS,KAAxB,EAA+BC,YAA/B,EAA6C;AACnD,MAAI,CAAC,uBAAWD,KAAX,CAAL,EAAwB;AACvB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAAST,aAAT,CAAuBQ,KAAvB,EAA8BC,YAA9B,EAA4C;AAClD,MAAI,mBAAOD,KAAP,CAAJ,EAAmB;AAClB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASR,YAAT,CAAsBO,KAAtB,EAA6BC,YAA7B,EAA2C;AACjD,MAAI,CAAC,qBAASD,KAAT,CAAL,EAAsB;AACrB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASP,YAAT,CAAsBM,KAAtB,EAA6BC,YAA7B,EAA2C;AACjD,MAAI,CAAC,qBAASD,KAAT,CAAL,EAAsB;AACrB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASN,YAAT,CAAsBK,KAAtB,EAA6BC,YAA7B,EAA2C;AACjD,MAAI,CAAC,qBAASD,KAAT,CAAL,EAAsB;AACrB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASL,cAAT,CAAwBI,KAAxB,EAA+BC,YAA/B,EAA6C;AACnD,MAAI,CAAC,uBAAWD,KAAX,CAAL,EAAwB;AACvB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASJ,sBAAT,CAAgCG,KAAhC,EAAuCC,YAAvC,EAAqD;AAC3D,MAAI,CAAC,+BAAmBD,KAAnB,CAAL,EAAgC;AAC/B,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASH,aAAT,CAAuBE,KAAvB,EAA8BC,YAA9B,EAA4C;AAClD,MAAI,CAAC,sBAAUD,KAAV,CAAL,EAAuB;AACtB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD;;AAED;;;;;AAKO,SAASF,YAAT,CAAsBC,KAAtB,EAA6BC,YAA7B,EAA2C;AACjD,MAAI,CAAC,qBAASD,KAAT,CAAL,EAAsB;AACrB,UAAM,IAAIE,KAAJ,CAAUD,YAAV,CAAN;AACA;AACD","file":"assertions.js","sourcesContent":["import {\n\tisBoolean,\n\tisDef,\n\tisDefAndNotNull,\n\tisDocument,\n\tisDocumentFragment,\n\tisElement,\n\tisFunction,\n\tisNull,\n\tisNumber,\n\tisObject,\n\tisString,\n\tisWindow,\n} from 'metal';\n\n/**\n * Asserts value is a boolean.\n * @param  {*} value\n * @param  {string} errorMessage Error message\n */\nexport function assertBoolean(value, errorMessage) {\n\tif (!isBoolean(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is defined.\n * @param  {Object} value\n * @param  {string} errorMessage Error message\n */\nexport function assertDef(value, errorMessage) {\n\tif (!isDef(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is defined and not null.\n * @param  {Object} value\n * @param  {string} errorMessage Error message\n */\nexport function assertDefAndNotNull(value, errorMessage) {\n\tif (!isDefAndNotNull(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a function.\n * @param  {Function} value\n * @param  {string} errorMessage Error message\n */\nexport function assertFunction(value, errorMessage) {\n\tif (!isFunction(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is not null.\n * @param  {Object} value\n * @param  {string} errorMessage Error message\n */\nexport function assertNotNull(value, errorMessage) {\n\tif (isNull(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a number.\n * @param  {Number} value\n * @param  {string} errorMessage Error message\n */\nexport function assertNumber(value, errorMessage) {\n\tif (!isNumber(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is an object.\n * @param  {Object} value\n * @param  {string} errorMessage Error message\n */\nexport function assertObject(value, errorMessage) {\n\tif (!isObject(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a string.\n * @param  {String} value\n * @param  {string} errorMessage Error message\n */\nexport function assertString(value, errorMessage) {\n\tif (!isString(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a document.\n * @param  {Document} value\n * @param  {string} errorMessage Error message\n */\nexport function assertDocument(value, errorMessage) {\n\tif (!isDocument(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a document fragment.\n * @param  {DocumentFragment} value\n * @param  {string} errorMessage Error message\n */\nexport function assertDocumentFragment(value, errorMessage) {\n\tif (!isDocumentFragment(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is an element.\n * @param  {Element} value\n * @param  {string} errorMessage Error message\n */\nexport function assertElement(value, errorMessage) {\n\tif (!isElement(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\n/**\n * Asserts value is a window.\n * @param  {Window} value\n * @param  {string} errorMessage Error message\n */\nexport function assertWindow(value, errorMessage) {\n\tif (!isWindow(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n"]}