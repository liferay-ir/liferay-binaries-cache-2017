{"version":3,"sources":["../src/ClaySelect.js"],"names":["ClaySelect","ClayComponent","STATE","data","Config","object","defaultEventHandler","disabled","bool","value","elementClasses","string","id","inline","label","multiple","name","options","arrayOf","shapeOf","required","selected","Soy","register","templates"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,U;;;;;;;;;;EAAmBC,uB;;AAEzB;;;;;;;AAKAD,WAAWE,KAAX,GAAmB;AAClB;;;;;;;AAOAC,OAAMC,mBAAOC,MAAP,EARY;;AAUlB;;;;;;;;AAQAC,sBAAqBF,mBAAOC,MAAP,EAlBH;;AAoBlB;;;;;;;AAOAE,WAAUH,mBAAOI,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA3BQ;;AA6BlB;;;;;;;AAOAC,iBAAgBN,mBAAOO,MAAP,EApCE;;AAsClB;;;;;;;AAOAC,KAAIR,mBAAOO,MAAP,EA7Cc;;AA+ClB;;;;;;;;;AASAE,SAAQT,mBAAOI,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAxDU;;AA0DlB;;;;;;;AAOAK,QAAOV,mBAAOO,MAAP,EAjEW;;AAmElB;;;;;;;AAOAI,WAAUX,mBAAOI,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA1EQ;;AA4ElB;;;;;;;AAOAO,OAAMZ,mBAAOO,MAAP,EAnFY;;AAqFlB;;;;;;;AAOAM,UAASb,mBAAOc,OAAP,CACRd,mBAAOe,OAAP,CAAe;AACdL,SAAOV,mBAAOO,MAAP,GAAgBS,QAAhB,EADO;AAEdC,YAAUjB,mBAAOI,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAFI;AAGdA,SAAOL,mBAAOO,MAAP,GAAgBS,QAAhB;AAHO,EAAf,CADQ,EAMPA,QANO;AA5FS,CAAnB;;AAqGA,iCAAmB,aAAnB,EAAkCpB,UAAlC;;AAEAsB,mBAAIC,QAAJ,CAAavB,UAAb,EAAyBwB,uBAAzB;;QAEQxB,U,GAAAA,U;kBACOA,U","file":"ClaySelect.js","sourcesContent":["import ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClaySelect.soy.js';\n\n/**\n * Metal Clay Select component.\n * @extends ClayComponent\n */\nclass ClaySelect extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClaySelect.STATE = {\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * The select disabled attribute.\n\t * @default false\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?boolean}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Flag to indicate if select should be wrapped to be inline or not.\n\t * In order to make inline work properly you may place it inside\n\t * a .form-group-autofit container.\n\t * @default false\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?bool}\n\t */\n\tinline: Config.bool().value(false),\n\n\t/**\n\t * Label of the select element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?(string|undefined)}\n\t */\n\tlabel: Config.string(),\n\n\t/**\n\t * Flag to indicate if the select element should be placed inline.\n\t * @default false\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?bool}\n\t */\n\tmultiple: Config.bool().value(false),\n\n\t/**\n\t * Name of the select element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {?(string|undefined)}\n\t */\n\tname: Config.string(),\n\n\t/**\n\t * Options of the select element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySelect\n\t * @type {!array}\n\t */\n\toptions: Config.arrayOf(\n\t\tConfig.shapeOf({\n\t\t\tlabel: Config.string().required(),\n\t\t\tselected: Config.bool().value(false),\n\t\t\tvalue: Config.string().required(),\n\t\t})\n\t).required(),\n};\n\ndefineWebComponent('clay-select', ClaySelect);\n\nSoy.register(ClaySelect, templates);\n\nexport {ClaySelect};\nexport default ClaySelect;\n"]}