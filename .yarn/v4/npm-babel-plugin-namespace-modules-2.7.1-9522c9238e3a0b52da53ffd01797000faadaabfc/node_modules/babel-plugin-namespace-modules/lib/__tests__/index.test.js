'use strict';

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _babelIpc = require('liferay-npm-build-tools-common/lib/babel-ipc');

var babelIpc = _interopRequireWildcard(_babelIpc);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var filenameRelative = _path2.default.join(__dirname, '__fixtures__', 'source.js'); /**
                                                                                     * Â© 2017 Liferay, Inc. <https://liferay.com>
                                                                                     *
                                                                                     * SPDX-License-Identifier: LGPL-3.0-or-later
                                                                                     */

var imports = {
	provider: {
		'imp-module': '^1.0.0'
	},
	shims: {
		fs: '^1.0.0'
	},
	'': {
		'no-namespace-module': '^1.0.0'
	}
};

describe('when called from Babel', function () {
	it('correctly namespaces require modules', function () {
		var source = '\n\t\t\tdefine(function(){\n\t\t\t\trequire(\'a-module\');\n\t\t\t\trequire(\'imp-module\');\n\t\t\t\trequire(\'no-namespace-module\');\n\t\t\t\trequire(\'./a-local-module\');\n\t\t\t\trequire(\'fs\');\n\t\t\t})\n\t\t';

		var _babel$transform = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [[_index2.default, { imports: imports }]]
		}),
		    code = _babel$transform.code;

		expect(code).toMatchSnapshot();
	});

	it('correctly namespaces define() dependencies', function () {
		var source = '\n\t\t\tdefine(\n\t\t\t\t[\'a-module\', \'imp-module\', \'no-namespace-module\', \'./a-local-module\', \'fs\'], \n\t\t\t\tfunction(){\n\t\t\t\t}\n\t\t\t)\n\t\t';

		var _babel$transform2 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [[_index2.default, { imports: imports }]]
		}),
		    code = _babel$transform2.code;

		expect(code).toMatchSnapshot();
	});

	it('does not namespace define() module name', function () {
		var source = '\n\t\t\tdefine(\'a-module\', function(){\n\t\t\t})\n\t\t';

		var _babel$transform3 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [[_index2.default, { imports: imports }]]
		}),
		    code = _babel$transform3.code;

		expect(code).toMatchSnapshot();
	});

	it('correctly namespaces all together', function () {
		var source = '\n\t\t\tdefine(\n\t\t\t\t\'a-module\', \n\t\t\t\t[\'a-module\', \'imp-module\', \'no-namespace-module\', \'./a-local-module\', \'fs\'], \n\t\t\t\tfunction(){\n\t\t\t\t\trequire(\'a-module\');\n\t\t\t\t\trequire(\'imp-module\');\n\t\t\t\t\trequire(\'no-namespace-module\');\n\t\t\t\t\trequire(\'./a-local-module\');\n\t\t\t\t\trequire(\'fs\');\n\t\t\t\t}\n\t\t\t)\n\t\t';

		var _babel$transform4 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [[_index2.default, { imports: imports }]]
		}),
		    code = _babel$transform4.code;

		expect(code).toMatchSnapshot();
	});
});

describe('when called from liferay-npm-bundler', function () {
	var logger = void 0;

	beforeEach(function () {
		babelIpc.set(filenameRelative, {
			log: logger = new _pluginLogger2.default(),
			rootPkgJson: require('./__fixtures__/root-package.json'),
			globalConfig: { imports: imports }
		});
	});

	it('correctly namespaces require modules', function () {
		var source = '\n\t\t\tdefine(function(){\n\t\t\t\trequire(\'a-module\');\n\t\t\t\trequire(\'imp-module\');\n\t\t\t\trequire(\'no-namespace-module\');\n\t\t\t\trequire(\'./a-local-module\');\n\t\t\t\trequire(\'fs\');\n\t\t\t})\n\t\t';

		var _babel$transform5 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		}),
		    code = _babel$transform5.code;

		expect(code).toMatchSnapshot();
	});

	it('correctly namespaces define() dependencies', function () {
		var source = '\n\t\t\tdefine(\n\t\t\t\t[\'a-module\', \'imp-module\', \'no-namespace-module\', \'./a-local-module\', \'fs\'], \n\t\t\t\tfunction(){\n\t\t\t\t}\n\t\t\t)\n\t\t';

		var _babel$transform6 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		}),
		    code = _babel$transform6.code;

		expect(code).toMatchSnapshot();
	});

	it('correctly namespaces define() module name', function () {
		var source = '\n\t\t\tdefine(\'a-module\', function(){\n\t\t\t})\n\t\t';

		var _babel$transform7 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		}),
		    code = _babel$transform7.code;

		expect(code).toMatchSnapshot();
	});

	it('does not namespace define() module name in the root package', function () {
		var source = '\n\t\t\tdefine(\'a-module\', function(){\n\t\t\t})\n\t\t';

		// Make the plugin think that it is processing the root package
		babelIpc.set(filenameRelative, {
			rootPkgJson: require('./__fixtures__/package.json'),
			globalConfig: { imports: imports }
		});

		var _babel$transform8 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		}),
		    code = _babel$transform8.code;

		expect(code).toMatchSnapshot();
	});

	it('correctly namespaces all together', function () {
		var source = '\n\t\t\tdefine(\n\t\t\t\t\'a-module\', \n\t\t\t\t[\'a-module\', \'imp-module\', \'no-namespace-module\', \'./a-local-module\', \'fs\'], \n\t\t\t\tfunction(){\n\t\t\t\t\trequire(\'a-module\');\n\t\t\t\t\trequire(\'imp-module\');\n\t\t\t\t\trequire(\'no-namespace-module\');\n\t\t\t\t\trequire(\'./a-local-module\');\n\t\t\t\t\trequire(\'fs\');\n\t\t\t\t}\n\t\t\t)\n\t\t';

		var _babel$transform9 = babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		}),
		    code = _babel$transform9.code;

		expect(code).toMatchSnapshot();
	});

	it('logs results correctly', function () {
		var source = '\n\t\t\tdefine(\n\t\t\t\t\'a-module\', \n\t\t\t\t[\'a-module\', \'imp-module\', \'./a-local-module\', \'fs\'], \n\t\t\t\tfunction(){\n\t\t\t\t\trequire(\'a-module\');\n\t\t\t\t\trequire(\'imp-module\');\n\t\t\t\t\trequire(\'./a-local-module\');\n\t\t\t\t\trequire(\'fs\');\n\t\t\t\t}\n\t\t\t)\n\t\t';

		babel.transform(source, {
			filenameRelative: filenameRelative,
			plugins: [_index2.default]
		});

		expect(logger.messages).toMatchSnapshot();
	});
});
//# sourceMappingURL=index.test.js.map