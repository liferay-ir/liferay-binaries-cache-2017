{"version":3,"sources":["../src/index.js"],"names":["t","types","amdDefineVisitor","ExpressionStatement","path","state","expression","node","opts","namespaces","unrolledImports","isCallExpression","callee","isIdentifier","name","args","arguments","getDefineIndices","depsIndex","dependencies","nameIndex","module","undefined","moduleName","value","ns","addNamespace","namesCount","deps","elements","forEach","dep","i","isStringLiteral","mod","isExternalDependency","isNamespaced","addDependencyNamespace","depsCount","stop","amdRequireVisitor","exit","parent","argument","isLiteral","isLocalModule","requiresCount","visitor","Program","enter","ownPkgJson","getOwnPkgJson","babelIpc","get","rootPkgJson","globalConfig","imports","namespaceModule","version","Object","assign","traverse","log","info","Identifier","namespacePkg","splitModuleName","pkgName","scope","fullPkgName","joinModuleName","pkg","filenameRelative","file","factoryIndex","length","isArrayExpression","Error","factory"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as babelIpc from 'liferay-npm-build-tools-common/lib/babel-ipc';\nimport {unrollImportsConfig} from 'liferay-npm-build-tools-common/lib/imports';\nimport * as mod from 'liferay-npm-build-tools-common/lib/modules';\nimport * as ns from 'liferay-npm-build-tools-common/lib/namespace';\nimport {getPackageJsonPath} from 'liferay-npm-build-tools-common/lib/packages';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport readJsonSync from 'read-json-sync';\n\n/**\n * @return {object} a babel visitor\n */\nexport default function({types: t}) {\n\tconst amdDefineVisitor = {\n\t\t/**\n\t\t * This is the visitor responsible of namespacing define() calls.\n\t\t *\n\t\t * The structure of opts inside state is:\n\t\t *     namespaces: {\n\t\t *     \t module: {\n\t\t *     \t   name: 'my-package'\n\t\t *     \t },\n\t\t *     \t dependencies: {\n\t\t *     \t   name: 'my-package'\n\t\t *     \t }\n\t\t *     }\n\t\t *     imports: [\n\t\t *     \t {\n\t\t *     \t   name: 'project',\n\t\t *     \t   version: '^1.0.0',\n\t\t *     \t   modules: [\n\t\t *     \t     'a-package', 'another-package'\n\t\t *     \t   ]\n\t\t *     \t }\n\t\t *     ]\n\t\t * @param {Object} path the AST path\n\t\t * @param {Object} state the Babel plugin state containing the opts field\n\t\t */\n\t\tExpressionStatement(path, state) {\n\t\t\tconst {\n\t\t\t\tnode: {expression},\n\t\t\t} = path;\n\t\t\tconst {opts} = state;\n\t\t\tconst {namespaces, unrolledImports} = opts;\n\n\t\t\tif (!t.isCallExpression(expression)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {callee} = expression;\n\n\t\t\tif (!t.isIdentifier(callee, {name: 'define'})) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {arguments: args} = expression;\n\n\t\t\tconst {dependencies: depsIndex, name: nameIndex} = getDefineIndices(\n\t\t\t\tt,\n\t\t\t\targs\n\t\t\t);\n\n\t\t\t// Namespace module name\n\t\t\tif (namespaces.module && nameIndex !== undefined) {\n\t\t\t\tconst moduleName = args[nameIndex].value;\n\n\t\t\t\targs[nameIndex].value = ns.addNamespace(\n\t\t\t\t\tmoduleName,\n\t\t\t\t\tnamespaces.module\n\t\t\t\t);\n\n\t\t\t\tstate.namesCount++;\n\t\t\t}\n\n\t\t\t// Namespace dependencies\n\t\t\tif (depsIndex !== undefined) {\n\t\t\t\tconst deps = args[depsIndex].elements;\n\n\t\t\t\tdeps.forEach((dep, i) => {\n\t\t\t\t\tconst {value: moduleName} = dep;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!t.isStringLiteral(dep) ||\n\t\t\t\t\t\t!mod.isExternalDependency(moduleName) ||\n\t\t\t\t\t\tns.isNamespaced(moduleName)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdeps[i].value = addDependencyNamespace(\n\t\t\t\t\t\tmoduleName,\n\t\t\t\t\t\tnamespaces.dependencies,\n\t\t\t\t\t\tunrolledImports\n\t\t\t\t\t);\n\n\t\t\t\t\tstate.depsCount++;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Don't traverse any more\n\t\t\tpath.stop();\n\t\t},\n\t};\n\tconst amdRequireVisitor = {\n\t\t/**\n\t\t * This is the visitor responsible of namespacing require() calls.\n\t\t *\n\t\t * The structure of opts inside state is:\n\t\t *     namespaces: {\n\t\t *     \t module: {\n\t\t *     \t   name: 'my-package'\n\t\t *     \t },\n\t\t *     \t dependencies: {\n\t\t *     \t   name: 'my-package'\n\t\t *     \t }\n\t\t *     }\n\t\t *     imports: [\n\t\t *     \t {\n\t\t *     \t   name: 'project',\n\t\t *     \t   version: '^1.0.0',\n\t\t *     \t   modules: [\n\t\t *     \t     'a-package', 'another-package'\n\t\t *     \t   ]\n\t\t *     \t }\n\t\t *     ]\n\t\t * @param {Object} path the AST path\n\t\t * @param {Object} state the Babel plugin state containing the opts field\n\t\t */\n\t\texit(path, state) {\n\t\t\tconst {node} = path;\n\t\t\tconst {opts} = state;\n\t\t\tconst {namespaces, unrolledImports} = opts;\n\n\t\t\tif (node.name !== 'require') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {parent} = path;\n\n\t\t\tif (!t.isCallExpression(parent)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst argument = parent.arguments[0];\n\n\t\t\tif (!t.isLiteral(argument) || !argument.value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {value: moduleName} = argument;\n\n\t\t\tif (\n\t\t\t\ttypeof moduleName !== 'string' ||\n\t\t\t\tmod.isLocalModule(moduleName) ||\n\t\t\t\tns.isNamespaced(moduleName)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Namespace require argument\n\t\t\targument.value = addDependencyNamespace(\n\t\t\t\tmoduleName,\n\t\t\t\tnamespaces.dependencies,\n\t\t\t\tunrolledImports\n\t\t\t);\n\n\t\t\tstate.requiresCount++;\n\t\t},\n\t};\n\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\tenter(path, state) {\n\t\t\t\t\t// Prepare configuration\n\t\t\t\t\tconst ownPkgJson = getOwnPkgJson(state);\n\n\t\t\t\t\tconst {globalConfig, rootPkgJson} = babelIpc.get(\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\t() => ({\n\t\t\t\t\t\t\trootPkgJson: ownPkgJson,\n\t\t\t\t\t\t\tglobalConfig: {\n\t\t\t\t\t\t\t\timports: state.opts.imports,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\t// Check if we need to namespace module name\n\t\t\t\t\tconst namespaceModule =\n\t\t\t\t\t\trootPkgJson.name !== ownPkgJson.name ||\n\t\t\t\t\t\trootPkgJson.version !== ownPkgJson.version;\n\n\t\t\t\t\t// Prepare opts for visitors\n\t\t\t\t\tstate.opts = Object.assign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnamespaces: {\n\t\t\t\t\t\t\t\tmodule: namespaceModule\n\t\t\t\t\t\t\t\t\t? rootPkgJson\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\tdependencies: rootPkgJson,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tunrolledImports: unrollImportsConfig(\n\t\t\t\t\t\t\t\tglobalConfig.imports\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tglobalConfig,\n\t\t\t\t\t\tstate.opts\n\t\t\t\t\t);\n\n\t\t\t\t\t// Initialize statistics for final report\n\t\t\t\t\tstate.namesCount = 0;\n\t\t\t\t\tstate.depsCount = 0;\n\t\t\t\t\tstate.requiresCount = 0;\n\t\t\t\t},\n\t\t\t\texit(path, state) {\n\t\t\t\t\t// We must traverse the AST again because the\n\t\t\t\t\t// transform-es2015-modules-amd plugin emits its define()\n\t\t\t\t\t// call after exiting Program node :-(\n\t\t\t\t\tpath.traverse(amdDefineVisitor, state);\n\n\t\t\t\t\t// Dump final report statistics\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.namesCount > 0 ||\n\t\t\t\t\t\tstate.depsCount > 0 ||\n\t\t\t\t\t\tstate.requiresCount > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst {log} = babelIpc.get(state, () => ({\n\t\t\t\t\t\t\tlog: new PluginLogger(),\n\t\t\t\t\t\t}));\n\n\t\t\t\t\t\tlog.info(\n\t\t\t\t\t\t\t'namespace-modules',\n\t\t\t\t\t\t\t'Namespaced',\n\t\t\t\t\t\t\tstate.namesCount,\n\t\t\t\t\t\t\t'define() names,',\n\t\t\t\t\t\t\tstate.depsCount,\n\t\t\t\t\t\t\t'define() dependencies,',\n\t\t\t\t\t\t\t'and',\n\t\t\t\t\t\t\tstate.requiresCount,\n\t\t\t\t\t\t\t'require() names'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tIdentifier: amdRequireVisitor,\n\t\t},\n\t};\n}\n\n/**\n * Add namespace to a module's dependency\n * @param {String} moduleName dependency module name\n * @param {String} namespacePkg package name to use as namespace\n * @param {Object} unrolledImports unrolled imports section of .npmbundlerrc file\n * @return {String} the namespaced module\n */\nfunction addDependencyNamespace(moduleName, namespacePkg, unrolledImports) {\n\tconst {pkgName, scope} = mod.splitModuleName(moduleName);\n\tconst fullPkgName = mod.joinModuleName(scope, pkgName);\n\tconst pkg = unrolledImports[fullPkgName] || namespacePkg;\n\n\treturn pkg.name === '' ? moduleName : ns.addNamespace(moduleName, pkg);\n}\n\n/**\n * Get our own package.json file\n * @param  {Object} state Babel plugin's state object\n * @return {Object} the contents of our own package.json\n */\nfunction getOwnPkgJson(state) {\n\tconst {\n\t\tfile: {\n\t\t\topts: {filenameRelative},\n\t\t},\n\t} = state;\n\n\treturn readJsonSync(getPackageJsonPath(filenameRelative));\n}\n\n/**\n * Get the indices of define() call arguments\n * @param {Object} t a Babel plugin types object\n * @param {Array} args an array of AST nodes representing the arguments of a define() call\n * @return {Object} an Object with name, dependencies, and factory fields (where missings arguments are undefined)\n */\nfunction getDefineIndices(t, args) {\n\tlet nameIndex;\n\tlet depsIndex;\n\tlet factoryIndex;\n\n\t// Define signature is: define(id?, dependencies?, factory);\n\tswitch (args.length) {\n\t\tcase 1:\n\t\t\tfactoryIndex = 0;\n\t\t\tbreak;\n\n\t\tcase 2:\n\t\t\tif (t.isStringLiteral(args[0])) {\n\t\t\t\tnameIndex = 0;\n\t\t\t} else if (t.isArrayExpression(args[0])) {\n\t\t\t\tdepsIndex = 0;\n\t\t\t}\n\t\t\tfactoryIndex = 1;\n\t\t\tbreak;\n\n\t\tcase 3:\n\t\t\tnameIndex = 0;\n\t\t\tdepsIndex = 1;\n\t\t\tfactoryIndex = 2;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`Unexpected argument count of ${args.length}`);\n\t}\n\n\treturn {\n\t\tname: nameIndex,\n\t\tdependencies: depsIndex,\n\t\tfactory: factoryIndex,\n\t};\n}\n"]}