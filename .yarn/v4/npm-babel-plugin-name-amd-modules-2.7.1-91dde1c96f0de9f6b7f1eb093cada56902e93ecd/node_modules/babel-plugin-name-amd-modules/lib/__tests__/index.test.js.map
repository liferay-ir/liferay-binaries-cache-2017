{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["babel","babelIpc","filenameRelative","join","__dirname","logger","beforeEach","set","log","it","source","transform","plugins","expect","messages","toMatchSnapshot","code"],"mappings":";;AAMA;;IAAYA,K;;AACZ;;IAAYC,Q;;AACZ;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMC,mBAAmB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,cAArB,EAAqC,WAArC,CAAzB,C,CAZA;;;;;;AAcA,IAAIC,eAAJ;;AAEAC,WAAW,YAAM;AAChBL,UAASM,GAAT,CAAaL,gBAAb,EAA+B;AAC9BM,OAAMH,SAAS;AADe,EAA/B;AAGA,CAJD;;AAMAI,GAAG,wBAAH,EAA6B,YAAM;AAClC,KAAMC,2CAAN;;AAIAV,OAAMW,SAAN,CAAgBD,MAAhB,EAAwB;AACvBR,oCADuB;AAEvBU,WAAS;AAFc,EAAxB;;AAKAC,QAAOR,OAAOS,QAAd,EAAwBC,eAAxB;AACA,CAXD;;AAaAN,GAAG,mCAAH,EAAwC,YAAM;AAC7C,KAAMC,2CAAN;;AAD6C,wBAK9BV,MAAMW,SAAN,CAAgBD,MAAhB,EAAwB;AACtCR,oCADsC;AAEtCU,WAAS;AAF6B,EAAxB,CAL8B;AAAA,KAKtCI,IALsC,oBAKtCA,IALsC;;AAU7CH,QAAOG,IAAP,EAAaD,eAAb;AACA,CAXD;;AAaAN,GAAG,iCAAH,EAAsC,YAAM;AAC3C,KAAMC,gEAAN;;AAD2C,yBAK5BV,MAAMW,SAAN,CAAgBD,MAAhB,EAAwB;AACtCR,oCADsC;AAEtCU,WAAS;AAF6B,EAAxB,CAL4B;AAAA,KAKpCI,IALoC,qBAKpCA,IALoC;;AAU3CH,QAAOG,IAAP,EAAaD,eAAb;AACA,CAXD","file":"index.test.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as babel from 'babel-core';\nimport * as babelIpc from 'liferay-npm-build-tools-common/lib/babel-ipc';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport path from 'path';\nimport plugin from '../index';\n\nconst filenameRelative = path.join(__dirname, '__fixtures__', 'source.js');\n\nlet logger;\n\nbeforeEach(() => {\n\tbabelIpc.set(filenameRelative, {\n\t\tlog: (logger = new PluginLogger()),\n\t});\n});\n\nit('logs results correctly', () => {\n\tconst source = `\n\tdefine([], function(){})\n\t`;\n\n\tbabel.transform(source, {\n\t\tfilenameRelative,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(logger.messages).toMatchSnapshot();\n});\n\nit('correctly names anonymous modules', () => {\n\tconst source = `\n\tdefine([], function(){})\n\t`;\n\n\tconst {code} = babel.transform(source, {\n\t\tfilenameRelative,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(code).toMatchSnapshot();\n});\n\nit('correctly renames named modules', () => {\n\tconst source = `\n\tdefine('my-invalid-name', [], function(){})\n\t`;\n\n\tconst {code} = babel.transform(source, {\n\t\tfilenameRelative,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(code).toMatchSnapshot();\n});\n"]}