'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.templates = exports.ClayCardGrid = undefined;

var _metalComponent = require('metal-component');

var _metalComponent2 = _interopRequireDefault(_metalComponent);

var _metalSoy = require('metal-soy');

var _metalSoy2 = _interopRequireDefault(_metalSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint ignore:start */


var templates;
goog.loadModule(function (exports) {
  var soy = goog.require('soy');
  var soydata = goog.require('soydata');
  // This file was automatically generated from ClayCardGrid.soy.
  // Please don't edit this file by hand.

  /**
   * @fileoverview Templates in namespace ClayCardGrid.
   * @hassoydeltemplate {ClayCardGrid.Card.idom}
   * @hassoydelcall {ClayCardGrid.Card.idom}
   * @public
   */

  goog.module('ClayCardGrid.incrementaldom');

  goog.require('goog.soy.data.SanitizedContent');
  var incrementalDom = goog.require('incrementaldom');
  goog.require('soy');
  goog.require('soy.asserts');
  var soyIdom = goog.require('soy.idom');

  var $templateAlias1 = _metalSoy2.default.getTemplate('ClayFileCard.incrementaldom', 'render');

  var $templateAlias2 = _metalSoy2.default.getTemplate('ClayHorizontalCard.incrementaldom', 'render');

  var $templateAlias3 = _metalSoy2.default.getTemplate('ClayImageCard.incrementaldom', 'render');

  var $templateAlias4 = _metalSoy2.default.getTemplate('ClayUserCard.incrementaldom', 'render');

  /**
   * @param {{
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  _handleItemToggled: (*|null|undefined),
   *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
   *  id: (!goog.soy.data.SanitizedContent|null|string|undefined),
   *  items: (!Array<?>|null|undefined),
   *  selectable: (boolean|null|undefined),
   *  spritemap: (!goog.soy.data.SanitizedContent|null|string|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function $render(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
    var elementClasses = soy.asserts.assertType(opt_data.elementClasses == null || goog.isString(opt_data.elementClasses) || opt_data.elementClasses instanceof goog.soy.data.SanitizedContent, 'elementClasses', opt_data.elementClasses, '!goog.soy.data.SanitizedContent|null|string|undefined');
    /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
    var id = soy.asserts.assertType(opt_data.id == null || goog.isString(opt_data.id) || opt_data.id instanceof goog.soy.data.SanitizedContent, 'id', opt_data.id, '!goog.soy.data.SanitizedContent|null|string|undefined');
    /** @type {!Array<?>|null|undefined} */
    var items = soy.asserts.assertType(opt_data.items == null || goog.isArray(opt_data.items), 'items', opt_data.items, '!Array<?>|null|undefined');
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
    var spritemap = soy.asserts.assertType(opt_data.spritemap == null || goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|null|string|undefined');
    var attributes__soy11 = function attributes__soy11() {
      incrementalDom.attr('class', 'card-page' + (elementClasses ? ' ' + elementClasses : ''));
      if (id) {
        incrementalDom.attr('id', id);
      }
    };
    incrementalDom.elementOpenStart('ul');
    attributes__soy11();
    incrementalDom.elementOpenEnd();
    if (items && spritemap) {
      $items(opt_data, null, opt_ijData);
    }
    incrementalDom.elementClose('ul');
  }
  exports.render = $render;
  /**
   * @typedef {{
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  _handleItemToggled: (*|null|undefined),
   *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
   *  id: (!goog.soy.data.SanitizedContent|null|string|undefined),
   *  items: (!Array<?>|null|undefined),
   *  selectable: (boolean|null|undefined),
   *  spritemap: (!goog.soy.data.SanitizedContent|null|string|undefined)
   * }}
   */
  $render.Params;
  if (goog.DEBUG) {
    $render.soyTemplateName = 'ClayCardGrid.render';
  }

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function $item(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    incrementalDom.elementOpenStart('li');
    incrementalDom.attr('class', 'card-page-item card-page-item-directory');
    incrementalDom.elementOpenEnd();
    var variant__soy47 = '';
    var $tmp$$1 = null;
    if (schema.contentRenderer) {
      $tmp$$1 = schema.contentRenderer;
    } else if (schema && schema.fieldsMap && schema.fieldsMap.contentRenderer) {
      var $tmp = null;
      if (schema.contentRendererMap && item[schema.fieldsMap.contentRenderer] && schema.contentRendererMap[item[schema.fieldsMap.contentRenderer]]) {
        $tmp = schema.contentRendererMap[item[schema.fieldsMap.contentRenderer]];
      } else if (schema.contentRendererMap['*']) {
        $tmp = schema.contentRendererMap['*'];
      } else {
        $tmp = 'image';
      }
      $tmp$$1 = $tmp;
    } else {
      $tmp$$1 = 'image';
    }
    variant__soy47 += $tmp$$1;
    soy.$$getDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), variant__soy47, false)(opt_data, null, opt_ijData);
    incrementalDom.elementClose('li');
  }
  exports.item = $item;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  $item.Params;
  if (goog.DEBUG) {
    $item.soyTemplateName = 'ClayCardGrid.item';
  }

  /**
   * @param {{
   *  items: !Array<?>,
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function $items(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    /** @type {!Array<?>} */
    var items = soy.asserts.assertType(goog.isArray(opt_data.items), 'items', opt_data.items, '!Array<?>');
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    var item109List = items;
    var item109ListLen = item109List.length;
    for (var item109Index = 0; item109Index < item109ListLen; item109Index++) {
      var item109Data = item109List[item109Index];
      if (item109Data.items) {
        incrementalDom.elementOpenStart('li');
        incrementalDom.attr('class', 'card-page-item card-page-item-header');
        incrementalDom.elementOpenEnd();
        incrementalDom.elementOpenStart('p');
        incrementalDom.attr('class', 'card-section-header');
        incrementalDom.elementOpenEnd();
        soyIdom.print(item109Data.label);
        incrementalDom.elementClose('p');
        incrementalDom.elementClose('li');
        $items({ _handleItemToggled: _handleItemToggled, items: item109Data.items, schema: schema, selectable: selectable, spritemap: spritemap }, null, opt_ijData);
      } else {
        $item({ _handleItemToggled: _handleItemToggled, item: item109Data, schema: schema, selectable: selectable, spritemap: spritemap }, null, opt_ijData);
      }
    }
  }
  exports.items = $items;
  /**
   * @typedef {{
   *  items: !Array<?>,
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  $items.Params;
  if (goog.DEBUG) {
    $items.soyTemplateName = 'ClayCardGrid.items';
  }

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function __deltemplate_s112_7eb9136e(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
  }
  exports.__deltemplate_s112_7eb9136e = __deltemplate_s112_7eb9136e;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  __deltemplate_s112_7eb9136e.Params;
  if (goog.DEBUG) {
    __deltemplate_s112_7eb9136e.soyTemplateName = 'ClayCardGrid.__deltemplate_s112_7eb9136e';
  }
  soy.$$registerDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), '', 0, __deltemplate_s112_7eb9136e);

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function __deltemplate_s119_3c896c97(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    var $$temp;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    var icon__soy126 = '';
    var $tmp = null;
    if (schema.iconsMap) {
      $tmp = schema.fieldsMap && schema.fieldsMap.icon && item[schema.fieldsMap.icon] ? schema.iconsMap[item[schema.fieldsMap.icon]] : schema.iconsMap['*'];
    } else if (schema.fieldsMap && schema.fieldsMap.icon) {
      $tmp = item[schema.fieldsMap.icon];
    } else {
      $tmp = '';
    }
    icon__soy126 += $tmp;
    var $tmp$$2 = null;
    if (schema.inputName) {
      $tmp$$2 = schema.inputName;
    } else if (schema.inputNameField && schema.inputNamesMap) {
      var $tmp$$1 = null;
      if (schema.inputNamesMap[item[schema.inputNameField]]) {
        $tmp$$1 = schema.inputNamesMap[item[schema.inputNameField]];
      } else if (schema.inputNamesMap['*']) {
        $tmp$$1 = schema.inputNamesMap['*'];
      } else {
        $tmp$$1 = '';
      }
      $tmp$$2 = $tmp$$1;
    } else {
      $tmp$$2 = '';
    }
    $templateAlias1({ actionItems: item.actionItems, disabled: item.disabled, events: { itemToggled: _handleItemToggled }, href: item[schema.fieldsMap.href], icon: icon__soy126 != '' ? icon__soy126 : null, inputName: '' + $tmp$$2, inputValue: item[schema.inputValueField], labels: item[schema.fieldsMap.labels], labelStylesMap: schema.labelStylesMap, selectable: selectable, selected: item.selected, spritemap: spritemap, stickerClasses: schema.stickerClassesMap ? ($$temp = schema.stickerClassesMap[item[schema.fieldsMap.stickerClasses]]) == null ? schema.stickerClassesMap['*'] : $$temp : null, stickerIcons: schema.stickerIconsMap ? ($$temp = schema.stickerIconsMap[item[schema.fieldsMap.stickerIcon]]) == null ? schema.stickerIconsMap['*'] : $$temp : null, stickerImageAlt: schema.stickerImageAltsMap ? ($$temp = schema.stickerImageAltsMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerImageAltsMap['*'] : $$temp : null, stickerImageSrc: schema.stickerImageSrcsMap ? ($$temp = schema.stickerImageSrcsMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerImageSrcsMap['*'] : $$temp : null, stickerLabel: item[schema.fieldsMap.stickerLabel], stickerShape: schema.stickerShapesMap ? ($$temp = schema.stickerShapesMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerShapesMap['*'] : $$temp : null, stickerStyle: schema.stickerStylesMap ? ($$temp = schema.stickerStylesMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerStylesMap['*'] : $$temp : null, subtitle: item[schema.fieldsMap.description], title: item[schema.fieldsMap.title] }, null, opt_ijData);
  }
  exports.__deltemplate_s119_3c896c97 = __deltemplate_s119_3c896c97;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  __deltemplate_s119_3c896c97.Params;
  if (goog.DEBUG) {
    __deltemplate_s119_3c896c97.soyTemplateName = 'ClayCardGrid.__deltemplate_s119_3c896c97';
  }
  soy.$$registerDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), 'file', 0, __deltemplate_s119_3c896c97);

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function __deltemplate_s189_953e9510(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    var icon__soy196 = '';
    var $tmp = null;
    if (schema.iconsMap) {
      $tmp = schema.fieldsMap && schema.fieldsMap.icon && item[schema.fieldsMap.icon] ? schema.iconsMap[item[schema.fieldsMap.icon]] : schema.iconsMap['*'];
    } else if (schema.fieldsMap && schema.fieldsMap.icon) {
      $tmp = item[schema.fieldsMap.icon];
    } else {
      $tmp = '';
    }
    icon__soy196 += $tmp;
    var $tmp$$2 = null;
    if (schema.inputName) {
      $tmp$$2 = schema.inputName;
    } else if (schema.inputNameField && schema.inputNamesMap) {
      var $tmp$$1 = null;
      if (schema.inputNamesMap[item[schema.inputNameField]]) {
        $tmp$$1 = schema.inputNamesMap[item[schema.inputNameField]];
      } else if (schema.inputNamesMap['*']) {
        $tmp$$1 = schema.inputNamesMap['*'];
      } else {
        $tmp$$1 = '';
      }
      $tmp$$2 = $tmp$$1;
    } else {
      $tmp$$2 = '';
    }
    $templateAlias2({ actionItems: item.actionItems, disabled: item.disabled, events: { itemToggled: _handleItemToggled }, href: item[schema.fieldsMap.href], icon: icon__soy196 != '' ? icon__soy196 : null, inputName: '' + $tmp$$2, inputValue: item[schema.inputValueField], selectable: selectable, selected: item.selected, spritemap: spritemap, title: item[schema.fieldsMap.title] }, null, opt_ijData);
  }
  exports.__deltemplate_s189_953e9510 = __deltemplate_s189_953e9510;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  __deltemplate_s189_953e9510.Params;
  if (goog.DEBUG) {
    __deltemplate_s189_953e9510.soyTemplateName = 'ClayCardGrid.__deltemplate_s189_953e9510';
  }
  soy.$$registerDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), 'horizontal', 0, __deltemplate_s189_953e9510);

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function __deltemplate_s249_79889b69(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    var $$temp;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    var icon__soy256 = '';
    var $tmp = null;
    if (schema.iconsMap) {
      $tmp = schema.fieldsMap && schema.fieldsMap.icon && item[schema.fieldsMap.icon] ? schema.iconsMap[item[schema.fieldsMap.icon]] : schema.iconsMap['*'];
    } else if (schema.fieldsMap && schema.fieldsMap.icon) {
      $tmp = item[schema.fieldsMap.icon];
    } else {
      $tmp = '';
    }
    icon__soy256 += $tmp;
    var $tmp$$2 = null;
    if (schema.inputName) {
      $tmp$$2 = schema.inputName;
    } else if (schema.inputNameField && schema.inputNamesMap) {
      var $tmp$$1 = null;
      if (schema.inputNamesMap[item[schema.inputNameField]]) {
        $tmp$$1 = schema.inputNamesMap[item[schema.inputNameField]];
      } else if (schema.inputNamesMap['*']) {
        $tmp$$1 = schema.inputNamesMap['*'];
      } else {
        $tmp$$1 = '';
      }
      $tmp$$2 = $tmp$$1;
    } else {
      $tmp$$2 = '';
    }
    $templateAlias3({ actionItems: item.actionItems, disabled: item.disabled, events: { itemToggled: _handleItemToggled }, href: item[schema.fieldsMap.href], icon: icon__soy256 != '' ? icon__soy256 : null, imageAlt: item[schema.fieldsMap.imageAlt], imageSrc: item[schema.fieldsMap.imageSrc], inputName: '' + $tmp$$2, inputValue: item[schema.inputValueField], labels: item[schema.fieldsMap.labels], labelStylesMap: schema.labelStylesMap, selectable: selectable, selected: item.selected, spritemap: spritemap, stickerClasses: schema.stickerClassesMap ? ($$temp = schema.stickerClassesMap[item[schema.fieldsMap.stickerClasses]]) == null ? schema.stickerClassesMap['*'] : $$temp : null, stickerIcons: schema.stickerIconsMap ? ($$temp = schema.stickerIconsMap[item[schema.fieldsMap.stickerIcon]]) == null ? schema.stickerIconsMap['*'] : $$temp : null, stickerImageAlt: schema.stickerImageAltsMap ? ($$temp = schema.stickerImageAltsMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerImageAltsMap['*'] : $$temp : null, stickerImageSrc: schema.stickerImageSrcsMap ? ($$temp = schema.stickerImageSrcsMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerImageSrcsMap['*'] : $$temp : null, stickerLabel: item[schema.fieldsMap.stickerLabel], stickerShape: schema.stickerShapesMap ? ($$temp = schema.stickerShapesMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerShapesMap['*'] : $$temp : null, stickerStyle: schema.stickerStylesMap ? ($$temp = schema.stickerStylesMap[item[schema.fieldsMap.stickerLabel]]) == null ? schema.stickerStylesMap['*'] : $$temp : null, subtitle: item[schema.fieldsMap.description], title: item[schema.fieldsMap.title] }, null, opt_ijData);
  }
  exports.__deltemplate_s249_79889b69 = __deltemplate_s249_79889b69;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  __deltemplate_s249_79889b69.Params;
  if (goog.DEBUG) {
    __deltemplate_s249_79889b69.soyTemplateName = 'ClayCardGrid.__deltemplate_s249_79889b69';
  }
  soy.$$registerDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), 'image', 0, __deltemplate_s249_79889b69);

  /**
   * @param {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }} opt_data
   * @param {Object<string, *>=} opt_ijData
   * @param {Object<string, *>=} opt_ijData_deprecated
   * @return {void}
   * @suppress {checkTypes}
   */
  function __deltemplate_s321_908d86c7(opt_data, opt_ijData, opt_ijData_deprecated) {
    opt_ijData = opt_ijData_deprecated || opt_ijData;
    var $$temp;
    /** @type {?} */
    var item = opt_data.item;
    /** @type {{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}} */
    var schema = soy.asserts.assertType(goog.isObject(opt_data.schema), 'schema', opt_data.schema, '{contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)}');
    /** @type {!goog.soy.data.SanitizedContent|string} */
    var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
    /** @type {*|null|undefined} */
    var _handleItemToggled = opt_data._handleItemToggled;
    /** @type {boolean|null|undefined} */
    var selectable = soy.asserts.assertType(opt_data.selectable == null || goog.isBoolean(opt_data.selectable) || opt_data.selectable === 1 || opt_data.selectable === 0, 'selectable', opt_data.selectable, 'boolean|null|undefined');
    var $tmp$$1 = null;
    if (schema.inputName) {
      $tmp$$1 = schema.inputName;
    } else if (schema.inputNameField && schema.inputNamesMap) {
      var $tmp = null;
      if (schema.inputNamesMap[item[schema.inputNameField]]) {
        $tmp = schema.inputNamesMap[item[schema.inputNameField]];
      } else if (schema.inputNamesMap['*']) {
        $tmp = schema.inputNamesMap['*'];
      } else {
        $tmp = '';
      }
      $tmp$$1 = $tmp;
    } else {
      $tmp$$1 = '';
    }
    $templateAlias4({ actionItems: item.actionItems, disabled: item.disabled, events: { itemToggled: _handleItemToggled }, href: item[schema.fieldsMap.href], imageAlt: item[schema.fieldsMap.imageAlt], imageSrc: item[schema.fieldsMap.imageSrc], inputName: '' + $tmp$$1, inputValue: item[schema.inputValueField], name: item[schema.fieldsMap.username], selectable: selectable, selected: item.selected, spritemap: spritemap, subtitle: item[schema.fieldsMap.description], userColorClass: schema.userColorsMap ? ($$temp = schema.userColorsMap[item[schema.fieldsMap.userColor]]) == null ? schema.userColorsMap['*'] : $$temp : item[schema.fieldsMap.userColor] }, null, opt_ijData);
  }
  exports.__deltemplate_s321_908d86c7 = __deltemplate_s321_908d86c7;
  /**
   * @typedef {{
   *  item: (?),
   *  schema: {contentRenderer: (!goog.soy.data.SanitizedContent|string), contentRendererMap: (?), fieldName: (!goog.soy.data.SanitizedContent|string), fieldsMap: (?), iconsMap: (?), inputName: (!goog.soy.data.SanitizedContent|string), inputNameField: (!goog.soy.data.SanitizedContent|string), inputNamesMap: (?), inputValueField: (!goog.soy.data.SanitizedContent|string), labelStylesMap: (?), stickerClassesMap: (?), stickerIconsMap: (?), stickerImageAltsMap: (?), stickerImageSrcsMap: (?), stickerShapesMap: (?), stickerStylesMap: (?), userColorsMap: (?)},
   *  spritemap: (!goog.soy.data.SanitizedContent|string),
   *  _handleItemToggled: (*|null|undefined),
   *  selectable: (boolean|null|undefined)
   * }}
   */
  __deltemplate_s321_908d86c7.Params;
  if (goog.DEBUG) {
    __deltemplate_s321_908d86c7.soyTemplateName = 'ClayCardGrid.__deltemplate_s321_908d86c7';
  }
  soy.$$registerDelegateFn(soy.$$getDelTemplateId('ClayCardGrid.Card.idom'), 'user', 0, __deltemplate_s321_908d86c7);

  exports.render.params = ["schema", "_handleItemToggled", "elementClasses", "id", "items", "selectable", "spritemap"];
  exports.render.types = { "schema": "[\n\t\tcontentRenderer: string,\n\t\tcontentRendererMap: ?,\n\t\tfieldName: string,\n\t\tfieldsMap: ?,\n\t\ticonsMap: ?,\n\t\tinputName: string,\n\t\tinputNameField: string,\n\t\tinputNamesMap: ?,\n\t\tinputValueField: string,\n\t\tlabelStylesMap: ?,\n\t\tstickerClassesMap: ?,\n\t\tstickerIconsMap: ?,\n\t\tstickerImageAltsMap: ?,\n\t\tstickerImageSrcsMap: ?,\n\t\tstickerShapesMap: ?,\n\t\tstickerStylesMap: ?,\n\t\tuserColorsMap: ?\n\t]", "_handleItemToggled": "any", "elementClasses": "string", "id": "string", "items": "list<?>", "selectable": "bool", "spritemap": "string" };
  exports.item.params = ["item", "schema", "spritemap", "_handleItemToggled", "selectable"];
  exports.item.types = { "item": "?", "schema": "[\n\t\tcontentRenderer: string,\n\t\tcontentRendererMap: ?,\n\t\tfieldName: string,\n\t\tfieldsMap: ?,\n\t\ticonsMap: ?,\n\t\tinputName: string,\n\t\tinputNameField: string,\n\t\tinputNamesMap: ?,\n\t\tinputValueField: string,\n\t\tlabelStylesMap: ?,\n\t\tstickerClassesMap: ?,\n\t\tstickerIconsMap: ?,\n\t\tstickerImageAltsMap: ?,\n\t\tstickerImageSrcsMap: ?,\n\t\tstickerShapesMap: ?,\n\t\tstickerStylesMap: ?,\n\t\tuserColorsMap: ?\n\t]", "spritemap": "string", "_handleItemToggled": "any", "selectable": "bool" };
  exports.items.params = ["items", "schema", "spritemap", "_handleItemToggled", "selectable"];
  exports.items.types = { "items": "list<?>", "schema": "[\n\t\tcontentRenderer: string,\n\t\tcontentRendererMap: ?,\n\t\tfieldName: string,\n\t\tfieldsMap: ?,\n\t\ticonsMap: ?,\n\t\tinputName: string,\n\t\tinputNameField: string,\n\t\tinputNamesMap: ?,\n\t\tinputValueField: string,\n\t\tlabelStylesMap: ?,\n\t\tstickerClassesMap: ?,\n\t\tstickerIconsMap: ?,\n\t\tstickerImageAltsMap: ?,\n\t\tstickerImageSrcsMap: ?,\n\t\tstickerShapesMap: ?,\n\t\tstickerStylesMap: ?,\n\t\tuserColorsMap: ?\n\t]", "spritemap": "string", "_handleItemToggled": "any", "selectable": "bool" };
  exports.templates = templates = exports;
  return exports;
});

var ClayCardGrid = function (_Component) {
  _inherits(ClayCardGrid, _Component);

  function ClayCardGrid() {
    _classCallCheck(this, ClayCardGrid);

    return _possibleConstructorReturn(this, (ClayCardGrid.__proto__ || Object.getPrototypeOf(ClayCardGrid)).apply(this, arguments));
  }

  return ClayCardGrid;
}(_metalComponent2.default);

_metalSoy2.default.register(ClayCardGrid, templates);
exports.ClayCardGrid = ClayCardGrid;
exports.templates = templates;
exports.default = templates;
/* jshint ignore:end */
//# sourceMappingURL=ClayCardGrid.soy.js.map