{"version":3,"sources":["../src/ClayFilterLabel.js"],"names":["ClayFilterLabel","event","emit","name","originalEvent","ClayComponent","STATE","closeable","Config","bool","value","data","object","filterData","elementClasses","string","label","any","required","spritemap","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,e;;;;;;;;;;;;AACL;;;;;;iDAM+BC,K,EAAO;AACrC,UAAO,CAAC,KAAKC,IAAL,CAAU;AACjBC,UAAM,yBADW;AAEjBC,mBAAeH;AAFE,IAAV,CAAR;AAIA;;;;EAZ4BI,uB;;AAe9B;;;;;;;AAKAL,gBAAgBM,KAAhB,GAAwB;AACvB;;;;;;;AAOAC,YAAWC,mBAAOC,IAAP,GAAcC,KAAd,CAAoB,KAApB,CARY;;AAUvB;;;;;;;AAOAC,OAAMH,mBAAOI,MAAP,EAjBiB;;AAmBvB;;;;;;;AAOAC,aAAYL,mBAAOI,MAAP,EA1BW;;AA4BvB;;;;;;;AAOAE,iBAAgBN,mBAAOO,MAAP,EAnCO;;AAqCvB;;;;;;;AAOAC,QAAOR,mBAAOS,GAAP,GAAaC,QAAb,EA5CgB;;AA8CvB;;;;;;;AAOAC,YAAWX,mBAAOO,MAAP,GAAgBG,QAAhB;AArDY,CAAxB;;AAwDAE,mBAAIC,QAAJ,CAAarB,eAAb,EAA8BsB,4BAA9B;;QAEQtB,e,GAAAA,e;kBACOA,e","file":"ClayFilterLabel.js","sourcesContent":["import 'clay-label';\nimport {Config} from 'metal-state';\nimport ClayComponent from 'clay-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayFilterLabel.soy.js';\n\n/**\n * Metal ClayFilterLabel component.\n * @extends ClayComponent\n */\nclass ClayFilterLabel extends ClayComponent {\n\t/**\n\t * Continues the propagation of the filter label close clicked event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleFilterLabelCloseClicked(event) {\n\t\treturn !this.emit({\n\t\t\tname: 'filterLabelCloseClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayFilterLabel.STATE = {\n\t/**\n\t * Flag to indicate if the label is closeable.\n\t * @default false\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?bool}\n\t */\n\tcloseable: Config.bool().value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Data to add pass to label component.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?object}\n\t */\n\tfilterData: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * The label of the badge element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any().required(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLabel\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string().required(),\n};\n\nSoy.register(ClayFilterLabel, templates);\n\nexport {ClayFilterLabel};\nexport default ClayFilterLabel;\n"]}