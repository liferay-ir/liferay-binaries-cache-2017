{"version":3,"sources":["../src/pkg-desc.js"],"names":["PkgDesc","name","version","dir","forceRoot","_name","_version","_id","ROOT_ID","clone","isRoot","id","Error"],"mappings":";;;;;;;;;;AAAA;;;;;;AAMA;;;;IAIqBA,O;AACpB;;;;;;;AAOA,kBAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAmD;AAAA,MAAnBC,SAAmB,uEAAP,KAAO;;AAAA;;AAClD,OAAKC,KAAL,GAAaJ,IAAb;AACA,OAAKK,QAAL,GAAgBJ,OAAhB;;AAEA,MAAI,CAACC,GAAD,IAAQC,SAAZ,EAAuB;AACtB,QAAKD,GAAL,GAAWA,MAAMA,GAAN,GAAY,GAAvB;AACA,QAAKI,GAAL,GAAWP,QAAQQ,OAAnB;AACA,GAHD,MAGO;AACN,QAAKL,GAAL,GAAWA,GAAX;AACA,QAAKI,GAAL,GAAcN,IAAd,SAAsBC,OAAtB;AACA;AACD;;AAED;;;;;;;;0BAIkB;AAAA,kFAAJ,EAAI;AAAA,OAAXC,GAAW,QAAXA,GAAW;;AACjB,OAAMM,QAAQ,IAAIT,OAAJ,CACb,KAAKC,IADQ,EAEb,KAAKC,OAFQ,EAGb,KAAKC,GAHQ,EAIb,KAAKO,MAJQ,CAAd;;AAOA,OAAIP,GAAJ,EAAS;AACRM,UAAMN,GAAN,GAAYA,GAAZ;AACA;;AAED,UAAOM,KAAP;AACA;;AAED;;;;sBACS;AACR,UAAO,KAAKF,GAAZ;AACA;;AAED;;oBACOI,E,EAAI;AACV,SAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACA;;AAED;;;;sBACW;AACV,UAAO,KAAKP,KAAZ;AACA;;AAED;;oBACSJ,I,EAAM;AACd,SAAM,IAAIW,KAAJ,CAAU,6BAAV,CAAN;AACA;;AAED;;;;sBACc;AACb,UAAO,KAAKN,QAAZ;AACA;;AAED;;oBACYJ,O,EAAS;AACpB,SAAM,IAAIU,KAAJ,CAAU,gCAAV,CAAN;AACA;;AAED;;;;;;;sBAIa;AACZ,UAAO,KAAKD,EAAL,IAAWX,QAAQQ,OAA1B;AACA;;;;;;kBA5EmBR,O;;;AA+ErBA,QAAQQ,OAAR,GAAkB,GAAlB","file":"pkg-desc.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * A package descriptor class to identify directories containing packages.\n * @type {PkgDesc}\n */\nexport default class PkgDesc {\n\t/**\n\t * Constructor\n\t * @param {String} name name of package\n\t * @param {String} version version number\n\t * @param {String} dir directory where package lives (or null if it is the root package)\n\t * @param {Boolean} forceRoot create a root package even if dir is not null\n\t */\n\tconstructor(name, version, dir, forceRoot = false) {\n\t\tthis._name = name;\n\t\tthis._version = version;\n\n\t\tif (!dir || forceRoot) {\n\t\t\tthis.dir = dir ? dir : '.';\n\t\t\tthis._id = PkgDesc.ROOT_ID;\n\t\t} else {\n\t\t\tthis.dir = dir;\n\t\t\tthis._id = `${name}@${version}`;\n\t\t}\n\t}\n\n\t/**\n\t * Clone this object and optionally modify some of its fields.\n\t * @return {PkgDesc} a clone of this (perhaps modified) package descriptor\n\t */\n\tclone({dir} = {}) {\n\t\tconst clone = new PkgDesc(\n\t\t\tthis.name,\n\t\t\tthis.version,\n\t\t\tthis.dir,\n\t\t\tthis.isRoot\n\t\t);\n\n\t\tif (dir) {\n\t\t\tclone.dir = dir;\n\t\t}\n\n\t\treturn clone;\n\t}\n\n\t/** eslint require-js-doc off */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t// eslint-disable-next-line require-jsdoc\n\tset id(id) {\n\t\tthrow new Error('Package ids are read-only');\n\t}\n\n\t// eslint-disable-next-line require-jsdoc\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t// eslint-disable-next-line require-jsdoc\n\tset name(name) {\n\t\tthrow new Error('Package names are read-only');\n\t}\n\n\t// eslint-disable-next-line require-jsdoc\n\tget version() {\n\t\treturn this._version;\n\t}\n\n\t// eslint-disable-next-line require-jsdoc\n\tset version(version) {\n\t\tthrow new Error('Package versions are read-only');\n\t}\n\n\t/**\n\t * Test if package is the root package.\n\t * @return {Boolean} true if this is the root package\n\t */\n\tget isRoot() {\n\t\treturn this.id == PkgDesc.ROOT_ID;\n\t}\n}\n\nPkgDesc.ROOT_ID = '/';\n"]}