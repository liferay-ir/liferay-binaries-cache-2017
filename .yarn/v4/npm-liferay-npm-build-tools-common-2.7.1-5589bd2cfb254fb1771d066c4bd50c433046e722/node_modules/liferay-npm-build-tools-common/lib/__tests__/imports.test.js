'use strict';

var _imports = require('../imports');

describe('normalizeImportsConfig()', function () {
	it('works for empty string format normalization', function () {
		var imports = (0, _imports.normalizeImportsConfig)({
			provider1: {
				dep1: '^1.0.0',
				dep2: '^2.0.0'
			},
			provider2: {
				dep9: '^9.0.0',
				dep8: '^8.0.0'
			},
			'': {
				depA: '3.0.0'
			},
			depB: {
				'/': '4.0.0',
				depC: '5.0.0'
			}
		});

		expect(imports).toMatchSnapshot();
	});

	it('works for slash format normalization', function () {
		var imports = (0, _imports.normalizeImportsConfig)({
			provider1: {
				dep1: '^1.0.0',
				dep2: '^2.0.0'
			},
			provider2: {
				dep9: '^9.0.0',
				dep8: '^8.0.0'
			},
			'': {
				depA: '3.0.0'
			},
			depB: {
				'/': '4.0.0',
				depC: '5.0.0'
			}
		}, true);

		expect(imports).toMatchSnapshot();
	});
}); /**
     * Â© 2017 Liferay, Inc. <https://liferay.com>
     *
     * SPDX-License-Identifier: LGPL-3.0-or-later
     */

it('unrollImportsConfig works', function () {
	var imports = (0, _imports.unrollImportsConfig)({
		provider1: {
			dep1: '^1.0.0',
			dep2: '^2.0.0'
		},
		provider2: {
			dep9: '^9.0.0',
			dep8: '^8.0.0'
		}
	});

	expect(imports['dep1']).toMatchObject({
		name: 'provider1',
		version: '^1.0.0'
	});
	expect(imports['dep2']).toMatchObject({
		name: 'provider1',
		version: '^2.0.0'
	});
	expect(imports['dep9']).toMatchObject({
		name: 'provider2',
		version: '^9.0.0'
	});
	expect(imports['dep8']).toMatchObject({
		name: 'provider2',
		version: '^8.0.0'
	});
});

it('unrollImportsConfig throws for duplicated definitions', function () {
	expect(function () {
		return (0, _imports.unrollImportsConfig)({
			provider1: {
				dep1: '^1.0.0'
			},
			provider2: {
				dep1: '^1.0.0'
			}
		});
	}).toThrow();
});

describe('unrollImportsConfig handles null namespaces correctly', function () {
	it('when described the canonical way', function () {
		var imports = (0, _imports.unrollImportsConfig)({
			'': {
				dep: '^1.0.0'
			}
		});

		expect(imports['dep']).toMatchObject({ name: '', version: '^1.0.0' });
	});

	it('when described the sweet way', function () {
		var imports = (0, _imports.unrollImportsConfig)({
			dep: {
				'/': '^1.0.0'
			}
		});

		expect(imports['dep']).toMatchObject({ name: '', version: '^1.0.0' });
	});
});
//# sourceMappingURL=imports.test.js.map