{"version":3,"sources":["../../src/__tests__/babel-ipc.test.js"],"names":["babelIpc","filePath","__filename","state","file","opts","filenameRelative","beforeEach","clear","expect","get","toBeUndefined","it","value","set","toBe","factory"],"mappings":";;AAMA;;IAAYA,Q;;;;AAEZ,IAAMC,WAAWC,UAAjB,C,CARA;;;;;;AASA,IAAMC,QAAQ;AACbC,OAAM;AACLC,QAAM;AACLC,qBAAkBL;AADb;AADD;AADO,CAAd;;AAQAM,WAAW,YAAM;AAChBP,UAASQ,KAAT,CAAeP,QAAf;AACAQ,QAAOT,SAASU,GAAT,CAAaP,KAAb,CAAP,EAA4BQ,aAA5B;AACA,CAHD;;AAKAC,GAAG,eAAH,EAAoB,YAAM;AACzB,KAAMC,QAAQ,wBAAd;;AAEAb,UAASc,GAAT,CAAab,QAAb,EAAuBY,KAAvB;;AAEAJ,QAAOT,SAASU,GAAT,CAAaP,KAAb,CAAP,EAA4BY,IAA5B,CAAiCF,KAAjC;AACA,CAND;;AAQAD,GAAG,8BAAH,EAAmC,YAAM;AACxC,KAAMC,QAAQ,wBAAd;;AAEAJ,QAAOT,SAASU,GAAT,CAAaP,KAAb,EAAoBU,KAApB,CAAP,EAAmCE,IAAnC,CAAwCF,KAAxC;AACA,CAJD;;AAMAD,GAAG,sCAAH,EAA2C,YAAM;AAChD,KAAMC,QAAQ,wBAAd;AACA,KAAMG,UAAU,SAAVA,OAAU;AAAA,SAAM,wBAAN;AAAA,EAAhB;;AAEAP,QAAOT,SAASU,GAAT,CAAaP,KAAb,EAAoBa,OAApB,CAAP,EAAqCD,IAArC,CAA0CF,KAA1C;AACA,CALD;;AAOAD,GAAG,aAAH,EAAkB,YAAM;AACvB,KAAMC,QAAQ,sBAAd;;AAEAb,UAASc,GAAT,CAAab,QAAb,EAAuBY,KAAvB;;AAEAJ,QAAOT,SAASU,GAAT,CAAaP,KAAb,CAAP,EAA4BY,IAA5B,CAAiCF,KAAjC;;AAEAb,UAASQ,KAAT,CAAeP,QAAf;;AAEAQ,QAAOT,SAASU,GAAT,CAAaP,KAAb,CAAP,EAA4BQ,aAA5B;AACA,CAVD","file":"babel-ipc.test.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as babelIpc from '../babel-ipc';\n\nconst filePath = __filename;\nconst state = {\n\tfile: {\n\t\topts: {\n\t\t\tfilenameRelative: filePath,\n\t\t},\n\t},\n};\n\nbeforeEach(() => {\n\tbabelIpc.clear(filePath);\n\texpect(babelIpc.get(state)).toBeUndefined();\n});\n\nit('set/get works', () => {\n\tconst value = 'value-for-set/get-test';\n\n\tbabelIpc.set(filePath, value);\n\n\texpect(babelIpc.get(state)).toBe(value);\n});\n\nit('get with default value works', () => {\n\tconst value = 'value-for-default-test';\n\n\texpect(babelIpc.get(state, value)).toBe(value);\n});\n\nit('get with default value factory works', () => {\n\tconst value = 'value-for-factory-test';\n\tconst factory = () => 'value-for-factory-test';\n\n\texpect(babelIpc.get(state, factory)).toBe(value);\n});\n\nit('clear works', () => {\n\tconst value = 'value-for-clear-test';\n\n\tbabelIpc.set(filePath, value);\n\n\texpect(babelIpc.get(state)).toBe(value);\n\n\tbabelIpc.clear(filePath);\n\n\texpect(babelIpc.get(state)).toBeUndefined();\n});\n"]}