'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _packages = require('../packages');

var pkgs = _interopRequireWildcard(_packages);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

describe('resolveModuleFile', function () {
	var pkgDir = _path2.default.join(__dirname, '__fixtures__', 'packages', 'a-package');

	it('works for file names with extension', function () {
		expect(pkgs.resolveModuleFile(pkgDir, 'no-package-json/index.js')).toBe('no-package-json/index.js');

		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json/index.js')).toBe('no-package-json/index.js');
	});

	it('works for file names without .js extension', function () {
		expect(pkgs.resolveModuleFile(pkgDir, 'no-package-json/index')).toBe('no-package-json/index.js');

		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json/index')).toBe('no-package-json/index.js');
	});

	it('works for existing modules with .js on their name', function () {
		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json/file.js')).toBe('no-package-json/file.js.js');
	});

	it('works for non-existent modules', function () {
		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json/non-existent-module')).toBe('no-package-json/non-existent-module.js');

		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json/non-existent-module.js')).toBe('no-package-json/non-existent-module.js');
	});

	it('works for directories without package.json file', function () {
		expect(pkgs.resolveModuleFile(pkgDir, 'no-package-json')).toBe('no-package-json/index.js');

		expect(pkgs.resolveModuleFile(pkgDir, './no-package-json')).toBe('no-package-json/index.js');
	});

	it('works for directories with a package.json file', function () {
		expect(pkgs.resolveModuleFile(pkgDir, 'with-package-json/no-dot/no-extension')).toBe('with-package-json/no-dot/no-extension/file.js');

		expect(pkgs.resolveModuleFile(pkgDir, 'with-package-json/no-dot/with-extension')).toBe('with-package-json/no-dot/with-extension/file.js');

		expect(pkgs.resolveModuleFile(pkgDir, 'with-package-json/with-dot/no-extension')).toBe('with-package-json/with-dot/no-extension/file.js');

		expect(pkgs.resolveModuleFile(pkgDir, 'with-package-json/with-dot/with-extension')).toBe('with-package-json/with-dot/with-extension/file.js');
	});
});
//# sourceMappingURL=packages.test.js.map