'use strict';

var _modules = require('../modules');

var mod = _interopRequireWildcard(_modules);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

it('isLocalModule() works', function () {
	expect(mod.isLocalModule('./a-module')).toBe(true);
	expect(mod.isLocalModule('../a-module')).toBe(true);
	expect(mod.isLocalModule('/a-module')).toBe(true);

	expect(mod.isLocalModule('a-module')).toBe(false);
}); /**
     * Â© 2017 Liferay, Inc. <https://liferay.com>
     *
     * SPDX-License-Identifier: LGPL-3.0-or-later
     */

it('isNodeCoreModule() works', function () {
	expect(mod.isNodeCoreModule('fs')).toBe(true);
	expect(mod.isNodeCoreModule('path')).toBe(true);
	expect(mod.isNodeCoreModule('process')).toBe(true);
	expect(mod.isNodeCoreModule('http')).toBe(true);

	expect(mod.isNodeCoreModule('./a-module')).toBe(false);
	expect(mod.isNodeCoreModule('../a-module')).toBe(false);
	expect(mod.isNodeCoreModule('/a-module')).toBe(false);
	expect(mod.isNodeCoreModule('a-module')).toBe(false);
});

it('isReservedDependency() works', function () {
	expect(mod.isReservedDependency('require')).toBe(true);
	expect(mod.isReservedDependency('module')).toBe(true);
	expect(mod.isReservedDependency('exports')).toBe(true);

	expect(mod.isReservedDependency('./a-module')).toBe(false);
	expect(mod.isReservedDependency('../a-module')).toBe(false);
	expect(mod.isReservedDependency('/a-module')).toBe(false);
	expect(mod.isReservedDependency('a-module')).toBe(false);
});

it('isExternalDependency() works', function () {
	expect(mod.isExternalDependency('a-module')).toBe(true);
	expect(mod.isExternalDependency('fs')).toBe(true);

	expect(mod.isExternalDependency('./a-module')).toBe(false);
	expect(mod.isExternalDependency('../a-module')).toBe(false);
	expect(mod.isExternalDependency('/a-module')).toBe(false);
});

it('joinModuleName() works', function () {
	expect(mod.joinModuleName('@a-scope', 'a-package', '/a-dir/a-module')).toBe('@a-scope/a-package/a-dir/a-module');
	expect(mod.joinModuleName('@a-scope', 'a-package')).toBe('@a-scope/a-package');
	expect(mod.joinModuleName(undefined, 'a-package', '/a-dir/a-module')).toBe('a-package/a-dir/a-module');
	expect(mod.joinModuleName(undefined, 'a-package')).toBe('a-package');
});

it('splitModuleName() works', function () {
	expect(mod.splitModuleName('@a-scope/a-package/a-dir/a-module')).toEqual({
		scope: '@a-scope',
		pkgName: 'a-package',
		modulePath: '/a-dir/a-module'
	});
	expect(mod.splitModuleName('@a-scope/a-package')).toEqual({
		scope: '@a-scope',
		pkgName: 'a-package'
	});
	expect(mod.splitModuleName('a-package/a-dir/a-module')).toEqual({
		pkgName: 'a-package',
		modulePath: '/a-dir/a-module'
	});
	expect(mod.splitModuleName('a-package')).toEqual({
		pkgName: 'a-package'
	});
});
//# sourceMappingURL=modules.test.js.map