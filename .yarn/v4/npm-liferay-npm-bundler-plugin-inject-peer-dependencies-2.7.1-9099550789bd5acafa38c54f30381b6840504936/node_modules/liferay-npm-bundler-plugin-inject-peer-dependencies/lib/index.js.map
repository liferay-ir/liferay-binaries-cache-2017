{"version":3,"sources":["../src/index.js"],"names":["config","log","pkg","rootPkgJson","source","pkgJson","defineCall","dependencies","injectedDeps","failedDeps","globby","sync","path","join","resolve","dir","forEach","code","fs","readFileSync","filePath","defineCallOffset","indexOf","funOffset","defineCallLine","Buffer","toString","length","substring","replace","removeModuleName","trim","deps","extractDependencies","processModuleDependencies","Object","keys","info","dep","warn","mod","ns","resolveDir","isExternalDependency","isNodeCoreModule","splitModuleName","pkgName","scope","scopedPkgName","joinModuleName","srcPkgName","removeNamespace","resolvedPkgJsonPath","basedir","resolvedPkgJson","version","err","line","inString","i","substr","indexOfClose","startsWith","split","map"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as fs from 'fs';\nimport * as globby from 'globby';\nimport * as mod from 'liferay-npm-build-tools-common/lib/modules';\nimport * as ns from 'liferay-npm-build-tools-common/lib/namespace';\nimport * as path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolve from 'resolve';\n\n/**\n * @return {void}\n */\nexport default function({config, log, pkg, rootPkgJson, source}, {pkgJson}) {\n\tconst defineCall = (config.defineCall || 'Liferay.Loader.define') + '(';\n\n\tpkgJson.dependencies = pkgJson.dependencies || {};\n\n\tconst injectedDeps = {};\n\tconst failedDeps = {};\n\n\tglobby\n\t\t.sync([path.join(path.resolve(pkg.dir), '**/*.js')])\n\t\t.forEach(filePath => {\n\t\t\tconst code = fs.readFileSync(filePath);\n\t\t\tconst defineCallOffset = code.indexOf(defineCall);\n\n\t\t\tif (defineCallOffset != -1) {\n\t\t\t\tconst funOffset = code.indexOf(')', defineCallOffset);\n\t\t\t\tlet defineCallLine;\n\n\t\t\t\tif (code instanceof Buffer) {\n\t\t\t\t\tdefineCallLine = code.toString(\n\t\t\t\t\t\t'utf8',\n\t\t\t\t\t\tdefineCallOffset + defineCall.length,\n\t\t\t\t\t\tfunOffset\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdefineCallLine = code.substring(\n\t\t\t\t\t\tdefineCallOffset + defineCall.length,\n\t\t\t\t\t\tfunOffset\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdefineCallLine = defineCallLine.replace(/\\n/g, ' ');\n\n\t\t\t\tdefineCallLine = removeModuleName(defineCallLine);\n\n\t\t\t\tdefineCallLine = defineCallLine.trim();\n\n\t\t\t\tconst deps = extractDependencies(defineCallLine);\n\n\t\t\t\tprocessModuleDependencies(\n\t\t\t\t\trootPkgJson,\n\t\t\t\t\tpkgJson,\n\t\t\t\t\tfilePath,\n\t\t\t\t\tdeps,\n\t\t\t\t\tsource.pkg.dir,\n\t\t\t\t\tinjectedDeps,\n\t\t\t\t\tfailedDeps\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\tObject.keys(injectedDeps).forEach(dep => {\n\t\tlog.info(\n\t\t\t'inject-peer-dependencies',\n\t\t\t'Injected dependency',\n\t\t\t`${dep}@${injectedDeps[dep]}`\n\t\t);\n\t});\n\n\tObject.keys(failedDeps).forEach(dep => {\n\t\tlog.warn(\n\t\t\t'inject-peer-dependencies',\n\t\t\t'Failed to resolve dependency',\n\t\t\tdep,\n\t\t\t'with error:',\n\t\t\tfailedDeps[dep]\n\t\t);\n\t});\n}\n\n/**\n * Process dependencies of a file.\n * @param {Object} rootPkgJson root project's package.json\n * @param {Object} pkgJson processed module's package.json\n * @param {String} filePath path to module file\n * @param {Array} deps array of dependencies as passed to define() call\n * @param {String} resolveDir path from where to resolve dependencies\n * @param {Object} injectedDeps a hash to fill with resolved dependencies\n * @param {Object} failedDeps a hash to fill with failed dependencies\n * @return {void}\n */\nfunction processModuleDependencies(\n\trootPkgJson,\n\tpkgJson,\n\tfilePath,\n\tdeps,\n\tresolveDir,\n\tinjectedDeps,\n\tfailedDeps\n) {\n\tdeps.forEach(dep => {\n\t\tif (!mod.isExternalDependency(dep) || mod.isNodeCoreModule(dep)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {pkgName, scope} = mod.splitModuleName(dep);\n\t\tconst scopedPkgName = mod.joinModuleName(scope, pkgName);\n\n\t\tif (!pkgJson.dependencies[scopedPkgName]) {\n\t\t\tconst srcPkgName = ns.removeNamespace(scopedPkgName);\n\n\t\t\ttry {\n\t\t\t\tconst resolvedPkgJsonPath = resolve.sync(\n\t\t\t\t\t`${srcPkgName}/package.json`,\n\t\t\t\t\t{\n\t\t\t\t\t\tbasedir: resolveDir,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tconst resolvedPkgJson = readJsonSync(resolvedPkgJsonPath);\n\n\t\t\t\tpkgJson.dependencies[scopedPkgName] = resolvedPkgJson.version;\n\n\t\t\t\tinjectedDeps[scopedPkgName] = resolvedPkgJson.version;\n\t\t\t} catch (err) {\n\t\t\t\tfailedDeps[dep] = err;\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Removes module name argument from a define call\n * @param  {String} line the line containing a define call\n * @return {String} the rest of the line without module name\n */\nfunction removeModuleName(line) {\n\tlet inString = false;\n\n\tfor (let i = 0; i < line.length; i++) {\n\t\tif (inString) {\n\t\t\tif (line[i] === inString) {\n\t\t\t\tinString = false;\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (line[i]) {\n\t\t\t\tcase \"'\":\n\t\t\t\tcase '\"':\n\t\t\t\t\tinString = line[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ',':\n\t\t\t\t\treturn line.substr(i + 1);\n\n\t\t\t\tdefault:\n\t\t\t\t// Keep scanning.\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Extracts dependencies argument from a define call\n * @param  {String} line the line containing a define call starting at the\n * \t\t\t\t\t\t\tdependencies argument\n * @return {Array} an array with\n */\nfunction extractDependencies(line) {\n\tconst indexOfClose = line.indexOf(']');\n\n\tif (!line.startsWith('[') || indexOfClose == -1) {\n\t\treturn [];\n\t}\n\n\treturn line\n\t\t.substring(1, indexOfClose)\n\t\t.split(',')\n\t\t.map(dep => dep.trim())\n\t\t.map(dep => dep.replace(/['\"]/g, ''));\n}\n"]}