'use strict';

var _manifest = require('../manifest');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _pkgDesc = require('liferay-npm-build-tools-common/lib/pkg-desc');

var _pkgDesc2 = _interopRequireDefault(_pkgDesc);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

it('addPackage/getPackage work', function () {
	var manifest = new _manifest.Manifest();

	var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', './src');
	var destPkg = new _pkgDesc2.default('a-package', '1.0.0', './dest');

	manifest.addPackage(srcPkg, destPkg);

	expect(manifest.getPackage(srcPkg)).toMatchSnapshot();
});

it('getPackage returns entries with relative paths', function () {
	var manifest = new _manifest.Manifest();

	var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', _path2.default.resolve('./src'));
	var destPkg = new _pkgDesc2.default('a-package', '1.0.0', _path2.default.resolve('./dest'));

	manifest.addPackage(srcPkg, destPkg);

	var entry = manifest.getPackage(srcPkg);

	expect(entry.src.dir).toBe('./src');
	expect(entry.dest.dir).toBe('./dest');
});

describe('save', function () {
	it('works', function () {
		var manifest = new _manifest.Manifest();

		var srcPkg1 = new _pkgDesc2.default('a-package', '1.0.0', './src-1');
		var destPkg1 = new _pkgDesc2.default('a-package', '1.0.0', './dest-1');

		var srcPkg2 = new _pkgDesc2.default('a-package', '2.0.0', './src-2');
		var destPkg2 = new _pkgDesc2.default('a-package', '2.0.0', './dest-2');

		manifest.addPackage(srcPkg1, destPkg1);
		manifest.addPackage(srcPkg2, destPkg2);

		var tmpDir = _fs2.default.mkdtempSync('manifest');
		var tmpFilePath = _path2.default.join(tmpDir, 'manifest.json');

		manifest.save(tmpFilePath);

		expect(_fs2.default.readFileSync(tmpFilePath).toString()).toMatchSnapshot();

		_fs2.default.unlinkSync(tmpFilePath);
		_fs2.default.rmdirSync(tmpDir);
	});

	it('throws if called with no path and no default file path is set', function () {
		var manifest = new _manifest.Manifest();

		expect(function () {
			return manifest.save();
		}).toThrow();
	});
});

it('constructor with file works', function () {
	var tmpDir = _fs2.default.mkdtempSync('manifest');
	var tmpFilePath = _path2.default.join(tmpDir, 'manifest.json');

	var manifest = new _manifest.Manifest(tmpFilePath);

	var srcPkg1 = new _pkgDesc2.default('a-package', '1.0.0', './src-1');
	var destPkg1 = new _pkgDesc2.default('a-package', '1.0.0', './dest-1');

	var srcPkg2 = new _pkgDesc2.default('a-package', '2.0.0', './src-2');
	var destPkg2 = new _pkgDesc2.default('a-package', '2.0.0', './dest-2');

	manifest.addPackage(srcPkg1, destPkg1);
	manifest.addPackage(srcPkg2, destPkg2);

	manifest.save();

	var manifest2 = new _manifest.Manifest(tmpFilePath);

	expect(manifest2.toJSON()).toMatchSnapshot();

	_fs2.default.unlinkSync(tmpFilePath);
	_fs2.default.rmdirSync(tmpDir);
});

describe('isOutdated', function () {
	it('returns false for up-to-date packages', function () {
		var manifest = new _manifest.Manifest();

		var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', './src');
		var destPkg = new _pkgDesc2.default('a-package', '1.0.0', '.');

		manifest.addPackage(srcPkg, destPkg);

		expect(manifest.isOutdated(srcPkg)).toBe(false);
	});

	// TODO: This test can be removed if we implement enhanced outdated detection by using timestamps/digests.
	// However, we are not sure that it is the bundler's responsibility to detect such modifications as it is
	// more a multi-tool build issue that may happen with other configurations.
	it('returns true for root package no matter what', function () {
		var manifest = new _manifest.Manifest();

		var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', './src', true);
		var destPkg = new _pkgDesc2.default('a-package', '1.0.0', '.', true);

		manifest.addPackage(srcPkg, destPkg);

		expect(manifest.isOutdated(srcPkg)).toBe(true);
	});

	it('returns true for unregistered packages', function () {
		var manifest = new _manifest.Manifest();

		var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', './src');

		expect(manifest.isOutdated(srcPkg)).toBe(true);
	});

	it('returns true for packages with missing destination directory', function () {
		var manifest = new _manifest.Manifest();

		var srcPkg = new _pkgDesc2.default('a-package', '1.0.0', './src');
		var destPkg = new _pkgDesc2.default('a-package', '1.0.0', './non-existing-dir');

		manifest.addPackage(srcPkg, destPkg);

		expect(manifest.isOutdated(srcPkg)).toBe(true);
	});
});
//# sourceMappingURL=manifest.test.js.map