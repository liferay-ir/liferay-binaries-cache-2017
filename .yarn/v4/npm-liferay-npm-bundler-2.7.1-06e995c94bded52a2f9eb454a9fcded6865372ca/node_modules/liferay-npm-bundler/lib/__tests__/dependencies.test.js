'use strict';

var _pkgDesc = require('liferay-npm-build-tools-common/lib/pkg-desc');

var _pkgDesc2 = _interopRequireDefault(_pkgDesc);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _dependencies = require('../dependencies');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

expect.extend({
	toMatchDependencies: function toMatchDependencies(deps) {
		for (var _len = arguments.length, pkgIds = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			pkgIds[_key - 1] = arguments[_key];
		}

		var missingDeps = [];
		var extraDeps = [];
		var invalidDepFields = {};

		pkgIds.forEach(function (pkgId) {
			var dep = deps[pkgId];

			if (!dep) {
				missingDeps.push(pkgId);
			} else {
				var pkgName = void 0;
				var pkgVersion = void 0;

				if (pkgId === _pkgDesc2.default.ROOT_ID) {
					pkgName = 'test-project';
					pkgVersion = '1.0.0';
				} else {
					var pkgIdParts = pkgId.split('@');
					pkgName = pkgIdParts[0];
					pkgVersion = pkgIdParts[1];
				}

				var invalidFields = invalidDepFields[pkgId] || {};

				if (dep.id != pkgId) {
					invalidFields.id = dep.id + ' (expected: ' + pkgId + ')';
				}

				if (dep.name != pkgName) {
					invalidFields.name = dep.name + ' (expected: ' + pkgName + ')';
				}

				if (dep.version != pkgVersion) {
					invalidFields.version = dep.version + ' ' + ('(expected: ' + pkgVersion + ')');
				}

				var expectedDepDir = pkgId === _pkgDesc2.default.ROOT_ID ? _path2.default.normalize('.') : _path2.default.normalize('/node_modules/' + pkgName);

				if (dep.dir !== '.' && !dep.dir.endsWith(expectedDepDir)) {
					invalidFields.dir = dep.dir + ' ' + ('(expected: ' + expectedDepDir + ')');
				}

				if (Object.keys(invalidFields).length > 0) {
					invalidDepFields[pkgId] = invalidFields;
				}
			}
		});

		Object.keys(deps).forEach(function (depId) {
			if (pkgIds.indexOf(depId) == -1) {
				extraDeps.push(depId);
			}
		});

		var pass = true;
		var message = '';

		if (missingDeps.length > 0) {
			message += '\nRequired dependencies missing: ' + missingDeps + '\n';
			pass = false;
		}

		if (extraDeps.length > 0) {
			message += '\nNot required dependencies found: ' + extraDeps + '\n';
			pass = false;
		}

		if (Object.keys(invalidDepFields).length > 0) {
			message += '\nInvalid dependency fields: ' + JSON.stringify(invalidDepFields, '', 2) + '\n';
			pass = false;
		}

		return {
			message: message,
			pass: pass
		};
	}
}); /**
     * Â© 2017 Liferay, Inc. <https://liferay.com>
     *
     * SPDX-License-Identifier: LGPL-3.0-or-later
     */

var savedCwd = process.cwd();

beforeAll(function () {
	process.chdir(_path2.default.join(__dirname, '__fixtures__', 'project'));
});

afterAll(function () {
	process.chdir(savedCwd);
});

it('loads project dependencies correctly', function () {
	var deps = (0, _dependencies.addPackageDependencies)({}, '.');

	expect(deps).toMatchDependencies(_pkgDesc2.default.ROOT_ID, 'test-project-dep-0@1.0.0', 'test-project-dep-1@1.0.0', 'test-project-dep-0@0.1.0');
});

it('appends extra dependencies correctly', function () {
	var deps = (0, _dependencies.addPackageDependencies)({}, '.', ['stale-package']);

	expect(deps).toMatchDependencies('stale-package@1.0.0', _pkgDesc2.default.ROOT_ID, 'test-project-dep-0@1.0.0', 'test-project-dep-1@1.0.0', 'test-project-dep-0@0.1.0');
});
//# sourceMappingURL=dependencies.test.js.map