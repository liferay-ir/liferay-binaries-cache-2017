{"version":3,"sources":["../src/dependencies.js"],"names":["getRootPkg","addPackageDependencies","pkgJson","join","rootPkg","name","version","collectedDependencies","basedir","extraDependencies","packageJson","pkg","id","dependencies","Object","keys","concat","dependencyDirs","map","resolveDependencyDir","dependency","filter","dependencyDir","forEach","packageDir","pkgJsonFile","sync","dirname","err","optionalDependencies","warn"],"mappings":";;;;;QAoBgBA,U,GAAAA,U;QAcAC,sB,GAAAA,sB;;AA5BhB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMC,UAAU,4BAAa,eAAKC,IAAL,CAAU,GAAV,EAAe,cAAf,CAAb,CAAhB,C,CAbA;;;;;;AAcA,IAAMC,UAAU,sBAAYF,QAAQG,IAApB,EAA0BH,QAAQI,OAAlC,CAAhB;;AAEA;;;;AAIO,SAASN,UAAT,GAAsB;AAC5B,QAAOI,OAAP;AACA;;AAED;;;;;;;;;;AAUO,SAASH,sBAAT,CACNM,qBADM,EAENC,OAFM,EAIL;AAAA,KADDC,iBACC,uEADmB,EACnB;;AACD,KAAMC,cAAc,4BAAa,eAAKP,IAAL,CAAUK,OAAV,EAAmB,eAAnB,CAAb,CAApB;AACA,KAAMG,MAAM,sBACXD,YAAYL,IADD,EAEXK,YAAYJ,OAFD,EAGXE,WAAW,GAAX,GAAiB,IAAjB,GAAwBA,OAHb,CAAZ;;AAMA,KAAID,sBAAsBI,IAAIC,EAA1B,CAAJ,EAAmC;AAClC;AACA;;AAEDL,uBAAsBI,IAAIC,EAA1B,IAAgCD,GAAhC;;AAEA,KAAIE,eAAeH,YAAYG,YAAZ,IAA4B,EAA/C;AACAA,gBAAeC,OAAOC,IAAP,CAAYF,YAAZ,CAAf;AACAA,gBAAeA,aAAaG,MAAb,CAAoBP,iBAApB,CAAf;;AAEA,KAAMQ,iBAAiBJ,aACrBK,GADqB,CACjB,sBAAc;AAClB,SAAOC,qBAAqBX,OAArB,EAA8BE,WAA9B,EAA2CU,UAA3C,CAAP;AACA,EAHqB,EAIrBC,MAJqB,CAId,yBAAiB;AACxB,SAAOC,iBAAiB,IAAxB;AACA,EANqB,CAAvB;;AAQAL,gBAAeM,OAAf,CAAuB,yBAAiB;AACvCtB,yBAAuBM,qBAAvB,EAA8Ce,aAA9C;AACA,EAFD;;AAIA,QAAOf,qBAAP;AACA;;AAED;;;;;;;AAOA,SAASY,oBAAT,CAA8BK,UAA9B,EAA0Cd,WAA1C,EAAuDU,UAAvD,EAAmE;AAClE,KAAI;AACH,MAAMK,cAAc,kBAAcC,IAAd,CAAmBN,aAAa,eAAhC,EAAiD;AACpEZ,YAASgB;AAD2D,GAAjD,CAApB;;AAIA,SAAO,eAAKG,OAAL,CAAaF,WAAb,CAAP;AACA,EAND,CAME,OAAOG,GAAP,EAAY;AACb,MACClB,YAAYmB,oBAAZ,IACAnB,YAAYmB,oBAAZ,CAAiCT,UAAjC,CAFD,EAGE;AACD,oBAAOU,IAAP,CACC,2BAAwBV,UAAxB,sBACKV,YAAYL,IADjB,0FADD;;AAMA,UAAO,IAAP;AACA,GAXD,MAWO;AACN,SAAMuB,GAAN;AACA;AACD;AACD","file":"dependencies.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport PkgDesc from 'liferay-npm-build-tools-common/lib/pkg-desc';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolveModule from 'resolve';\n\nimport report from './report';\n\nconst pkgJson = readJsonSync(path.join('.', 'package.json'));\nconst rootPkg = new PkgDesc(pkgJson.name, pkgJson.version);\n\n/**\n * Get root package descriptor\n * @return {PkgDesc} the root package descriptor\n */\nexport function getRootPkg() {\n\treturn rootPkg;\n}\n\n/**\n * Recursively find the dependencies of a package and return them as PkgDesc\n * objects.\n * @param {object} collectedDependencies a hash of objects where key is the\n * \t\t\t\t\tpackage id and values are PkgDesc objects\n * @param {string} basedir directory where package lives in\n * @param {Array} extraDependencies an array of package names to add to\n *\t\t\t\t\tdependencies collected from package.json\n * @return {object} the given collectedDependencies object\n */\nexport function addPackageDependencies(\n\tcollectedDependencies,\n\tbasedir,\n\textraDependencies = []\n) {\n\tconst packageJson = readJsonSync(path.join(basedir, '/package.json'));\n\tconst pkg = new PkgDesc(\n\t\tpackageJson.name,\n\t\tpackageJson.version,\n\t\tbasedir == '.' ? null : basedir\n\t);\n\n\tif (collectedDependencies[pkg.id]) {\n\t\treturn;\n\t}\n\n\tcollectedDependencies[pkg.id] = pkg;\n\n\tlet dependencies = packageJson.dependencies || {};\n\tdependencies = Object.keys(dependencies);\n\tdependencies = dependencies.concat(extraDependencies);\n\n\tconst dependencyDirs = dependencies\n\t\t.map(dependency => {\n\t\t\treturn resolveDependencyDir(basedir, packageJson, dependency);\n\t\t})\n\t\t.filter(dependencyDir => {\n\t\t\treturn dependencyDir != null;\n\t\t});\n\n\tdependencyDirs.forEach(dependencyDir => {\n\t\taddPackageDependencies(collectedDependencies, dependencyDir);\n\t});\n\n\treturn collectedDependencies;\n}\n\n/**\n * Resolves a dependency package and returns its directory.\n * @param {String} packageDir the base directory used for resolution\n * @param {Object} packageJson the package.json object\n * @param {String} dependency a package name\n * @return {String} the path of the directory containing the dependency package\n */\nfunction resolveDependencyDir(packageDir, packageJson, dependency) {\n\ttry {\n\t\tconst pkgJsonFile = resolveModule.sync(dependency + '/package.json', {\n\t\t\tbasedir: packageDir,\n\t\t});\n\n\t\treturn path.dirname(pkgJsonFile);\n\t} catch (err) {\n\t\tif (\n\t\t\tpackageJson.optionalDependencies &&\n\t\t\tpackageJson.optionalDependencies[dependency]\n\t\t) {\n\t\t\treport.warn(\n\t\t\t\t`Optional dependency '${dependency}' of ` +\n\t\t\t\t\t`'${packageJson.name}' could not be found in ` +\n\t\t\t\t\t`node_modules: it will be missing in the output bundle.`\n\t\t\t);\n\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n"]}