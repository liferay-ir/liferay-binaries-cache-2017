{"version":3,"sources":["../../src/report/index.js"],"names":["Report","_executionDate","Date","_versionsInfo","_packages","_warnings","hrtime","_executionTime","message","unique","find","item","push","info","rootPkg","pkg","_getPackage","id","name","version","deps","forEach","dep","packageName","packageLink","packageVersion","pkgId","link","allFiles","copiedFiles","rpkg","Object","assign","phase","plugin","logger","pkgProcess","_getPackageProcess","babelConfig","babel","config","filePath","files","create","process","copy","pre","post","length","report"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport {htmlDump} from './html';\nimport {analyticsDump} from './analytics';\n\n/**\n * A Report holds data describing a execution of the liferay-npm-bundler so that\n * it can be dump as an HTML report.\n * @type {Report}\n */\nexport class Report {\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\tthis._executionDate = new Date();\n\t\tthis._versionsInfo = {};\n\t\tthis._packages = {};\n\t\tthis._warnings = [];\n\t}\n\n\t/**\n\t * Return an HTML string with the information contained in this report.\n\t * @return {String} an HTML string\n\t */\n\ttoHtml() {\n\t\treturn htmlDump(this);\n\t}\n\n\t/**\n\t * Dump report information to insight package so that it gets exported to\n\t * our Google Analytics account.\n\t * @return {void}\n\t */\n\tsendAnalytics() {\n\t\treturn analyticsDump(this);\n\t}\n\n\t/**\n\t * Register execution time.\n\t * @param  {Array} hrtime the time it took to execute\n\t * @return {void}\n\t */\n\texecutionTime(hrtime) {\n\t\tthis._executionTime = hrtime;\n\t}\n\n\t/**\n\t * Test if there are global warning messages present.\n\t * @return {boolean} true if warnings exist\n\t */\n\tget warningsPresent() {\n\t\treturn this._warnings.length > 0;\n\t}\n\n\t/**\n\t * Register a warning.\n\t * @param  {String} message the warning message\n\t * @param  {boolean} unique set to true if you want this warning to be deduped\n\t * @return {void}\n\t */\n\twarn(message, {unique} = {unique: false}) {\n\t\tif (unique && this._warnings.find(item => item === message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._warnings.push(message);\n\t}\n\n\t/**\n\t * Register a versions hash describing the packages and versions used by the\n\t * build process.\n\t * @param  {Object} info a hash or (package,version) pairs\n\t * @return {void}\n\t */\n\tversionsInfo(info) {\n\t\tthis._versionsInfo = info;\n\t}\n\n\t/**\n\t * Register the root package descriptor.\n\t * @param  {PkgDesc} rootPkg root package descriptor\n\t * @return {void}\n\t */\n\trootPackage(rootPkg) {\n\t\tconst pkg = this._getPackage(rootPkg.id);\n\n\t\tpkg.name = rootPkg.name;\n\t\tpkg.version = rootPkg.version;\n\t}\n\n\t/**\n\t * Register the list of dependencies detected in this build.\n\t * @param  {Array} deps an array of PkgDesc objects\n\t * @return {void}\n\t */\n\tdependencies(deps) {\n\t\tdeps.forEach(dep => {\n\t\t\tconst pkg = this._getPackage(dep.id);\n\n\t\t\tpkg.name = dep.name;\n\t\t\tpkg.version = dep.version;\n\t\t});\n\t}\n\n\t/**\n\t * Register a linked dependency found in the root package.json. This method\n\t * must be called after registering all dependencies with the dependencies()\n\t * method. Unknown dependencies will be ignored.\n\t * @param  {String} packageName package name\n\t * @param  {String} packageLink the link to the package\n\t * @param  {String} packageVersion package version\n\t * @return {void}\n\t */\n\tlinkedDependency(packageName, packageLink, packageVersion) {\n\t\tconst pkgId = `${packageName}@${packageVersion}`;\n\t\tconst pkg = this._getPackage(pkgId, false);\n\n\t\tif (pkg) {\n\t\t\tpkg.link = packageLink;\n\t\t\tpkg.version = packageVersion;\n\t\t}\n\t}\n\n\t/**\n\t * Register a package copy action.\n\t * @param  {Object} pkg a package descriptor\n\t * @param  {Array} allFiles the list of all files in the package\n\t * @param  {Array} copiedFiles the list of files copied to the target\n\t * @return {void}\n\t */\n\tpackageCopy(pkg, allFiles, copiedFiles) {\n\t\tconst rpkg = this._getPackage(pkg.id);\n\n\t\tObject.assign(rpkg, {\n\t\t\tallFiles,\n\t\t\tcopiedFiles,\n\t\t});\n\t}\n\n\t/**\n\t * Register a liferay-npm-bundler plugin execution.\n\t * @param  {String} phase run phase (pre or post)\n\t * @param  {Object} pkg package descriptor\n\t * @param  {Object} plugin plugin descriptor (with config and run fields)\n\t * @param  {PluginLogger} logger the logger cotaining the process messages\n\t * @return {void}\n\t */\n\tpackageProcessBundlerPlugin(phase, pkg, plugin, logger) {\n\t\tconst pkgProcess = this._getPackageProcess(pkg.id);\n\n\t\tpkgProcess[phase][plugin.name] = {\n\t\t\tplugin,\n\t\t\tlogger,\n\t\t};\n\t}\n\n\t/**\n\t * Register a Babel execution config.\n\t * @param  {Object} pkg package descriptor\n\t * @param  {Object} babelConfig the Babel config object\n\t * @return {void}\n\t */\n\tpackageProcessBabelConfig(pkg, babelConfig) {\n\t\tconst {babel} = this._getPackageProcess(pkg.id);\n\n\t\tbabel.config = babelConfig;\n\t}\n\n\t/**\n\t * Register a Babel file process.\n\t * @param  {Object} pkg package descriptor\n\t * @param  {String} filePath the file path\n\t * @param  {PluginLogger} logger the logger cotaining the process messages\n\t * @return {void}\n\t */\n\tpackageProcessBabelRun(pkg, filePath, logger) {\n\t\tconst {babel} = this._getPackageProcess(pkg.id);\n\n\t\tbabel.files[filePath] = {logger};\n\t}\n\n\t/**\n\t * Get a package slot and create it if missing.\n\t * @param  {String} pkgId the package id\n\t * @param  {Boolean} create whether to create the entry if it doesn't exist\n\t * @return {Object} a package slot\n\t */\n\t_getPackage(pkgId, create = true) {\n\t\tlet pkg = this._packages[pkgId];\n\n\t\tif (!pkg && create) {\n\t\t\tpkg = this._packages[pkgId] = {\n\t\t\t\tid: pkgId,\n\t\t\t};\n\n\t\t\tthis._getPackageProcess(pkgId);\n\t\t}\n\n\t\treturn pkg;\n\t}\n\n\t/**\n\t * Get a package process slot and create it if missing.\n\t * @param  {String} pkgId the package id\n\t * @return {Object} a package process slot\n\t */\n\t_getPackageProcess(pkgId) {\n\t\tconst rpkg = this._getPackage(pkgId);\n\n\t\trpkg.process = rpkg.process || {\n\t\t\tcopy: {},\n\t\t\tpre: {},\n\t\t\tbabel: {\n\t\t\t\tconfig: {},\n\t\t\t\tfiles: {},\n\t\t\t},\n\t\t\tpost: {},\n\t\t};\n\n\t\treturn rpkg.process;\n\t}\n}\n\nconst report = new Report();\n\nexport default report;\n"]}