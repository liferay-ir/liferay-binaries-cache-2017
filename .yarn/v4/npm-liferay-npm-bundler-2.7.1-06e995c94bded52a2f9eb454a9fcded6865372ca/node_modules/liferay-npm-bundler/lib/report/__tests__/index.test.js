'use strict';

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

var report = void 0;

beforeEach(function () {
	report = new _index.Report();

	// Hack to make tests repeatable
	report._executionDate = new Date(0);
});

describe('when describing the run', function () {
	afterEach(function () {
		expect(report).toMatchSnapshot();
	});

	it('correctly stores executionTime', function () {
		report.executionTime([1, 2]);
	});

	it('correctly stores warnings', function () {
		report.warn('warn 1');
		report.warn('warn 2');
	});

	it('correctly stores unique warnings', function () {
		report.warn('warn', { unique: true });
		report.warn('warn', { unique: true });
	});

	it('correctly stores versions info', function () {
		report.versionsInfo({
			'liferay-npm-bundler': '1.4.2',
			'liferay-npm-bundler-plugin-inject-angular': '1.4.2'
		});
	});

	it('correctly stores root package description', function () {
		report.rootPackage({
			id: 'root-package1@1.0.0',
			name: 'root-package',
			version: '1.0.0'
		});
	});

	it('correctly stores dependencies', function () {
		report.dependencies([{ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, { id: 'package-2@2.0.0', name: 'package-2', version: '2.0.0' }]);
	});

	it('correctly stores linked dependencies', function () {
		var pkg = {
			id: 'a-package@1.1.0',
			name: 'a-package',
			version: '1.1.0'
		};
		report.dependencies([pkg]);
		report.linkedDependency(pkg.name, 'file:../a-package', pkg.version);
	});

	it('ignores not previously registered linked dependencies', function () {
		report.linkedDependency('a-package', 'file:../a-package', '1.1.0');
		report.linkedDependency('package-1', 'file:../package-1', '1.0.0');
	});

	it('correctly stores package copies', function () {
		report.packageCopy({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, ['a.js', 'b.js', 'c.js'], ['a.js', 'c.js']);
	});

	it('correctly stores bundler plugin runs', function () {
		report.packageProcessBundlerPlugin('pre', { id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, {
			name: 'a-plugin',
			config: { cfgval1: 1, cfgval2: 2 },
			run: function run() {
				return '';
			}
		}, new _pluginLogger2.default());
	});

	it('correctly stores Babel config', function () {
		report.packageProcessBabelConfig({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, { cfgval1: 1, cfgval2: 2 });
	});

	it('correctly stores Babel file run', function () {
		report.packageProcessBabelRun({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, 'a.js', new _pluginLogger2.default());
	});
});

it('correctly dumps HTML report', function () {
	// The goal of this test is to detect unwanted changes in HTML. If you make
	// changes to the HTML on purpose, just check it visually and update the
	// snapshot with Jest's -u switch.

	report.executionTime([1, 2]);
	report.warn('warn 1');
	report.warn('warn 2');
	report.warn('warn', { unique: true });
	report.warn('warn', { unique: true });
	report.versionsInfo({
		'liferay-npm-bundler': '1.4.2',
		'liferay-npm-bundler-plugin-inject-angular': '1.4.2'
	});
	report.rootPackage({
		id: 'root-package1@1.0.0',
		name: 'root-package',
		version: '1.0.0'
	});
	report.dependencies([{ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, { id: 'package-2@2.0.0', name: 'package-2', version: '2.0.0' }]);
	report.linkedDependency('a-package', 'file:../a-package', '1.1.0');
	report.linkedDependency('package-1', 'file:../package-1', '1.0.0');
	report.packageCopy({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, ['a.js', 'b.js', 'c.js'], ['a.js', 'c.js']);
	report.packageProcessBundlerPlugin('pre', { id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, {
		name: 'a-plugin',
		config: { cfgval1: 1, cfgval2: 2 },
		run: function run() {
			return '';
		}
	}, new _pluginLogger2.default());
	report.packageProcessBabelConfig({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, { cfgval1: 1, cfgval2: 2 });
	report.packageProcessBabelRun({ id: 'package-1@1.0.0', name: 'package-1', version: '1.0.0' }, 'a.js', new _pluginLogger2.default());

	expect(report.toHtml()).toMatchSnapshot();
});
//# sourceMappingURL=index.test.js.map