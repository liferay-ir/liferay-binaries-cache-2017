'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.htmlDump = htmlDump;

var _prettyTime = require('pretty-time');

var _prettyTime2 = _interopRequireDefault(_prettyTime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Â© 2017 Liferay, Inc. <https://liferay.com>
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * SPDX-License-Identifier: LGPL-3.0-or-later
                                                                                                                                                                                                     */

/* eslint require-jsdoc: off */


function htmlDump(report) {
	var _executionDate = report._executionDate,
	    _executionTime = report._executionTime,
	    _packages = report._packages,
	    _versionsInfo = report._versionsInfo,
	    _warnings = report._warnings;


	var title = 'Report of liferay-npm-bundler execution';

	var summary = htmlTable([htmlRow('<td>Executed at:</td><td>' + _executionDate.toUTCString() + '</td>'), htmlIf(_executionTime, function () {
		return htmlRow('<td>Execution took:</td><td>' + (0, _prettyTime2.default)(_executionTime) + '</td>');
	})]);

	var warnings = htmlIf(_warnings.length > 0, function () {
		return htmlSection('Warnings', htmlList.apply(undefined, _toConsumableArray(_warnings)));
	});

	var versionsInfo = htmlSection('Bundler environment versions', htmlTable('Package', 'Version', Object.keys(_versionsInfo).map(function (pkgName) {
		return htmlRow('\n\t\t\t\t\t<td>' + pkgName + '</td>\n\t\t\t\t\t<td>' + _versionsInfo[pkgName] + '</td>\n\t\t\t\t');
	})));

	var dependencies = htmlSection('Bundled packages', htmlTable('Package', 'Version', 'Copied files', 'Excluded files', 'Linked to', Object.keys(_packages).sort().map(function (pkgId) {
		var _packages$pkgId = _packages[pkgId],
		    allFiles = _packages$pkgId.allFiles,
		    copiedFiles = _packages$pkgId.copiedFiles,
		    link = _packages$pkgId.link,
		    name = _packages$pkgId.name,
		    version = _packages$pkgId.version;


		return htmlRow('\n\t\t\t\t\t\t<td>' + name + '</td>\n\t\t\t\t\t\t<td>' + version + '</td>\n\t\t\t\t\t\t<td>' + htmlIf(copiedFiles, function () {
			return copiedFiles.length;
		}) + '</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t' + htmlIf(allFiles && copiedFiles, function () {
			return allFiles.length - copiedFiles.length;
		}) + '\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>' + htmlIf(link, function () {
			return link;
		}) + '</td>\n\t\t\t\t\t');
	})));

	var packageProcesses = htmlSection('Summary of package transformations', htmlTable('Package', 'Version', 'Copy phase', 'Pre-babel phase', 'Babel phase', 'Post-babel phase', Object.keys(_packages).sort().map(function (pkgId) {
		var pkg = _packages[pkgId];
		var _pkg$process = pkg.process,
		    babel = _pkg$process.babel,
		    copy = _pkg$process.copy,
		    post = _pkg$process.post,
		    pre = _pkg$process.pre;

		var copyKeys = Object.keys(copy);
		var preKeys = Object.keys(pre);
		var postKeys = Object.keys(post);
		var babelKeys = Object.keys(babel.files);

		var copyNotice = htmlIf(copyKeys.length > 0, function () {
			return copyKeys.length + ' plugins applied';
		});
		var preNotice = htmlIf(preKeys.length > 0, function () {
			return preKeys.length + ' plugins applied';
		});
		var babelNotice = htmlIf(babelKeys.length > 0, function () {
			return babelKeys.length + ' files processed';
		});
		var postNotice = htmlIf(postKeys.length > 0, function () {
			return postKeys.length + ' plugins applied';
		});

		return htmlRow('\n\t\t\t\t\t\t<td>' + pkg.name + '</td>\n\t\t\t\t\t\t<td>' + pkg.version + '</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<a href="#' + pkgId + '-bundler">\n\t\t\t\t\t\t\t\t' + copyNotice + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<a href="#' + pkgId + '-bundler">\n\t\t\t\t\t\t\t\t' + preNotice + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<a href="#' + pkgId + '-babel">\n\t\t\t\t\t\t\t\t' + babelNotice + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<a href="#' + pkgId + '-bundler">\n\t\t\t\t\t\t\t\t' + postNotice + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t');
	})));

	var packageProcessesBundlerDetails = htmlSection.apply(undefined, ['Details of bundler transformations'].concat(_toConsumableArray(Object.keys(_packages).sort().map(function (pkgId) {
		var pkg = _packages[pkgId];
		var _pkg$process2 = pkg.process,
		    copy = _pkg$process2.copy,
		    post = _pkg$process2.post,
		    pre = _pkg$process2.pre;

		var copyKeys = Object.keys(copy);
		var preKeys = Object.keys(pre);
		var postKeys = Object.keys(post);

		return htmlIf(copyKeys.length > 0 || preKeys.length > 0 || postKeys.length > 0, function () {
			return htmlSubsection.apply(undefined, ['\n\t\t\t\t\t\t\t<a name="' + pkgId + '-bundler">\n\t\t\t\t\t\t\t\t' + pkg.name + '@' + pkg.version + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t'].concat(_toConsumableArray(htmlIf(copyKeys.length > 0, function () {
				return copyKeys.sort().map(function (pluginName) {
					return htmlLogOutput(['Copy phase plugin', 'Config'], [[pluginName, JSON.stringify(copy[pluginName].plugin.config)]], [copy[pluginName].logger], { source: false });
				});
			})), _toConsumableArray(htmlIf(preKeys.length > 0, function () {
				return preKeys.sort().map(function (pluginName) {
					return htmlLogOutput(['Pre-phase plugin', 'Config'], [[pluginName, JSON.stringify(pre[pluginName].plugin.config)]], [pre[pluginName].logger], { source: false });
				});
			})), _toConsumableArray(htmlIf(postKeys.length > 0, function () {
				return postKeys.sort().map(function (pluginName) {
					return htmlLogOutput(['Post-phase plugin', 'Config'], [[pluginName, JSON.stringify(post[pluginName].plugin.config)]], [post[pluginName].logger], { source: false });
				});
			}))));
		});
	}))));

	var packageProcessesBabelDetails = htmlSection.apply(undefined, ['Details of Babel transformations'].concat(_toConsumableArray(Object.keys(_packages).sort().map(function (pkgId) {
		var pkg = _packages[pkgId];
		var babel = pkg.process.babel;

		var babelKeys = Object.keys(babel.files);

		return htmlIf(babelKeys.length > 0, function () {
			return htmlSubsection('\n\t\t\t\t\t\t\t<a name="' + pkgId + '-babel">\n\t\t\t\t\t\t\t\t' + pkg.name + '@' + pkg.version + '\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t', '<p>\n\t\t\t\t\t\t\tConfiguration: \n\t\t\t\t\t\t\t' + JSON.stringify(babel.config) + '\n\t\t\t\t\t\t</p>', htmlLogOutput(['File'], babelKeys.sort().map(function (filePath) {
				return [filePath];
			}), babelKeys.sort().map(function (filePath) {
				return babel.files[filePath].logger;
			})));
		});
	}))));

	return '\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta charset="utf-8" />\n\t\t\t\t<title>' + title + '</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody, h1, h2, h3, p, li {\n\t\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbody, p, th, td, li {\n\t\t\t\t\t\tfont-size: 10pt;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\th1 {\n\t\t\t\t\t\tfont-size: 16pt;\n\t\t\t\t\t\tmargin: 1em 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\th2 {\n\t\t\t\t\t\tfont-size: 13pt;\n\t\t\t\t\t\tmargin: 1em 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\th3 {\n\t\t\t\t\t\tfont-size: 11pt;\n\t\t\t\t\t\tmargin: 1em 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttable {\n\t\t\t\t\t\tmargin: 0 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttr:nth-child(odd) {\n\t\t\t\t\t\tbackground-color: #F6F6F6;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tth {\n\t\t\t\t\t\tbackground-color: #F0F0F0;\n\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tth, td {\n\t\t\t\t\t\tpadding: .1em 0;\n\t\t\t\t\t\tvertical-align: top;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttd.info, td.warn, td.error {\n\t\t\t\t\t\tbackground: green;\n\t\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\t\tcolor: white;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tvertical-align: middle;\n\t\t\t\t\t\twidth: 1px;\n\t\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\t}\n\n\t\t\t\t\ttd.warn {\n\t\t\t\t\t\tbackground: orange;\n\t\t\t\t\t}\n\n\t\t\t\t\ttd.error {\n\t\t\t\t\t\tbackground: red;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttd.source {\n\t\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\t}\n\n\t\t\t\t\tul {\n\t\t\t\t\t\tpadding-left: 1em;\n\t\t\t\t\t\tmargin: 0 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tp {\n\t\t\t\t\t\tmargin: 0 0 .5em 0;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<script id="report" type="application/json">\n\t\t\t\t\t' + JSON.stringify(report) + '\n\t\t\t\t</script>\n\t\t\t\t<script>\n\t\t\t\t\twindow.report = JSON.parse(\n\t\t\t\t\t\tdocument.getElementById("report").innerHTML\n\t\t\t\t\t);\n\t\t\t\t</script>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<h1>' + title + '</h1>\n\t\t\t\t' + summary + '\n\t\t\t\t' + warnings + '\n\t\t\t\t' + versionsInfo + '\n\t\t\t\t' + dependencies + '\n\t\t\t\t' + packageProcesses + '\n\t\t\t\t' + packageProcessesBundlerDetails + '\n\t\t\t\t' + packageProcessesBabelDetails + '\n\t\t\t</body>\n\t\t</html>\n\t';
}

function htmlIf(condition, contentGenerator) {
	return condition ? contentGenerator() : '';
}

function htmlSection(title) {
	for (var _len = arguments.length, contents = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		contents[_key - 1] = arguments[_key];
	}

	return '\n\t\t<h2>' + title + '</h2>\n\t\t' + contents.join('\n') + '\n\t';
}

function htmlSubsection(title) {
	for (var _len2 = arguments.length, contents = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		contents[_key2 - 1] = arguments[_key2];
	}

	return '\n\t\t<h3>' + title + '</h3>\n\t\t' + contents.join('\n') + '\n\t';
}

function htmlList() {
	for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
		args[_key3] = arguments[_key3];
	}

	return '\n\t\t<ul>\n\t\t\t' + args.map(function (arg) {
		return '<li>' + arg + '</li>';
	}).join(' ') + '\n\t\t</ul>\n\t';
}

function htmlTable() {
	for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
		args[_key4] = arguments[_key4];
	}

	var columns = args.slice(0, args.length - 1);
	var content = args[args.length - 1];

	if (Array.isArray(content)) {
		content = content.join('\n');
	}

	if (columns.length == 0) {
		return '\n\t\t\t<table>\n\t\t\t\t' + content + '\n\t\t\t</table>\n\t\t';
	} else {
		return '\n\t\t\t<table>\n\t\t\t\t' + htmlRow(columns.map(function (column) {
			return '<th>' + column + '</th>';
		})) + '\n\t\t\t\t' + content + '\n\t\t\t</table>\n\t\t';
	}
}

function htmlRow(content) {
	if (Array.isArray(content)) {
		content = content.join('\n');
	}

	return '<tr>' + content + '</tr>';
}

/**
 * Dump a table with the output of a PluginLogger
 * @param  {Array} prefixColumns [description]
 * @param  {Array<Array>} prefixCells an array with one array per row containing the prefix cell content
 * @param  {Array} rowLoggers an array with one logger per row in prefixCells
 * @param  {boolean} source whether or not to show 'Log source' column
 * @return {String} an HTML table
 */
function htmlLogOutput(prefixColumns, prefixCells, rowLoggers) {
	var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { source: true },
	    source = _ref.source;

	if (prefixCells.length != rowLoggers.length) {
		throw new Error('The length of prefixCells and rowLoggers must be the same');
	}

	var logColums = ['Message', ''];

	if (source) {
		logColums.splice(0, 0, 'Log source');
	}

	var columns = prefixColumns.concat(logColums);

	var rows = [];

	prefixCells.forEach(function (cells, i) {
		if (cells.length != prefixColumns.length) {
			throw new Error('Prefix cells row ' + i + ' has an invalid length: ' + cells.length);
		}

		var msgs = rowLoggers[i].messages;

		if (msgs.length == 0) {
			rows.push(htmlRow('\n\t\t\t\t\t' + cells.map(function (cell) {
				return '<td>' + cell + '</td>';
			}).join(' ') + '\n\t\t\t\t\t' + htmlIf(source, function () {
				return '<td></td>';
			}) + '\n\t\t\t\t\t' + logColums.splice(1).map(function () {
				return '<td></td>';
			}).join(' ') + '\n\t\t\t\t'));
		} else {
			var msg0 = msgs[0];

			var sourceCell = htmlIf(source, function () {
				return '<td class="source">' + msg0.source + '</td>';
			});

			rows.push(htmlRow('\n\t\t\t\t\t' + cells.map(function (cell) {
				return '<td>' + cell + '</td>';
			}).join(' ') + '\n\t\t\t\t\t' + sourceCell + '\n\t\t\t\t\t<td class="' + msg0.level + '">' + msg0.level.toUpperCase() + '</td>\n\t\t\t\t\t<td>' + msg0.things.join(' ') + '</td>\n\t\t\t\t'));

			var _loop = function _loop(_i) {
				sourceCell = htmlIf(source, function () {
					return '<td class="source">' + msgs[_i].source + '</td>';
				});

				rows.push(htmlRow('\n\t\t\t\t\t\t' + cells.map(function () {
					return '<td></td>';
				}).join(' ') + '\n\t\t\t\t\t\t' + sourceCell + '\n\t\t\t\t\t\t<td class="' + msgs[_i].level + '">\n\t\t\t\t\t\t\t' + msgs[_i].level.toUpperCase() + '\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>' + msgs[_i].things.join(' ') + '</td>\n\t\t\t\t\t'));
			};

			for (var _i = 1; _i < msgs.length; _i++) {
				_loop(_i);
			}
		}
	});

	return htmlTable.apply(undefined, _toConsumableArray(columns).concat([rows]));
}
//# sourceMappingURL=html.js.map