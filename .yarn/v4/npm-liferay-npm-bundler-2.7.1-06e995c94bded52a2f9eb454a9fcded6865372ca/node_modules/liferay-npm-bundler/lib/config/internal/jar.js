'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Â© 2017 Liferay, Inc. <https://liferay.com>
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * SPDX-License-Identifier: LGPL-3.0-or-later
                                                                                                                                                                                                                                                                               */

exports.init = init;
exports.getRequireJsExtender = getRequireJsExtender;
exports.getLocalizationFile = getLocalizationFile;
exports.getConfigurationFile = getConfigurationFile;
exports.getWebContextPath = getWebContextPath;
exports.getOutputDir = getOutputDir;

var _dotProp = require('dot-prop');

var _dotProp2 = _interopRequireDefault(_dotProp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _index = require('../index');

var base = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var notifiedWarnings = {
	settings: false
};

var config = void 0;
var pkgJson = void 0;

/**
 * Initialize submodule
 * @param {object} state
 * @return {void}
 */
function init(state) {
	config = state.config;
	pkgJson = state.pkgJson;
}

/**
 * Whether or not to add a manifest header in JAR file to make the JS extender
 * process this bundle.
 * @return {boolean|string} a boolean or a string forcing a capability version
 * 				number (or 'any' to leave version unbounded)
 */
function getRequireJsExtender() {
	var jarConfig = getNormalizedJarConfig();

	return _dotProp2.default.get(jarConfig, 'features.js-extender',
	// TODO: deprecated 'auto-deploy-portlet', remove for the next major version
	_dotProp2.default.get(jarConfig, 'auto-deploy-portlet', true));
}

/**
 * Get localization bundle path.
 * @return {string} the full path of file or undefined if not configured
 */
function getLocalizationFile() {
	var jarConfig = getNormalizedJarConfig();

	var defaultValue = undefined;

	if (_fs2.default.existsSync('./features/localization/Language.properties')) {
		defaultValue = 'features/localization/Language';
	}

	return _dotProp2.default.get(jarConfig, 'features.localization', defaultValue);
}

/**
 * Get configuration file path.
 * @return {string} the full path of file or undefined if not configured
 */
function getConfigurationFile() {
	var jarConfig = getNormalizedJarConfig();

	var defaultValue = undefined;

	if (_fs2.default.existsSync('./features/configuration.json')) {
		defaultValue = 'features/configuration.json';
	}

	return _dotProp2.default.get(jarConfig, 'features.configuration', defaultValue);
}

/**
 * Get the configured web context path value.
 * @return {string}
 */
function getWebContextPath() {
	var jarConfig = getNormalizedJarConfig();

	return _dotProp2.default.get(jarConfig, 'features.web-context',
	// TODO: deprecated 'web-context-path', remove for the next major version
	_dotProp2.default.get(jarConfig, 'web-context-path',
	// TODO: deprecated 'osgi.Web-ContextPath', remove for the next major version
	_dotProp2.default.get(pkgJson, 'osgi.Web-ContextPath', '/' + pkgJson.name + '-' + pkgJson.version)));
}

/**
 * Get the output directory for JAR files. Defaults to getOutputDir() if none is
 * specified.
 * @return {string}
 */
function getOutputDir() {
	var jarConfig = getNormalizedJarConfig();

	return _dotProp2.default.get(jarConfig, 'output-dir', base.getOutputDir());
}

/**
 * Get normalized JAR config as an object. Note that if JAR config is false this
 * method returns an object too so it only makes sense in a context where
 * cfg.isCreateJar() has already been checked and returned true.
 * @return {object}
 */
function getNormalizedJarConfig() {
	if (config['create-jar'] === undefined) {
		return {};
	}

	if (_typeof(config['create-jar']) !== 'object') {
		return {};
	}

	var jarConfig = config['create-jar'];

	// Make deprecation checks
	if (!notifiedWarnings.settings && _dotProp2.default.get(jarConfig, 'features.settings') !== undefined) {
		notifiedWarnings.settings = true;

		console.warn('\n' + "ðŸ‘€ WARNING: configuration value 'create-jar.configuration.settings' is no longer supported\n" + '            (see https://tinyurl.com/settings-not-supported for more information)\n');
	}

	return jarConfig;
}
//# sourceMappingURL=jar.js.map