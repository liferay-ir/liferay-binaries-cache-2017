{"version":3,"sources":["../../../src/config/internal/jar.js"],"names":["init","getRequireJsExtender","getLocalizationFile","getConfigurationFile","getWebContextPath","getOutputDir","base","notifiedWarnings","settings","config","pkgJson","state","jarConfig","getNormalizedJarConfig","get","defaultValue","undefined","existsSync","name","version","console","warn"],"mappings":";;;;;;8QAAA;;;;;;QAuBgBA,I,GAAAA,I;QAWAC,oB,GAAAA,oB;QAeAC,mB,GAAAA,mB;QAgBAC,oB,GAAAA,oB;QAgBAC,iB,GAAAA,iB;QAyBAC,Y,GAAAA,Y;;AApGhB;;;;AACA;;;;AAEA;;IAAYC,I;;;;;;AAEZ,IAAMC,mBAAmB;AACxBC,WAAU;AADc,CAAzB;;AAIA,IAAIC,eAAJ;AACA,IAAIC,gBAAJ;;AAEA;;;;;AAKO,SAASV,IAAT,CAAcW,KAAd,EAAqB;AAC3BF,UAASE,MAAMF,MAAf;AACAC,WAAUC,MAAMD,OAAhB;AACA;;AAED;;;;;;AAMO,SAAST,oBAAT,GAAgC;AACtC,KAAMW,YAAYC,wBAAlB;;AAEA,QAAO,kBAAKC,GAAL,CACNF,SADM,EAEN,sBAFM;AAGN;AACA,mBAAKE,GAAL,CAASF,SAAT,EAAoB,qBAApB,EAA2C,IAA3C,CAJM,CAAP;AAMA;;AAED;;;;AAIO,SAASV,mBAAT,GAA+B;AACrC,KAAMU,YAAYC,wBAAlB;;AAEA,KAAIE,eAAeC,SAAnB;;AAEA,KAAI,aAAGC,UAAH,CAAc,6CAAd,CAAJ,EAAkE;AACjEF,iBAAe,gCAAf;AACA;;AAED,QAAO,kBAAKD,GAAL,CAASF,SAAT,EAAoB,uBAApB,EAA6CG,YAA7C,CAAP;AACA;;AAED;;;;AAIO,SAASZ,oBAAT,GAAgC;AACtC,KAAMS,YAAYC,wBAAlB;;AAEA,KAAIE,eAAeC,SAAnB;;AAEA,KAAI,aAAGC,UAAH,CAAc,+BAAd,CAAJ,EAAoD;AACnDF,iBAAe,6BAAf;AACA;;AAED,QAAO,kBAAKD,GAAL,CAASF,SAAT,EAAoB,wBAApB,EAA8CG,YAA9C,CAAP;AACA;;AAED;;;;AAIO,SAASX,iBAAT,GAA6B;AACnC,KAAMQ,YAAYC,wBAAlB;;AAEA,QAAO,kBAAKC,GAAL,CACNF,SADM,EAEN,sBAFM;AAGN;AACA,mBAAKE,GAAL,CACCF,SADD,EAEC,kBAFD;AAGC;AACA,mBAAKE,GAAL,CACCJ,OADD,EAEC,sBAFD,QAGKA,QAAQQ,IAHb,SAGqBR,QAAQS,OAH7B,CAJD,CAJM,CAAP;AAeA;;AAED;;;;;AAKO,SAASd,YAAT,GAAwB;AAC9B,KAAMO,YAAYC,wBAAlB;;AAEA,QAAO,kBAAKC,GAAL,CAASF,SAAT,EAAoB,YAApB,EAAkCN,KAAKD,YAAL,EAAlC,CAAP;AACA;;AAED;;;;;;AAMA,SAASQ,sBAAT,GAAkC;AACjC,KAAIJ,OAAO,YAAP,MAAyBO,SAA7B,EAAwC;AACvC,SAAO,EAAP;AACA;;AAED,KAAI,QAAOP,OAAO,YAAP,CAAP,MAAgC,QAApC,EAA8C;AAC7C,SAAO,EAAP;AACA;;AAED,KAAMG,YAAYH,OAAO,YAAP,CAAlB;;AAEA;AACA,KACC,CAACF,iBAAiBC,QAAlB,IACA,kBAAKM,GAAL,CAASF,SAAT,EAAoB,mBAApB,MAA6CI,SAF9C,EAGE;AACDT,mBAAiBC,QAAjB,GAA4B,IAA5B;;AAEAY,UAAQC,IAAR,CACC,OACC,8FADD,GAEC,qFAHF;AAKA;;AAED,QAAOT,SAAP;AACA","file":"jar.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport prop from 'dot-prop';\nimport fs from 'fs';\n\nimport * as base from '../index';\n\nconst notifiedWarnings = {\n\tsettings: false,\n};\n\nlet config;\nlet pkgJson;\n\n/**\n * Initialize submodule\n * @param {object} state\n * @return {void}\n */\nexport function init(state) {\n\tconfig = state.config;\n\tpkgJson = state.pkgJson;\n}\n\n/**\n * Whether or not to add a manifest header in JAR file to make the JS extender\n * process this bundle.\n * @return {boolean|string} a boolean or a string forcing a capability version\n * \t\t\t\tnumber (or 'any' to leave version unbounded)\n */\nexport function getRequireJsExtender() {\n\tconst jarConfig = getNormalizedJarConfig();\n\n\treturn prop.get(\n\t\tjarConfig,\n\t\t'features.js-extender',\n\t\t// TODO: deprecated 'auto-deploy-portlet', remove for the next major version\n\t\tprop.get(jarConfig, 'auto-deploy-portlet', true)\n\t);\n}\n\n/**\n * Get localization bundle path.\n * @return {string} the full path of file or undefined if not configured\n */\nexport function getLocalizationFile() {\n\tconst jarConfig = getNormalizedJarConfig();\n\n\tlet defaultValue = undefined;\n\n\tif (fs.existsSync('./features/localization/Language.properties')) {\n\t\tdefaultValue = 'features/localization/Language';\n\t}\n\n\treturn prop.get(jarConfig, 'features.localization', defaultValue);\n}\n\n/**\n * Get configuration file path.\n * @return {string} the full path of file or undefined if not configured\n */\nexport function getConfigurationFile() {\n\tconst jarConfig = getNormalizedJarConfig();\n\n\tlet defaultValue = undefined;\n\n\tif (fs.existsSync('./features/configuration.json')) {\n\t\tdefaultValue = 'features/configuration.json';\n\t}\n\n\treturn prop.get(jarConfig, 'features.configuration', defaultValue);\n}\n\n/**\n * Get the configured web context path value.\n * @return {string}\n */\nexport function getWebContextPath() {\n\tconst jarConfig = getNormalizedJarConfig();\n\n\treturn prop.get(\n\t\tjarConfig,\n\t\t'features.web-context',\n\t\t// TODO: deprecated 'web-context-path', remove for the next major version\n\t\tprop.get(\n\t\t\tjarConfig,\n\t\t\t'web-context-path',\n\t\t\t// TODO: deprecated 'osgi.Web-ContextPath', remove for the next major version\n\t\t\tprop.get(\n\t\t\t\tpkgJson,\n\t\t\t\t'osgi.Web-ContextPath',\n\t\t\t\t`/${pkgJson.name}-${pkgJson.version}`\n\t\t\t)\n\t\t)\n\t);\n}\n\n/**\n * Get the output directory for JAR files. Defaults to getOutputDir() if none is\n * specified.\n * @return {string}\n */\nexport function getOutputDir() {\n\tconst jarConfig = getNormalizedJarConfig();\n\n\treturn prop.get(jarConfig, 'output-dir', base.getOutputDir());\n}\n\n/**\n * Get normalized JAR config as an object. Note that if JAR config is false this\n * method returns an object too so it only makes sense in a context where\n * cfg.isCreateJar() has already been checked and returned true.\n * @return {object}\n */\nfunction getNormalizedJarConfig() {\n\tif (config['create-jar'] === undefined) {\n\t\treturn {};\n\t}\n\n\tif (typeof config['create-jar'] !== 'object') {\n\t\treturn {};\n\t}\n\n\tconst jarConfig = config['create-jar'];\n\n\t// Make deprecation checks\n\tif (\n\t\t!notifiedWarnings.settings &&\n\t\tprop.get(jarConfig, 'features.settings') !== undefined\n\t) {\n\t\tnotifiedWarnings.settings = true;\n\n\t\tconsole.warn(\n\t\t\t'\\n' +\n\t\t\t\t\"ðŸ‘€ WARNING: configuration value 'create-jar.configuration.settings' is no longer supported\\n\" +\n\t\t\t\t'            (see https://tinyurl.com/settings-not-supported for more information)\\n'\n\t\t);\n\t}\n\n\treturn jarConfig;\n}\n"]}