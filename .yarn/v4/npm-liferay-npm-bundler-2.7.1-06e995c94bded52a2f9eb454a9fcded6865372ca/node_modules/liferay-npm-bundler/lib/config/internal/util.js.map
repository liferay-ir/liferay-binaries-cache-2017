{"version":3,"sources":["../../../src/config/internal/util.js"],"names":["init","configRequire","getPackageConfig","config","state","module","pluginFile","sync","basedir","pluginsBaseDir","require","pkg","section","defaultValue","undefined","pkgConfig","packages","id","name"],"mappings":";;;;;QAegBA,I,GAAAA,I;QASAC,a,GAAAA,a;QAiBAC,gB,GAAAA,gB;;AAnChB;;;;;;AAEA,IAAIC,eAAJ;;AAEA;;;;;AAVA;;;;;;AAeO,SAASH,IAAT,CAAcI,KAAd,EAAqB;AAC3BD,UAASC,MAAMD,MAAf;AACA;;AAED;;;;;AAKO,SAASF,aAAT,CAAuBI,MAAvB,EAA+B;AACrC,KAAMC,aAAa,kBAAcC,IAAd,CAAmBF,MAAnB,EAA2B;AAC7CG,WAASL,OAAOM;AAD6B,EAA3B,CAAnB;;AAIA,QAAOC,QAAQJ,UAAR,CAAP;AACA;;AAED;;;;;;;;;AASO,SAASJ,gBAAT,CAA0BS,GAA1B,EAA+BC,OAA/B,EAAkE;AAAA,KAA1BC,YAA0B,uEAAXC,SAAW;;AACxE,KAAIC,kBAAJ;;AAEA,KAAIZ,OAAOa,QAAP,CAAgBL,IAAIM,EAApB,KAA2Bd,OAAOa,QAAP,CAAgBL,IAAIM,EAApB,EAAwBL,OAAxB,CAA/B,EAAiE;AAChEG,cAAYZ,OAAOa,QAAP,CAAgBL,IAAIM,EAApB,EAAwBL,OAAxB,CAAZ;AACA,EAFD,MAEO,IACNT,OAAOa,QAAP,CAAgBL,IAAIO,IAApB,KACAf,OAAOa,QAAP,CAAgBL,IAAIO,IAApB,EAA0BN,OAA1B,CAFM,EAGL;AACDG,cAAYZ,OAAOa,QAAP,CAAgBL,IAAIO,IAApB,EAA0BN,OAA1B,CAAZ;AACA,EALM,MAKA,IAAIT,OAAOQ,IAAIM,EAAX,KAAkBd,OAAOQ,IAAIM,EAAX,EAAeL,OAAf,CAAtB,EAA+C;AACrDG,cAAYZ,OAAOQ,IAAIM,EAAX,EAAeL,OAAf,CAAZ;AACA,EAFM,MAEA,IAAIT,OAAOQ,IAAIO,IAAX,KAAoBf,OAAOQ,IAAIO,IAAX,EAAiBN,OAAjB,CAAxB,EAAmD;AACzDG,cAAYZ,OAAOQ,IAAIO,IAAX,EAAiBN,OAAjB,CAAZ;AACA,EAFM,MAEA,IAAIT,OAAO,GAAP,KAAeA,OAAO,GAAP,EAAYS,OAAZ,CAAnB,EAAyC;AAC/CG,cAAYZ,OAAO,GAAP,EAAYS,OAAZ,CAAZ;AACA,EAFM,MAEA;AACNG,cAAYF,YAAZ;AACA;;AAED,QAAOE,SAAP;AACA","file":"util.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport resolveModule from 'resolve';\n\nlet config;\n\n/**\n * Initialize submodule\n * @param {object} state\n * @return {void}\n */\nexport function init(state) {\n\tconfig = state.config;\n}\n\n/**\n * Require a module using the configured plugins directory.\n * @param {String} module a module name\n * @return {Object} the required module object\n */\nexport function configRequire(module) {\n\tconst pluginFile = resolveModule.sync(module, {\n\t\tbasedir: config.pluginsBaseDir,\n\t});\n\n\treturn require(pluginFile);\n}\n\n/**\n * Get a configuration for a specific package. This method looks in the packages\n * section, then at root in the precedence order: first package id, then package\n * name.\n * @param {PkgDesc} pkg the package descriptor\n * @param  {String} section the section name (like 'plugins', '.babelrc', ...)\n * @param  {Object} defaultValue default value if not configured\n * @return {Object} a configuration object\n */\nexport function getPackageConfig(pkg, section, defaultValue = undefined) {\n\tlet pkgConfig;\n\n\tif (config.packages[pkg.id] && config.packages[pkg.id][section]) {\n\t\tpkgConfig = config.packages[pkg.id][section];\n\t} else if (\n\t\tconfig.packages[pkg.name] &&\n\t\tconfig.packages[pkg.name][section]\n\t) {\n\t\tpkgConfig = config.packages[pkg.name][section];\n\t} else if (config[pkg.id] && config[pkg.id][section]) {\n\t\tpkgConfig = config[pkg.id][section];\n\t} else if (config[pkg.name] && config[pkg.name][section]) {\n\t\tpkgConfig = config[pkg.name][section];\n\t} else if (config['*'] && config['*'][section]) {\n\t\tpkgConfig = config['*'][section];\n\t} else {\n\t\tpkgConfig = defaultValue;\n\t}\n\n\treturn pkgConfig;\n}\n"]}