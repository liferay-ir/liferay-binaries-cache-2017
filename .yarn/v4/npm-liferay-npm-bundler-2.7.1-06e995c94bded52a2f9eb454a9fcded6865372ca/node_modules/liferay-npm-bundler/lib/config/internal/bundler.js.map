{"version":3,"sources":["../../../src/config/internal/bundler.js"],"names":["init","getExclusions","getIncludeDependencies","getPlugins","getMaxParallelFiles","config","state","pkg","exclusions","exclude","id","name","get","phase","pluginsKey","copy","pre","post","pluginNames","instantiatePlugins","map","pluginConfig","Array","isArray","pluginName","pluginModule","run","default"],"mappings":";;;;;QAiBgBA,I,GAAAA,I;QASAC,a,GAAAA,a;QAiCAC,sB,GAAAA,sB;QAUAC,U,GAAAA,U;QAgBAC,mB,GAAAA,mB;;AA/EhB;;;;AAEA;;;;AARA;;;;;;AAUA,IAAIC,eAAJ;;AAEA;;;;;AAKO,SAASL,IAAT,CAAcM,KAAd,EAAqB;AAC3BD,UAASC,MAAMD,MAAf;AACA;;AAED;;;;;AAKO,SAASJ,aAAT,CAAuBM,GAAvB,EAA4B;AAClC,KAAIC,aAAaH,OAAOI,OAAP,IAAkB,EAAnC;;AAEA;AACA,KACCD,WAAWD,IAAIG,EAAf,MAAuB,KAAvB,IACAF,WAAWD,IAAII,IAAf,MAAyB,KADzB,IAEAH,WAAW,GAAX,MAAoB,KAHrB,EAIE;AACD,SAAO,EAAP;AACA;;AAED;AACA,KACCA,WAAWD,IAAIG,EAAf,MAAuB,IAAvB,IACAF,WAAWD,IAAII,IAAf,MAAyB,IADzB,IAEAH,WAAW,GAAX,MAAoB,IAHrB,EAIE;AACD,SAAO,CAAC,MAAD,CAAP;AACA;;AAED;AACAA,cACCA,WAAWD,IAAIG,EAAf,KAAsBF,WAAWD,IAAII,IAAf,CAAtB,IAA8CH,WAAW,GAAX,CAA9C,IAAiE,EADlE;;AAGA,QAAOA,UAAP;AACA;;AAED;;;;;AAKO,SAASN,sBAAT,GAAkC;AACxC,QAAO,kBAAKU,GAAL,CAASP,MAAT,EAAiB,sBAAjB,EAAyC,EAAzC,CAAP;AACA;;AAED;;;;;;AAMO,SAASF,UAAT,CAAoBU,KAApB,EAA2BN,GAA3B,EAAgC;AACtC,KAAMO,aAAa;AAClBC,QAAM,cADY;AAElBC,OAAK,SAFa;AAGlBC,QAAM;AAHY,GAIjBJ,KAJiB,CAAnB;;AAMA,KAAMK,cAAc,4BAAiBX,GAAjB,EAAsBO,UAAtB,EAAkC,EAAlC,CAApB;;AAEA,QAAOK,mBAAmBD,WAAnB,CAAP;AACA;;AAED;;;;AAIO,SAASd,mBAAT,GAA+B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO,kBAAKQ,GAAL,CAASP,MAAT,EAAiB,oBAAjB,EAAuC,GAAvC,CAAP;AACA;;AAED;;;;;AAKA,SAASc,kBAAT,CAA4BD,WAA5B,EAAyC;AACxC,QAAOA,YAAYE,GAAZ,CAAgB,sBAAc;AACpC,MAAIC,eAAe,EAAnB;;AAEA,MAAIC,MAAMC,OAAN,CAAcC,UAAd,CAAJ,EAA+B;AAC9BH,kBAAeG,WAAW,CAAX,CAAf;AACAA,gBAAaA,WAAW,CAAX,CAAb;AACA;;AAED,MAAMC,eAAe,yDACUD,UADV,CAArB;;AAIA,SAAO;AACNb,SAAMa,UADA;AAENnB,WAAQgB,YAFF;AAGNK,QAAKD,aAAaE;AAHZ,GAAP;AAKA,EAjBM,CAAP;AAkBA","file":"bundler.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport prop from 'dot-prop';\n\nimport {configRequire, getPackageConfig} from './util';\n\nlet config;\n\n/**\n * Initialize submodule\n * @param {object} state\n * @return {void}\n */\nexport function init(state) {\n\tconfig = state.config;\n}\n\n/**\n * Get the configured file exclusions for a given package.\n * @param {PkgDesc} pkg the package descriptor\n * @return {Array} an array of glob expressions\n */\nexport function getExclusions(pkg) {\n\tlet exclusions = config.exclude || {};\n\n\t// If it is explicitly false, return an empty exclusions array\n\tif (\n\t\texclusions[pkg.id] === false ||\n\t\texclusions[pkg.name] === false ||\n\t\texclusions['*'] === false\n\t) {\n\t\treturn [];\n\t}\n\n\t// If it is explicitly true, return an array with '**/*'\n\tif (\n\t\texclusions[pkg.id] === true ||\n\t\texclusions[pkg.name] === true ||\n\t\texclusions['*'] === true\n\t) {\n\t\treturn ['**/*'];\n\t}\n\n\t// In any other case, return what's in the config\n\texclusions =\n\t\texclusions[pkg.id] || exclusions[pkg.name] || exclusions['*'] || [];\n\n\treturn exclusions;\n}\n\n/**\n * Extra dependencies to add to the final bundle (in addition to those listed\n * under the dependencies section of package.json).\n * @return {Array} an array of package names\n */\nexport function getIncludeDependencies() {\n\treturn prop.get(config, 'include-dependencies', []);\n}\n\n/**\n * Get the liferay-nmp-bundler plugins for a given package.\n * @param {String} phase 'pre', 'post' or 'copy'\n * @param {PkgDesc} pkg the package descriptor\n * @return {Array} the instantiated Babel plugins\n */\nexport function getPlugins(phase, pkg) {\n\tconst pluginsKey = {\n\t\tcopy: 'copy-plugins',\n\t\tpre: 'plugins',\n\t\tpost: 'post-plugins',\n\t}[phase];\n\n\tconst pluginNames = getPackageConfig(pkg, pluginsKey, []);\n\n\treturn instantiatePlugins(pluginNames);\n}\n\n/**\n * Get maximum number of files to process in parallel.\n * @return {number}\n */\nexport function getMaxParallelFiles() {\n\t// Default values for \"ulimit -n\" vary across different OSes. Some values\n\t// I have found are:\n\t//   - Apparently Mac OS X limit is 256 but usually people increase it\n\t//   - Fedora: 1024\n\t//   - Windows: there's no ulimit, but MSVCRT.DLL has a 2048 limit\n\t// Given this mess and the impossibility of retrieving the limit from Node,\n\t// I'm giving this a default value of 128 because it looks like it doesn't\n\t// impact performance and should be low enough to make it work in all OSes.\n\treturn prop.get(config, 'max-parallel-files', 128);\n}\n\n/**\n * Instantiate bundler plugins described by their names.\n * @param  {Array} pluginNames list of plugin names to instantiate\n * @return {Array} list of plugin descriptors with name, config and run fields\n */\nfunction instantiatePlugins(pluginNames) {\n\treturn pluginNames.map(pluginName => {\n\t\tlet pluginConfig = {};\n\n\t\tif (Array.isArray(pluginName)) {\n\t\t\tpluginConfig = pluginName[1];\n\t\t\tpluginName = pluginName[0];\n\t\t}\n\n\t\tconst pluginModule = configRequire(\n\t\t\t`liferay-npm-bundler-plugin-${pluginName}`\n\t\t);\n\n\t\treturn {\n\t\t\tname: pluginName,\n\t\t\tconfig: pluginConfig,\n\t\t\trun: pluginModule.default,\n\t\t};\n\t});\n}\n"]}