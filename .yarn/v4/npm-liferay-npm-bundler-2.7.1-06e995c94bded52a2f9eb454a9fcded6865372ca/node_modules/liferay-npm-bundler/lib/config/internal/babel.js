'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.getConfig = getConfig;
exports.getIgnore = getIgnore;
exports.loadBabelPlugins = loadBabelPlugins;

var _dotProp = require('dot-prop');

var _dotProp2 = _interopRequireDefault(_dotProp);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Â© 2017 Liferay, Inc. <https://liferay.com>
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * SPDX-License-Identifier: LGPL-3.0-or-later
                                                                                                                                                                                                     */

var config = void 0;

/**
 * Initialize submodule
 * @param {object} state
 * @return {void}
 */
function init(state) {
  config = state.config;
}

/**
 * Get Babel config for a given package
 * @param {PkgDesc} pkg the package descriptor
 * @return {Object} a Babel configuration object as defined by its API
 */
function getConfig(pkg) {
  return (0, _util.getPackageConfig)(pkg, '.babelrc', {});
}

/**
 * Get paths of files to be left untouched by babel
 * @return {Array} array of output-relative file paths to avoid when processing with Babel
 */
function getIgnore() {
  return _dotProp2.default.get(config, 'ignore');
}

/**
 * Load Babel plugins from a given array of presets and plugins.
 * @param {Array} presets an array of Babel preset names as defined by .babelrc
 * @param {Array} plugins an array of Babel plugins names as defined by .babelrc
 * @return {Array} the instantiated Babel plugins
 */
function loadBabelPlugins(presets, plugins) {
  var _ref;

  return (_ref = []).concat.apply(_ref, _toConsumableArray(presets.map(function (preset) {
    var presetModule = void 0;

    try {
      presetModule = (0, _util.configRequire)(preset);
    } catch (err) {
      presetModule = (0, _util.configRequire)('babel-preset-' + preset);
    }

    return presetModule.plugins || presetModule.default().plugins;
  }))).concat(plugins);
}
//# sourceMappingURL=babel.js.map