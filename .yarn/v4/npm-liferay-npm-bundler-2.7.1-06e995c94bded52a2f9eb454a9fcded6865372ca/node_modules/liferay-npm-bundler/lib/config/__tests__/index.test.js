'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cfg = require('..'); /**
                          * Â© 2017 Liferay, Inc. <https://liferay.com>
                          *
                          * SPDX-License-Identifier: LGPL-3.0-or-later
                          */

var savedCwd = process.cwd();

beforeEach(function () {
	process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'default'));
	cfg.reloadConfig();
});

afterEach(function () {
	process.chdir(savedCwd);
});

describe('deprecated config', function () {
	describe('.npmbundlerrc', function () {
		it('create-jar/auto-deploy-portlet', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'legacy-test-1'));
			cfg.reloadConfig();

			expect(cfg.jar.getRequireJsExtender()).toBe(false);
		});

		it('create-jar/web-context-path', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'legacy-test-1'));
			cfg.reloadConfig();

			expect(cfg.jar.getWebContextPath()).toBe('/my-portlet');
		});
	});

	describe('package.json', function () {
		it('osgi/web-context-path', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'legacy-test-2'));
			cfg.reloadConfig();

			expect(cfg.jar.getWebContextPath()).toBe('/my-portlet');
		});
	});
});

describe('global config', function () {
	describe('isCreateJar()', function () {
		it('returns false when config missing', function () {
			expect(cfg.isCreateJar()).toBeFalsy();
		});

		it('works with boolean config', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar-bool'));
			cfg.reloadConfig();

			expect(cfg.isCreateJar()).toBeTruthy();
		});

		it('works with Object config', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar'));
			cfg.reloadConfig();

			expect(cfg.isCreateJar()).toBeTruthy();
		});
	});

	it('getOutputDir() works', function () {
		expect(cfg.getOutputDir()).toEqual('output-dir');
	});

	it('getVersionsInfo() works', function () {
		var versions = cfg.getVersionsInfo();
		var myVersion = require('../../../package.json').version;

		expect(Object.keys(versions).length).toEqual(9);
		expect(versions['liferay-npm-bundler']).toEqual(myVersion);
		expect(versions['liferay-npm-bundler-plugin-test-0']).toEqual('1.0.0');
		expect(versions['liferay-npm-bundler-plugin-test-1']).toEqual('1.0.1');
		expect(versions['liferay-npm-bundler-plugin-test-2']).toEqual('1.0.2');
		expect(versions['liferay-npm-bundler-plugin-test-3']).toEqual('1.0.3');
		expect(versions['liferay-npm-bundler-plugin-test-4']).toEqual('1.0.4');
		expect(versions['liferay-npm-bundler-plugin-test-5']).toEqual('1.0.5');
		expect(versions['liferay-npm-bundler-plugin-test-6']).toEqual('1.0.6');
		expect(versions['liferay-npm-bundler-plugin-test-7']).toEqual('1.0.7');
	});
});

describe('babel config', function () {
	describe('getConfig()', function () {
		it('loads default config correctly', function () {
			var config = cfg.babel.getConfig({
				id: 'package-star@1.0.0',
				name: 'package-star',
				version: '1.0.0',
				dir: ''
			});

			expect(config).toEqual({ config: 'config-*' });
		});

		it('loads per-package config correctly when configured by id', function () {
			var config = cfg.babel.getConfig({
				id: 'package@1.0.0',
				name: 'package',
				version: '1.0.0',
				dir: ''
			});

			expect(config).toEqual({ config: 'config-package@1.0.0' });
		});

		it('loads per-package config correctly when configured by name', function () {
			var config = cfg.babel.getConfig({
				id: 'package2@1.0.0',
				name: 'package2',
				version: '1.0.0',
				dir: ''
			});

			expect(config).toEqual({ config: 'config-package2' });
		});
	});
});

describe('bundler config', function () {
	describe('getExclusions()', function () {
		it('works for unversioned packages', function () {
			var pkg = {
				id: 'package-a@2.0.0',
				name: 'package-a',
				version: '2.0.0',
				dir: ''
			};

			expect(cfg.bundler.getExclusions(pkg)).toEqual(['*']);
		});

		it('works for versioned packages', function () {
			var pkg = {
				id: 'package-b@1.0.0',
				name: 'package-b',
				version: '1.0.0',
				dir: ''
			};

			expect(cfg.bundler.getExclusions(pkg)).toEqual(['**/*.js', '**/*.css']);
		});

		it('returns the default exclusions for unconfigured packages', function () {
			var pkg = {
				id: 'not-existent-package@1.0.0',
				name: 'not-existent-package',
				version: '1.0.0',
				dir: ''
			};

			expect(cfg.bundler.getExclusions(pkg)).toEqual(['test/**/*']);
		});

		// Impossible to test once we test for default exclusions
		it('returns an empty array for unconfigured packages', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'empty'));
			cfg.reloadConfig();

			var pkg = {
				id: 'not-existent-package@1.0.0',
				name: 'not-existent-package',
				version: '1.0.0',
				dir: ''
			};

			expect(cfg.bundler.getExclusions(pkg)).toEqual([]);
		});
	});

	describe('getPlugins()', function () {
		it('loads default "pre" plugins correctly', function () {
			var plugins = cfg.bundler.getPlugins('pre', {
				id: 'package-star@1.0.0',
				name: 'package-star',
				version: '1.0.0',
				dir: ''
			});

			expect(plugins[0].run({}, {})).toEqual(0);
			expect(plugins[0].config).toEqual({});

			expect(plugins[1].run({}, {})).toEqual(1);
			expect(plugins[1].config).toEqual('config-1');
		});

		it('loads default "post" plugins correctly', function () {
			var plugins = cfg.bundler.getPlugins('post', {
				id: 'package-star@1.0.0',
				name: 'package-star',
				version: '1.0.0',
				dir: ''
			});

			expect(plugins[0].run({}, {})).toEqual(2);
			expect(plugins[0].config).toEqual({});

			expect(plugins[1].run({}, {})).toEqual(3);
			expect(plugins[1].config).toEqual('config-3');
		});

		it('loads per-package "pre" plugins correctly', function () {
			var plugins = cfg.bundler.getPlugins('pre', {
				id: 'package@1.0.0',
				name: 'package',
				version: '1.0.0',
				dir: ''
			});

			expect(plugins[0].run({}, {})).toEqual(4);
			expect(plugins[0].config).toEqual({});

			expect(plugins[1].run({}, {})).toEqual(5);
			expect(plugins[1].config).toEqual('config-5');
		});

		it('loads per-package "post" plugins correctly', function () {
			var plugins = cfg.bundler.getPlugins('post', {
				id: 'package@1.0.0',
				name: 'package',
				version: '1.0.0',
				dir: ''
			});

			expect(plugins[0].run({}, {})).toEqual(6);
			expect(plugins[0].config).toEqual({});

			expect(plugins[1].run({}, {})).toEqual(7);
			expect(plugins[1].config).toEqual('config-7');
		});

		it('supports legacy package configurations correctly', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'legacy-packages'));
			cfg.reloadConfig();

			var plugins = cfg.bundler.getPlugins('pre', {
				id: 'package@1.0.0',
				name: 'package',
				version: '1.0.0',
				dir: ''
			});
			expect(plugins[0].run({}, {})).toEqual(1);

			plugins = cfg.bundler.getPlugins('pre', {
				id: 'package2@1.0.0',
				name: 'package2',
				version: '1.0.0',
				dir: ''
			});
			expect(plugins[0].run({}, {})).toEqual(2);

			plugins = cfg.bundler.getPlugins('pre', {
				id: 'package3@1.0.0',
				name: 'package3',
				version: '1.0.0',
				dir: ''
			});
			expect(plugins[0].run({}, {})).toEqual(4);

			plugins = cfg.bundler.getPlugins('pre', {
				id: 'unconfigured-package@1.0.0',
				name: 'unconfigured-package',
				version: '1.0.0',
				dir: ''
			});
			expect(plugins[0].run({}, {})).toEqual(0);
		});
	});
});

describe('jar config', function () {
	describe('getOutputDir()', function () {
		it('works when specified in .npmbundlerrc', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar'));
			cfg.reloadConfig();

			expect(cfg.jar.getOutputDir()).toEqual('dist');
		});

		it('works when not set', function () {
			expect(cfg.jar.getOutputDir()).toEqual(cfg.getOutputDir());
		});
	});

	describe('getWebContextPath()', function () {
		it('works when specified in .npmbundlerrc', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar'));
			cfg.reloadConfig();

			expect(cfg.jar.getWebContextPath()).toEqual('/my-portlet');
		});

		it('works when not set', function () {
			expect(cfg.jar.getWebContextPath()).toEqual('/default-1.0.0');
		});
	});

	describe('getRequireJsExtender()', function () {
		it('returns true when create-jar config present and features/js-extender missing', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar-empty'));
			cfg.reloadConfig();

			expect(cfg.jar.getRequireJsExtender()).toBe(true);
		});

		it('returns false when create-jar config present and features/js-extender false', function () {
			process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'create-jar'));
			cfg.reloadConfig();

			expect(cfg.jar.getRequireJsExtender()).toBe(false);
		});
	});
});

describe('presets', function () {
	it('should work with existing presets', function () {
		process.chdir(_path2.default.join(__dirname, '__fixtures__', 'config', 'presets'));
		cfg.reloadConfig();

		var globalCfg = cfg.getGlobalConfig();

		expect(globalCfg.imports).toBeDefined();

		var expectedImports = ['an-osgi-module', 'frontend-js-metal-web', 'frontend-js-node-shims', 'frontend-js-spa-web', 'frontend-taglib', 'frontend-taglib-clay'];

		expectedImports.map(function (v) {
			expect(globalCfg.imports[v]).toBeDefined();
		});

		var anOsgiModuleImports = {
			d3: '>=3.0.0',
			react: '>=16.8.5'
		};

		expect(globalCfg.imports['an-osgi-module']).toMatchObject(anOsgiModuleImports);

		var frontendJsWebImports = {
			'/': '>=8.0.0'
		};

		expect(globalCfg.imports['frontend-js-web']).toMatchObject(frontendJsWebImports);

		var frontendJsNodeShimsImports = {
			assert: '>=1.2.0',
			buffer: '>=5.0.7',
			'console-browserify': '>=1.1.0',
			'domain-browser': '>=1.1.7',
			events: '>=1.1.1',
			'os-browserify': '>=0.3.0',
			'path-browserify': '>=0.0.0',
			process: '>=0.11.10',
			punycode: '>=1.3.1',
			'querystring-es3': '>=0.2.1',
			setimmediate: '>=1.0.0',
			string_decoder: '>=1.0.3',
			'timers-browserify': '>=2.0.4',
			'tty-browserify': '>=0.0.0',
			url: '>=0.11.0',
			util: '>=0.10.3',
			'vm-browserify': '>=0.0.4'
		};

		expect(globalCfg.imports['frontend-js-node-shims']).toMatchObject(frontendJsNodeShimsImports);

		expect(cfg.isDumpReport()).toBeTruthy();
	});
});
//# sourceMappingURL=index.test.js.map