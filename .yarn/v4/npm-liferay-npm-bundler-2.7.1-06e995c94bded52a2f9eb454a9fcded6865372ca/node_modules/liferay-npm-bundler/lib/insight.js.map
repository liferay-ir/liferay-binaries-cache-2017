{"version":3,"sources":["../src/insight.js"],"names":["init","GA_TOKEN","PROJECT_NAME","PROJECT_VERSION","insight","Promise","projectPkgJson","join","process","cwd","name","version","trackingCode","pkg","require","err","optOut","undefined","askPermission","resolve","track","args","config","get"],"mappings":";;;;;;QAqBgBA,I,GAAAA,I;;AAfhB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,WAAW,gBAAjB,C,CAVA;;;;;;AAYO,IAAIC,4CAAJ;AACA,IAAIC,kDAAJ;;AAEP,IAAIC,gBAAJ;;AAEA;;;;AAIO,SAASJ,IAAT,GAAgB;AACtB,QAAO,IAAIK,OAAJ,CAAY,mBAAW;AAC7B,MAAI;AACH,OAAMC,iBAAiB,4BACtB,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,cAAzB,CADsB,CAAvB;;AAIA,WAhBQP,YAgBR,kBAAeI,eAAeI,IAA9B;AACA,WAhBQP,eAgBR,qBAAkBG,eAAeK,OAAjC;;AAEAP,aAAU,sBAAY;AACrBQ,kBAAcX,QADO;AAErBY,SAAKC,QAAQ,iBAAR;AAFgB,IAAZ,CAAV;AAIA,GAZD,CAYE,OAAOC,GAAP,EAAY;AACb;AACA;;AAED,MAAIX,WAAWA,QAAQY,MAAR,KAAmBC,SAAlC,EAA6C;AAC5Cb,WAAQc,aAAR,CAAsBD,SAAtB,EAAiCE,OAAjC;AACA,GAFD,MAEO;AACNA;AACA;AACD,EAtBM,CAAP;AAuBA;;AAEM,IAAMC,wBAAQ,SAARA,KAAQ,GAAa;AAAA,mCAATC,IAAS;AAATA,MAAS;AAAA;;AACjC,KAAIjB,OAAJ,EAAa;AAAA;;AACZ,uBAAQgB,KAAR,kBACChB,QAAQkB,MAAR,CAAeC,GAAf,CAAmB,UAAnB,CADD,EAECnB,QAAQF,YAFT,SAGImB,IAHJ;AAKA;AACD,CARM","file":"insight.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Insight from 'insight';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\n\nconst GA_TOKEN = 'UA-37033501-13';\n\nexport let PROJECT_NAME;\nexport let PROJECT_VERSION;\n\nlet insight;\n\n/**\n * Initialize insight facility\n * @return {Promise} a promise fulfilled when initialization is done\n */\nexport function init() {\n\treturn new Promise(resolve => {\n\t\ttry {\n\t\t\tconst projectPkgJson = readJsonSync(\n\t\t\t\tpath.join(process.cwd(), 'package.json')\n\t\t\t);\n\n\t\t\tPROJECT_NAME = projectPkgJson.name;\n\t\t\tPROJECT_VERSION = projectPkgJson.version;\n\n\t\t\tinsight = new Insight({\n\t\t\t\ttrackingCode: GA_TOKEN,\n\t\t\t\tpkg: require('../package.json'),\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// ignore\n\t\t}\n\n\t\tif (insight && insight.optOut === undefined) {\n\t\t\tinsight.askPermission(undefined, resolve);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n}\n\nexport const track = (...args) => {\n\tif (insight) {\n\t\tinsight.track(\n\t\t\tinsight.config.get('clientId'),\n\t\t\tinsight.PROJECT_NAME,\n\t\t\t...args\n\t\t);\n\t}\n};\n"]}