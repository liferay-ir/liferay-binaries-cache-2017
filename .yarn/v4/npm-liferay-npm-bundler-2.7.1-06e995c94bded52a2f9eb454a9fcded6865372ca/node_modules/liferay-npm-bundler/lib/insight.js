'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.track = exports.PROJECT_VERSION = exports.PROJECT_NAME = undefined;
exports.init = init;

var _insight2 = require('insight');

var _insight3 = _interopRequireDefault(_insight2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GA_TOKEN = 'UA-37033501-13'; /**
                                  * Â© 2017 Liferay, Inc. <https://liferay.com>
                                  *
                                  * SPDX-License-Identifier: LGPL-3.0-or-later
                                  */

var PROJECT_NAME = exports.PROJECT_NAME = void 0;
var PROJECT_VERSION = exports.PROJECT_VERSION = void 0;

var insight = void 0;

/**
 * Initialize insight facility
 * @return {Promise} a promise fulfilled when initialization is done
 */
function init() {
	return new Promise(function (resolve) {
		try {
			var projectPkgJson = (0, _readJsonSync2.default)(_path2.default.join(process.cwd(), 'package.json'));

			exports.PROJECT_NAME = PROJECT_NAME = projectPkgJson.name;
			exports.PROJECT_VERSION = PROJECT_VERSION = projectPkgJson.version;

			insight = new _insight3.default({
				trackingCode: GA_TOKEN,
				pkg: require('../package.json')
			});
		} catch (err) {
			// ignore
		}

		if (insight && insight.optOut === undefined) {
			insight.askPermission(undefined, resolve);
		} else {
			resolve();
		}
	});
}

var track = exports.track = function track() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	if (insight) {
		var _insight;

		(_insight = insight).track.apply(_insight, [insight.config.get('clientId'), insight.PROJECT_NAME].concat(args));
	}
};
//# sourceMappingURL=insight.js.map