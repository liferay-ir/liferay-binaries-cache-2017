'use strict';

var _xml = require('../xml');

describe('addMetatypeAttr', function () {
	it('works with just the type', function () {
		var xml = (0, _xml.createMetatype)('id', 'name');
		(0, _xml.addMetatypeAttr)(xml, 'an-attr', {
			type: 'string'
		});

		expect(xml).toMatchSnapshot();
	});

	it('adds description if present', function () {
		var xml = (0, _xml.createMetatype)('id', 'name');
		(0, _xml.addMetatypeAttr)(xml, 'an-attr', {
			type: 'string',
			description: 'a-description'
		});

		expect(xml).toMatchSnapshot();
	});

	it('adds required if present', function () {
		var xml = (0, _xml.createMetatype)('id', 'name');
		(0, _xml.addMetatypeAttr)(xml, 'an-attr', {
			type: 'string',
			required: true
		});

		expect(xml).toMatchSnapshot();
	});

	it('adds default if present', function () {
		var xml = (0, _xml.createMetatype)('id', 'name');
		(0, _xml.addMetatypeAttr)(xml, 'an-attr', {
			type: 'string',
			default: 'default-value'
		});

		expect(xml).toMatchSnapshot();
	});

	it('adds options if present', function () {
		var xml = (0, _xml.createMetatype)('id', 'name');
		(0, _xml.addMetatypeAttr)(xml, 'an-attr', {
			type: 'string',
			options: {
				A: 'option-a',
				B: 'option-b'
			}
		});

		expect(xml).toMatchSnapshot();
	});
}); /**
     * Â© 2017 Liferay, Inc. <https://liferay.com>
     *
     * SPDX-License-Identifier: LGPL-3.0-or-later
     */

it('addMetatypeLocalization works', function () {
	var xml = (0, _xml.createMetatype)('id', 'name');
	(0, _xml.addMetatypeLocalization)(xml, 'localization/file.properties');

	expect(xml).toMatchSnapshot();
});

it('createMetatype works', function () {
	var xml = (0, _xml.createMetatype)('id', 'name');

	expect(xml).toMatchSnapshot();
});

it('all together works', function () {
	var xml = (0, _xml.createMetatype)('id', 'name');
	(0, _xml.addMetatypeLocalization)(xml, 'localization/file.properties');
	(0, _xml.addMetatypeAttr)(xml, 'a-number', { type: 'number' });
	(0, _xml.addMetatypeAttr)(xml, 'a-float', { type: 'float' });
	(0, _xml.addMetatypeAttr)(xml, 'a-string', { type: 'string' });
	(0, _xml.addMetatypeAttr)(xml, 'a-boolean', { type: 'boolean' });
	(0, _xml.addMetatypeAttr)(xml, 'an-option', {
		type: 'string',
		default: 'A',
		options: {
			A: 'option-a',
			B: 'option-b'
		}
	});

	expect((0, _xml.format)(xml)).toMatchSnapshot();
});
//# sourceMappingURL=xml.test.js.map