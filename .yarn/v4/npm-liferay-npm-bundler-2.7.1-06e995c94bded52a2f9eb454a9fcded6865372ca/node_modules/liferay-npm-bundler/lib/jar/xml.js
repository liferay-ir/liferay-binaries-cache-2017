'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


exports.addMetatypeAttr = addMetatypeAttr;
exports.addMetatypeLocalization = addMetatypeLocalization;
exports.createMetatype = createMetatype;
exports.format = format;

var _xmlJs = require('xml-js');

var TYPES = {
	boolean: 'Boolean',
	float: 'Double',
	number: 'Integer',
	password: 'Password',
	string: 'String'
};

/**
 * Add a metatype AD node to the XML
 * @param {object} metatype
 * @param {string} id id of field
 * @param {object} desc an object with type, name, description, required,
 * 			default, min, max and options fields
 */
function addMetatypeAttr(metatype, id, desc) {
	var metadata = findChild(metatype, 'metatype:MetaData');
	var ocd = findChild(metadata, 'OCD');
	var ad = addChild(ocd, 'AD');

	addAttr(ad, 'id', id);
	addAttr(ad, 'type', TYPES[desc.type]);
	addAttr(ad, 'name', desc.name || id);
	if (desc.description !== undefined) {
		addAttr(ad, 'description', desc.description);
	}
	addAttr(ad, 'cardinality', 0);
	if (desc.required !== undefined) {
		addAttr(ad, 'required', desc.required);
	}
	if (desc.default !== undefined) {
		addAttr(ad, 'default', desc.default);
	}
	if (desc.options) {
		Object.entries(desc.options).forEach(function (_ref) {
			var _ref2 = _slicedToArray(_ref, 2),
			    value = _ref2[0],
			    label = _ref2[1];

			var option = addChild(ad, 'Option');

			addAttr(option, 'label', label);
			addAttr(option, 'value', value);
		});
	}
}

/**
 *
 * @param {object} xml
 * @param {string} localization
 */
function addMetatypeLocalization(xml, localization) {
	var metadata = findChild(xml, 'metatype:MetaData');

	addAttr(metadata, 'localization', localization);
}

/**
 * @param {string} id id of configuration
 * @param {string} name human readable name of configuration
 * @return {object}
 */
function createMetatype(id, name) {
	return (0, _xmlJs.xml2js)('<?xml version="1.0" encoding="UTF-8"?>\n<metatype:MetaData xmlns:metatype="http://www.osgi.org/xmlns/metatype/v1.1.0">\n\t<OCD name="' + name + '" id="' + id + '"/>\n\t<Designate pid="' + id + '">\n\t\t<Object ocdref="' + id + '"/>\n\t</Designate>\n</metatype:MetaData>');
}

/**
 * Format an XML object and return it as a string.
 * @param {object} xml
 * @return {string}
 */
function format(xml) {
	return (0, _xmlJs.js2xml)(xml, { spaces: 2 });
}

/**
 * Add an attribute to an XML node.
 * @param {object} node
 * @param {string} name
 * @param {string} value
 */
function addAttr(node, name, value) {
	node.attributes = node.attributes || {};
	node.attributes[name] = value;
}

/**
 * Add a child node to an existing node.
 * @param {object} parentNode
 * @param {string} childName
 * @return {object} the child node
 */
function addChild(parentNode, childName) {
	var childNode = {
		type: 'element',
		name: childName,
		attributes: {},
		elements: []
	};

	parentNode.elements = parentNode.elements || [];
	parentNode.elements.push(childNode);

	return childNode;
}

/**
 * Find an XML child node creating it if necessary.
 * @param {object} parentNode
 * @param {string} childName
 * @param {boolean} create
 * @return {object} the child node
 */
function findChild(parentNode, childName) {
	var create = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	var elements = parentNode.elements || [];

	var childNode = elements.find(function (node) {
		return node.name == childName;
	});

	if (childNode === undefined && create) {
		childNode = {
			type: 'element',
			name: childName,
			attributes: {},
			elements: []
		};

		parentNode.elements = elements;
		parentNode.elements.push(childNode);
	}

	return childNode;
}
//# sourceMappingURL=xml.js.map