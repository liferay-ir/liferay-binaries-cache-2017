{"version":3,"sources":["../../src/jar/xml.js"],"names":["addMetatypeAttr","addMetatypeLocalization","createMetatype","format","TYPES","boolean","float","number","password","string","metatype","id","desc","metadata","findChild","ocd","ad","addChild","addAttr","type","name","description","undefined","required","default","options","Object","entries","forEach","value","label","option","xml","localization","spaces","node","attributes","parentNode","childName","childNode","elements","push","create","find"],"mappings":"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","file":"xml.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport {js2xml, xml2js} from 'xml-js';\n\nconst TYPES = {\n\tboolean: 'Boolean',\n\tfloat: 'Double',\n\tnumber: 'Integer',\n\tpassword: 'Password',\n\tstring: 'String',\n};\n\n/**\n * Add a metatype AD node to the XML\n * @param {object} metatype\n * @param {string} id id of field\n * @param {object} desc an object with type, name, description, required,\n * \t\t\tdefault, min, max and options fields\n */\nexport function addMetatypeAttr(metatype, id, desc) {\n\tconst metadata = findChild(metatype, 'metatype:MetaData');\n\tconst ocd = findChild(metadata, 'OCD');\n\tconst ad = addChild(ocd, 'AD');\n\n\taddAttr(ad, 'id', id);\n\taddAttr(ad, 'type', TYPES[desc.type]);\n\taddAttr(ad, 'name', desc.name || id);\n\tif (desc.description !== undefined) {\n\t\taddAttr(ad, 'description', desc.description);\n\t}\n\taddAttr(ad, 'cardinality', 0);\n\tif (desc.required !== undefined) {\n\t\taddAttr(ad, 'required', desc.required);\n\t}\n\tif (desc.default !== undefined) {\n\t\taddAttr(ad, 'default', desc.default);\n\t}\n\tif (desc.options) {\n\t\tObject.entries(desc.options).forEach(([value, label]) => {\n\t\t\tconst option = addChild(ad, 'Option');\n\n\t\t\taddAttr(option, 'label', label);\n\t\t\taddAttr(option, 'value', value);\n\t\t});\n\t}\n}\n\n/**\n *\n * @param {object} xml\n * @param {string} localization\n */\nexport function addMetatypeLocalization(xml, localization) {\n\tconst metadata = findChild(xml, 'metatype:MetaData');\n\n\taddAttr(metadata, 'localization', localization);\n}\n\n/**\n * @param {string} id id of configuration\n * @param {string} name human readable name of configuration\n * @return {object}\n */\nexport function createMetatype(id, name) {\n\treturn xml2js(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<metatype:MetaData xmlns:metatype=\"http://www.osgi.org/xmlns/metatype/v1.1.0\">\n\t<OCD name=\"${name}\" id=\"${id}\"/>\n\t<Designate pid=\"${id}\">\n\t\t<Object ocdref=\"${id}\"/>\n\t</Designate>\n</metatype:MetaData>`);\n}\n\n/**\n * Format an XML object and return it as a string.\n * @param {object} xml\n * @return {string}\n */\nexport function format(xml) {\n\treturn js2xml(xml, {spaces: 2});\n}\n\n/**\n * Add an attribute to an XML node.\n * @param {object} node\n * @param {string} name\n * @param {string} value\n */\nfunction addAttr(node, name, value) {\n\tnode.attributes = node.attributes || {};\n\tnode.attributes[name] = value;\n}\n\n/**\n * Add a child node to an existing node.\n * @param {object} parentNode\n * @param {string} childName\n * @return {object} the child node\n */\nfunction addChild(parentNode, childName) {\n\tconst childNode = {\n\t\ttype: 'element',\n\t\tname: childName,\n\t\tattributes: {},\n\t\telements: [],\n\t};\n\n\tparentNode.elements = parentNode.elements || [];\n\tparentNode.elements.push(childNode);\n\n\treturn childNode;\n}\n\n/**\n * Find an XML child node creating it if necessary.\n * @param {object} parentNode\n * @param {string} childName\n * @param {boolean} create\n * @return {object} the child node\n */\nfunction findChild(parentNode, childName, create = false) {\n\tconst elements = parentNode.elements || [];\n\n\tlet childNode = elements.find(node => node.name == childName);\n\n\tif (childNode === undefined && create) {\n\t\tchildNode = {\n\t\t\ttype: 'element',\n\t\t\tname: childName,\n\t\t\tattributes: {},\n\t\t\telements: [],\n\t\t};\n\n\t\tparentNode.elements = elements;\n\t\tparentNode.elements.push(childNode);\n\t}\n\n\treturn childNode;\n}\n"]}