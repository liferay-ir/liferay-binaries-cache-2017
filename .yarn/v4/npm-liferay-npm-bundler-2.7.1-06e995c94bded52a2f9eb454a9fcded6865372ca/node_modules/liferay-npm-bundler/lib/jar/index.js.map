{"version":3,"sources":["../../src/jar/index.js"],"names":["createJar","config","xml","ddm","pkgJson","join","jarFileName","name","version","zip","addManifest","addBuildFiles","addLocalizationFiles","addSystemConfigurationFiles","addPortletInstanceConfigurationFile","generateAsync","type","then","mkdirpSync","jar","getOutputDir","writeFileSync","buffer","addFiles","folder","srcDir","srcGlobs","destFolder","filePaths","sync","cwd","nodir","forEach","parts","filePath","split","sep","dirs","slice","length","reduce","dir","file","readFileSync","resourceBundleName","getLocalizationFile","resourceBundleDir","dirname","contents","bundlerVersion","getVersionsInfo","description","getWebContextPath","bundleName","basename","getRequireJsExtender","filter","minimumExtenderVersion","getMinimumExtenderVersion","systemConfigJson","getSystemConfigurationJson","localization","undefined","metatype","createMetatype","addMetatypeLocalization","fields","Object","entries","id","desc","addMetatypeAttr","format","metatypeJson","category","JSON","stringify","portletInstanceConfigJson","getPortletInstanceConfigurationJson","ddmJson","transformPreferences","requireJsExtender","minExtenderMinorVersion","Math","max","getConfigurationFile","configurationJson","readJSONSync","portletInstance","keys","system"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport JSZip from 'jszip';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\n\nimport * as config from '../config';\nimport * as xml from './xml';\nimport * as ddm from './ddm';\n\nconst pkgJson = readJsonSync(path.join('.', 'package.json'));\nconst jarFileName = `${pkgJson.name}-${pkgJson.version}.jar`;\n\n/**\n * Create an OSGi bundle with build's output\n * @return {Promise}\n */\nexport default function createJar() {\n\tconst zip = new JSZip();\n\n\taddManifest(zip);\n\taddBuildFiles(zip);\n\taddLocalizationFiles(zip);\n\taddSystemConfigurationFiles(zip);\n\taddPortletInstanceConfigurationFile(zip);\n\n\treturn zip.generateAsync({type: 'nodebuffer'}).then(buffer => {\n\t\tfs.mkdirpSync(config.jar.getOutputDir());\n\n\t\tfs.writeFileSync(\n\t\t\tpath.join(config.jar.getOutputDir(), jarFileName),\n\t\t\tbuffer\n\t\t);\n\t});\n}\n\n/**\n * Add build's output files to ZIP archive\n * @param {JSZip} zip the ZIP file\n */\nfunction addBuildFiles(zip) {\n\taddFiles(\n\t\tconfig.getOutputDir(),\n\t\t['**/*', `!${jarFileName}`],\n\t\tzip.folder('META-INF').folder('resources')\n\t);\n}\n\n/**\n * Add several files to a ZIP folder.\n * @param {string} srcDir source folder\n * @param {array} srcGlobs array of globs describing files to include\n * @param {JSZip} destFolder the destination folder in the ZIP file\n */\nfunction addFiles(srcDir, srcGlobs, destFolder) {\n\tconst filePaths = globby.sync(srcGlobs, {\n\t\tcwd: srcDir,\n\t\tnodir: true,\n\t});\n\n\tfilePaths.forEach(filePath => {\n\t\tconst parts = filePath.split(path.sep);\n\t\tconst dirs = parts.slice(0, parts.length - 1);\n\t\tconst name = parts[parts.length - 1];\n\n\t\tconst folder = dirs.reduce(\n\t\t\t(folder, dir) => folder.folder(dir),\n\t\t\tdestFolder\n\t\t);\n\n\t\tfolder.file(name, fs.readFileSync(path.join(srcDir, filePath)));\n\t});\n}\n\n/**\n * Add the localization bundle files if configured.\n * @param {JSZip} zip the ZIP file\n */\nfunction addLocalizationFiles(zip) {\n\tconst resourceBundleName = config.jar.getLocalizationFile();\n\n\tif (resourceBundleName) {\n\t\tconst resourceBundleDir = path.dirname(resourceBundleName);\n\n\t\taddFiles(resourceBundleDir, ['**/*'], zip.folder('content'));\n\t}\n}\n\n/**\n * Add the manifest file to the ZIP archive\n * @param {JSZip} zip the ZIP file\n */\nfunction addManifest(zip) {\n\tlet contents = '';\n\n\tconst bundlerVersion = config.getVersionsInfo()['liferay-npm-bundler'];\n\n\tcontents += `Manifest-Version: 1.0\\n`;\n\tcontents += `Bundle-ManifestVersion: 2\\n`;\n\n\tcontents += `Tool: liferay-npm-bundler-${bundlerVersion}\\n`;\n\n\tcontents += `Bundle-SymbolicName: ${pkgJson.name}\\n`;\n\tcontents += `Bundle-Version: ${pkgJson.version}\\n`;\n\tif (pkgJson.description) {\n\t\tcontents += `Bundle-Name: ${pkgJson.description}\\n`;\n\t}\n\n\tcontents += `Web-ContextPath: ${config.jar.getWebContextPath()}\\n`;\n\n\tcontents +=\n\t\t`Provide-Capability: osgi.webresource;` +\n\t\t`osgi.webresource=${pkgJson.name};` +\n\t\t`version:Version=\"${pkgJson.version}\"\\n`;\n\n\tif (config.jar.getLocalizationFile()) {\n\t\tconst bundleName = path.basename(config.jar.getLocalizationFile());\n\n\t\tcontents += `Provide-Capability: liferay.resource.bundle;`;\n\t\tcontents += `resource.bundle.base.name=\"content.${bundleName}\"\\n`;\n\t}\n\n\tif (config.jar.getRequireJsExtender()) {\n\t\tlet filter;\n\n\t\tconst minimumExtenderVersion = getMinimumExtenderVersion();\n\n\t\tif (minimumExtenderVersion) {\n\t\t\tfilter =\n\t\t\t\t`(&` +\n\t\t\t\t`(osgi.extender=liferay.frontend.js.portlet)` +\n\t\t\t\t`(version>=${minimumExtenderVersion})` +\n\t\t\t\t`)`;\n\t\t} else {\n\t\t\tfilter = `(osgi.extender=liferay.frontend.js.portlet)`;\n\t\t}\n\n\t\tcontents += `Require-Capability: osgi.extender;filter:=\"${filter}\"\\n`;\n\t}\n\n\tzip.folder('META-INF').file('MANIFEST.MF', contents);\n}\n\n/**\n * Add the settings files if configured.\n * @param {JSZip} zip the ZIP file\n */\nfunction addSystemConfigurationFiles(zip) {\n\tconst systemConfigJson = getSystemConfigurationJson();\n\n\tif (!systemConfigJson) {\n\t\treturn;\n\t}\n\n\t// Add OSGI-INF/metatype/metatype.xml file\n\tconst localization = config.jar.getLocalizationFile()\n\t\t? `content/${path.basename(config.jar.getLocalizationFile())}`\n\t\t: undefined;\n\n\tconst name =\n\t\tsystemConfigJson.name ||\n\t\t(localization ? pkgJson.name : pkgJson.description || pkgJson.name);\n\n\tconst metatype = xml.createMetatype(pkgJson.name, name);\n\n\tif (localization) {\n\t\txml.addMetatypeLocalization(metatype, localization);\n\t}\n\n\tconst fields = Object.entries(systemConfigJson.fields);\n\n\tfields.forEach(([id, desc]) => {\n\t\txml.addMetatypeAttr(metatype, id, desc);\n\t});\n\n\tzip.folder('OSGI-INF')\n\t\t.folder('metatype')\n\t\t.file(`${pkgJson.name}.xml`, xml.format(metatype));\n\n\t// Add features/metatype.json file\n\tconst metatypeJson = {};\n\n\tif (systemConfigJson.category) {\n\t\tmetatypeJson.category = systemConfigJson.category;\n\t}\n\n\tzip.folder('features').file(\n\t\t'metatype.json',\n\t\tJSON.stringify(metatypeJson, null, 2)\n\t);\n}\n\n/**\n * Add the portlet preferences file if configured.\n * @param {JSZip} zip the ZIP file\n */\nfunction addPortletInstanceConfigurationFile(zip) {\n\tconst portletInstanceConfigJson = getPortletInstanceConfigurationJson();\n\n\tif (!portletInstanceConfigJson) {\n\t\treturn;\n\t}\n\n\tconst ddmJson = ddm.transformPreferences(portletInstanceConfigJson);\n\n\tzip.folder('features').file(\n\t\t'portlet_preferences.json',\n\t\tJSON.stringify(ddmJson, null, 2)\n\t);\n}\n\n/**\n * Get the minimum extender version needed for the capabilities of this bundle\n * to work\n * @return {string|undefined} a version number or undefined if none is required\n */\nfunction getMinimumExtenderVersion() {\n\tconst requireJsExtender = config.jar.getRequireJsExtender();\n\n\tif (typeof requireJsExtender === 'string') {\n\t\tif (requireJsExtender === 'any') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn requireJsExtender;\n\t}\n\n\tlet minExtenderMinorVersion = 0;\n\n\tif (getSystemConfigurationJson()) {\n\t\tminExtenderMinorVersion = Math.max(minExtenderMinorVersion, 1);\n\t}\n\n\tif (getPortletInstanceConfigurationJson()) {\n\t\tminExtenderMinorVersion = Math.max(minExtenderMinorVersion, 1);\n\t}\n\n\treturn `1.${minExtenderMinorVersion}.0`;\n}\n\n/**\n * Get portlet instance configuration JSON object from getConfigurationFile()\n * file.\n * @return {object}\n */\nfunction getPortletInstanceConfigurationJson() {\n\tconst filePath = config.jar.getConfigurationFile();\n\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst configurationJson = fs.readJSONSync(filePath);\n\n\tif (\n\t\t!configurationJson.portletInstance ||\n\t\t!configurationJson.portletInstance.fields ||\n\t\tObject.keys(configurationJson.portletInstance.fields).length == 0\n\t) {\n\t\treturn undefined;\n\t}\n\n\treturn configurationJson.portletInstance;\n}\n\n/**\n * Get system configuration JSON object from getConfigurationFile() file.\n * @return {object}\n */\nfunction getSystemConfigurationJson() {\n\tconst filePath = config.jar.getConfigurationFile();\n\n\tif (!filePath) {\n\t\treturn undefined;\n\t}\n\n\tconst configurationJson = fs.readJSONSync(filePath);\n\n\tif (\n\t\t!configurationJson.system ||\n\t\t!configurationJson.system.fields ||\n\t\tObject.keys(configurationJson.system.fields).length == 0\n\t) {\n\t\treturn undefined;\n\t}\n\n\treturn configurationJson.system;\n}\n"]}