{"version":3,"sources":["../../src/jar/ddm.js"],"names":["transformPreferences","preferencesJson","availableLanguageIds","fields","Object","entries","map","name","props","field","label","localized","assign","getTypeProps","description","tip","default","predefinedValue","getPredefinedValue","required","undefined","options","forEach","key","value","push","json","JSON","stringify","replace","dataType","type","Error","string"],"mappings":";;;;;;;;QAWgBA,oB,GAAAA,oB;AAXhB;;;;;;AAMA;;;;;AAKO,SAASA,oBAAT,CAA8BC,eAA9B,EAA+C;AACrD,QAAO;AACNC,wBAAsB,EADhB;AAENC,UAAQC,OAAOC,OAAP,CAAeJ,gBAAgBE,MAA/B,EAAuCG,GAAvC,CAA2C,gBAAmB;AAAA;AAAA,OAAjBC,IAAiB;AAAA,OAAXC,KAAW;;AACrE,OAAMC,QAAQ;AACbF,cADa;AAEbG,WAAOC,UAAUH,MAAMD,IAAN,IAAcA,IAAxB;AAFM,IAAd;;AAKAH,UAAOQ,MAAP,CAAcH,KAAd,EAAqBI,aAAaL,KAAb,CAArB;;AAEA,OAAIA,MAAMM,WAAV,EAAuB;AACtBL,UAAMM,GAAN,GAAYJ,UAAUH,MAAMM,WAAhB,CAAZ;AACA;;AAED,OAAIN,MAAMQ,OAAV,EAAmB;AAClBP,UAAMQ,eAAN,GAAwBC,mBAAmBV,KAAnB,CAAxB;AACA;;AAED,OAAIA,MAAMW,QAAN,KAAmBC,SAAvB,EAAkC;AACjCX,UAAMU,QAAN,GAAiBX,MAAMW,QAAvB;AACA;;AAED,OAAIX,MAAMa,OAAV,EAAmB;AAClBZ,UAAMY,OAAN,GAAgB,EAAhB;;AAEAjB,WAAOC,OAAP,CAAeG,MAAMa,OAArB,EAA8BC,OAA9B,CAAsC,iBAAkB;AAAA;AAAA,SAAhBC,GAAgB;AAAA,SAAXC,KAAW;;AACvDf,WAAMY,OAAN,CAAcI,IAAd,CAAmB;AAClBD,aAAOD,GADW;AAElBb,aAAOC,UAAUa,KAAV;AAFW,MAAnB;AAIA,KALD;AAMA;;AAED,UAAOf,KAAP;AACA,GAhCO;AAFF,EAAP;AAoCA;;AAED;;;;;AAKA,SAASS,kBAAT,CAA4BV,KAA5B,EAAmC;AAClC,KAAIA,MAAMa,OAAV,EAAmB;AAClB;AACA;AACA,MAAIK,OAAOC,KAAKC,SAAL,CAAe,EAACJ,OAAO,CAAChB,MAAMQ,OAAP,CAAR,EAAf,EAAyC,IAAzC,EAA+C,CAA/C,CAAX;;AAEAU,SAAOA,KAAKG,OAAL,CAAa,gBAAb,EAA+B,IAA/B,CAAP;;AAEA,SAAOlB,UAAUe,IAAV,CAAP;AACA,EARD,MAQO;AACN,SAAOf,UAAUH,MAAMQ,OAAhB,CAAP;AACA;AACD;;AAED;;;;;AAKA,SAASH,YAAT,CAAsBL,KAAtB,EAA6B;AAC5B,KAAIA,MAAMa,OAAV,EAAmB;AAClB,SAAO;AACNS,aAAU,QADJ;AAENC,SAAM;AAFA,GAAP;AAIA;;AAED,SAAQvB,MAAMuB,IAAd;AACC,OAAK,QAAL;AACC,UAAO;AACND,cAAU,QADJ;AAENC,UAAM;AAFA,IAAP;;AAKD,OAAK,QAAL;AACC,UAAO;AACND,cAAU,QADJ;AAENC,UAAM;AAFA,IAAP;;AAKD,OAAK,OAAL;AACC,UAAO;AACND,cAAU,QADJ;AAENC,UAAM;AAFA,IAAP;;AAKD,OAAK,SAAL;AACC,UAAO;AACND,cAAU,SADJ;AAENC,UAAM;AAFA,IAAP;;AAKD,OAAK,UAAL;AACC,SAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;;AAED;AACC,SAAM,IAAIA,KAAJ,0BAAiCxB,MAAMuB,IAAvC,CAAN;AA7BF;AA+BA;;AAED;;;;;;AAMA,SAASpB,SAAT,CAAmBsB,MAAnB,EAA2B;AAC1B,QAAO;AACN,MAAIA;AADE,EAAP;AAGA","file":"ddm.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * Transform a preferences.json file into a DDM form JSON definition\n * @param {object} preferencesJson a preferences JSON object\n * @return {object} a DDM form JSON object\n */\nexport function transformPreferences(preferencesJson) {\n\treturn {\n\t\tavailableLanguageIds: [],\n\t\tfields: Object.entries(preferencesJson.fields).map(([name, props]) => {\n\t\t\tconst field = {\n\t\t\t\tname,\n\t\t\t\tlabel: localized(props.name || name),\n\t\t\t};\n\n\t\t\tObject.assign(field, getTypeProps(props));\n\n\t\t\tif (props.description) {\n\t\t\t\tfield.tip = localized(props.description);\n\t\t\t}\n\n\t\t\tif (props.default) {\n\t\t\t\tfield.predefinedValue = getPredefinedValue(props);\n\t\t\t}\n\n\t\t\tif (props.required !== undefined) {\n\t\t\t\tfield.required = props.required;\n\t\t\t}\n\n\t\t\tif (props.options) {\n\t\t\t\tfield.options = [];\n\n\t\t\t\tObject.entries(props.options).forEach(([key, value]) => {\n\t\t\t\t\tfield.options.push({\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\tlabel: localized(value),\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn field;\n\t\t}),\n\t};\n}\n\n/**\n * Get a predefinedValue DDM object for a given field\n * @param {object} props the field props (in preferences.json format)\n * @return {*} the predefinedValue DDM object\n */\nfunction getPredefinedValue(props) {\n\tif (props.options) {\n\t\t// DDM uses JSON inside a JSON, so we do this to make sure this code is\n\t\t// maintenable and doesn't break anything\n\t\tlet json = JSON.stringify({value: [props.default]}, null, 0);\n\n\t\tjson = json.replace(/{\"value\":(.*)}/, '$1');\n\n\t\treturn localized(json);\n\t} else {\n\t\treturn localized(props.default);\n\t}\n}\n\n/**\n * Get the dataType and type DDM properties of a given field\n * @param {object} props the field props (in preferences.json format)\n * @return {object} an object containing the dataType and type properties\n */\nfunction getTypeProps(props) {\n\tif (props.options) {\n\t\treturn {\n\t\t\tdataType: 'string',\n\t\t\ttype: 'select',\n\t\t};\n\t}\n\n\tswitch (props.type) {\n\t\tcase 'string':\n\t\t\treturn {\n\t\t\t\tdataType: 'string',\n\t\t\t\ttype: 'text',\n\t\t\t};\n\n\t\tcase 'number':\n\t\t\treturn {\n\t\t\t\tdataType: 'number',\n\t\t\t\ttype: 'ddm-number',\n\t\t\t};\n\n\t\tcase 'float':\n\t\t\treturn {\n\t\t\t\tdataType: 'double',\n\t\t\t\ttype: 'ddm-decimal',\n\t\t\t};\n\n\t\tcase 'boolean':\n\t\t\treturn {\n\t\t\t\tdataType: 'boolean',\n\t\t\t\ttype: 'checkbox',\n\t\t\t};\n\n\t\tcase 'password':\n\t\t\tthrow new Error('Password fields are not supported in preferences');\n\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown field type: ${props.type}`);\n\t}\n}\n\n/**\n * Transform a string into a localized DDM value (the string is used as the\n * default locale value)\n * @param {string} string the string to localize\n * @return {object} the DDM localized value\n */\nfunction localized(string) {\n\treturn {\n\t\t'': string,\n\t};\n}\n"]}