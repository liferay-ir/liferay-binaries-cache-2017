'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * SPDX-License-Identifier: LGPL-3.0-or-later


exports.default = createJar;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _jszip = require('jszip');

var _jszip2 = _interopRequireDefault(_jszip);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

var _config = require('../config');

var config = _interopRequireWildcard(_config);

var _xml = require('./xml');

var xml = _interopRequireWildcard(_xml);

var _ddm = require('./ddm');

var ddm = _interopRequireWildcard(_ddm);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pkgJson = (0, _readJsonSync2.default)(_path2.default.join('.', 'package.json'));
var jarFileName = pkgJson.name + '-' + pkgJson.version + '.jar';

/**
 * Create an OSGi bundle with build's output
 * @return {Promise}
 */
function createJar() {
	var zip = new _jszip2.default();

	addManifest(zip);
	addBuildFiles(zip);
	addLocalizationFiles(zip);
	addSystemConfigurationFiles(zip);
	addPortletInstanceConfigurationFile(zip);

	return zip.generateAsync({ type: 'nodebuffer' }).then(function (buffer) {
		_fsExtra2.default.mkdirpSync(config.jar.getOutputDir());

		_fsExtra2.default.writeFileSync(_path2.default.join(config.jar.getOutputDir(), jarFileName), buffer);
	});
}

/**
 * Add build's output files to ZIP archive
 * @param {JSZip} zip the ZIP file
 */
function addBuildFiles(zip) {
	addFiles(config.getOutputDir(), ['**/*', '!' + jarFileName], zip.folder('META-INF').folder('resources'));
}

/**
 * Add several files to a ZIP folder.
 * @param {string} srcDir source folder
 * @param {array} srcGlobs array of globs describing files to include
 * @param {JSZip} destFolder the destination folder in the ZIP file
 */
function addFiles(srcDir, srcGlobs, destFolder) {
	var filePaths = _globby2.default.sync(srcGlobs, {
		cwd: srcDir,
		nodir: true
	});

	filePaths.forEach(function (filePath) {
		var parts = filePath.split(_path2.default.sep);
		var dirs = parts.slice(0, parts.length - 1);
		var name = parts[parts.length - 1];

		var folder = dirs.reduce(function (folder, dir) {
			return folder.folder(dir);
		}, destFolder);

		folder.file(name, _fsExtra2.default.readFileSync(_path2.default.join(srcDir, filePath)));
	});
}

/**
 * Add the localization bundle files if configured.
 * @param {JSZip} zip the ZIP file
 */
function addLocalizationFiles(zip) {
	var resourceBundleName = config.jar.getLocalizationFile();

	if (resourceBundleName) {
		var resourceBundleDir = _path2.default.dirname(resourceBundleName);

		addFiles(resourceBundleDir, ['**/*'], zip.folder('content'));
	}
}

/**
 * Add the manifest file to the ZIP archive
 * @param {JSZip} zip the ZIP file
 */
function addManifest(zip) {
	var contents = '';

	var bundlerVersion = config.getVersionsInfo()['liferay-npm-bundler'];

	contents += 'Manifest-Version: 1.0\n';
	contents += 'Bundle-ManifestVersion: 2\n';

	contents += 'Tool: liferay-npm-bundler-' + bundlerVersion + '\n';

	contents += 'Bundle-SymbolicName: ' + pkgJson.name + '\n';
	contents += 'Bundle-Version: ' + pkgJson.version + '\n';
	if (pkgJson.description) {
		contents += 'Bundle-Name: ' + pkgJson.description + '\n';
	}

	contents += 'Web-ContextPath: ' + config.jar.getWebContextPath() + '\n';

	contents += 'Provide-Capability: osgi.webresource;' + ('osgi.webresource=' + pkgJson.name + ';') + ('version:Version="' + pkgJson.version + '"\n');

	if (config.jar.getLocalizationFile()) {
		var bundleName = _path2.default.basename(config.jar.getLocalizationFile());

		contents += 'Provide-Capability: liferay.resource.bundle;';
		contents += 'resource.bundle.base.name="content.' + bundleName + '"\n';
	}

	if (config.jar.getRequireJsExtender()) {
		var filter = void 0;

		var minimumExtenderVersion = getMinimumExtenderVersion();

		if (minimumExtenderVersion) {
			filter = '(&' + '(osgi.extender=liferay.frontend.js.portlet)' + ('(version>=' + minimumExtenderVersion + ')') + ')';
		} else {
			filter = '(osgi.extender=liferay.frontend.js.portlet)';
		}

		contents += 'Require-Capability: osgi.extender;filter:="' + filter + '"\n';
	}

	zip.folder('META-INF').file('MANIFEST.MF', contents);
}

/**
 * Add the settings files if configured.
 * @param {JSZip} zip the ZIP file
 */
function addSystemConfigurationFiles(zip) {
	var systemConfigJson = getSystemConfigurationJson();

	if (!systemConfigJson) {
		return;
	}

	// Add OSGI-INF/metatype/metatype.xml file
	var localization = config.jar.getLocalizationFile() ? 'content/' + _path2.default.basename(config.jar.getLocalizationFile()) : undefined;

	var name = systemConfigJson.name || (localization ? pkgJson.name : pkgJson.description || pkgJson.name);

	var metatype = xml.createMetatype(pkgJson.name, name);

	if (localization) {
		xml.addMetatypeLocalization(metatype, localization);
	}

	var fields = Object.entries(systemConfigJson.fields);

	fields.forEach(function (_ref) {
		var _ref2 = _slicedToArray(_ref, 2),
		    id = _ref2[0],
		    desc = _ref2[1];

		xml.addMetatypeAttr(metatype, id, desc);
	});

	zip.folder('OSGI-INF').folder('metatype').file(pkgJson.name + '.xml', xml.format(metatype));

	// Add features/metatype.json file
	var metatypeJson = {};

	if (systemConfigJson.category) {
		metatypeJson.category = systemConfigJson.category;
	}

	zip.folder('features').file('metatype.json', JSON.stringify(metatypeJson, null, 2));
}

/**
 * Add the portlet preferences file if configured.
 * @param {JSZip} zip the ZIP file
 */
function addPortletInstanceConfigurationFile(zip) {
	var portletInstanceConfigJson = getPortletInstanceConfigurationJson();

	if (!portletInstanceConfigJson) {
		return;
	}

	var ddmJson = ddm.transformPreferences(portletInstanceConfigJson);

	zip.folder('features').file('portlet_preferences.json', JSON.stringify(ddmJson, null, 2));
}

/**
 * Get the minimum extender version needed for the capabilities of this bundle
 * to work
 * @return {string|undefined} a version number or undefined if none is required
 */
function getMinimumExtenderVersion() {
	var requireJsExtender = config.jar.getRequireJsExtender();

	if (typeof requireJsExtender === 'string') {
		if (requireJsExtender === 'any') {
			return undefined;
		}

		return requireJsExtender;
	}

	var minExtenderMinorVersion = 0;

	if (getSystemConfigurationJson()) {
		minExtenderMinorVersion = Math.max(minExtenderMinorVersion, 1);
	}

	if (getPortletInstanceConfigurationJson()) {
		minExtenderMinorVersion = Math.max(minExtenderMinorVersion, 1);
	}

	return '1.' + minExtenderMinorVersion + '.0';
}

/**
 * Get portlet instance configuration JSON object from getConfigurationFile()
 * file.
 * @return {object}
 */
function getPortletInstanceConfigurationJson() {
	var filePath = config.jar.getConfigurationFile();

	if (!filePath) {
		return undefined;
	}

	var configurationJson = _fsExtra2.default.readJSONSync(filePath);

	if (!configurationJson.portletInstance || !configurationJson.portletInstance.fields || Object.keys(configurationJson.portletInstance.fields).length == 0) {
		return undefined;
	}

	return configurationJson.portletInstance;
}

/**
 * Get system configuration JSON object from getConfigurationFile() file.
 * @return {object}
 */
function getSystemConfigurationJson() {
	var filePath = config.jar.getConfigurationFile();

	if (!filePath) {
		return undefined;
	}

	var configurationJson = _fsExtra2.default.readJSONSync(filePath);

	if (!configurationJson.system || !configurationJson.system.fields || Object.keys(configurationJson.system.fields).length == 0) {
		return undefined;
	}

	return configurationJson.system;
}
//# sourceMappingURL=index.js.map