{"version":3,"sources":["../src/manifest.js"],"names":["config","Manifest","filePath","_filePath","_data","JSON","parse","readFileSync","err","code","packages","srcPkg","destPkg","cwd","process","id","src","name","version","dir","resolve","substring","length","dest","isRoot","entry","undefined","existsSync","Error","writeFileSync","toJSON","stringify","manifest","join","getOutputDir"],"mappings":";;;;;;;qjBAAA;;;;;;AAMA;;;;AACA;;;;AAEA;;IAAYA,M;;;;;;;;AAEZ;;;;;IAKaC,Q,WAAAA,Q;AACZ;;;;AAIA,qBAA6B;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AAAA;;AAC5B,MAAIA,QAAJ,EAAc;AACb,QAAKC,SAAL,GAAiBD,QAAjB;;AAEA,OAAI;AACH,SAAKE,KAAL,GAAaC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBL,QAAhB,CAAX,CAAb;AACA;AACA,IAHD,CAGE,OAAOM,GAAP,EAAY;AACb,QAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AAC1B,WAAMD,GAAN;AACA;AACD;AACD;;AAED,OAAKJ,KAAL,GAAa;AACZM,aAAU;AADE,GAAb;AAGA;;AAED;;;;;;;;;6BAKWC,M,EAAQC,O,EAAS;AAC3B,OAAMC,MAAMC,QAAQD,GAAR,EAAZ;;AAEA,QAAKT,KAAL,CAAWM,QAAX,CAAoBC,OAAOI,EAA3B,IAAiC;AAChCC,SAAK;AACJD,SAAIJ,OAAOI,EADP;AAEJE,WAAMN,OAAOM,IAFT;AAGJC,cAASP,OAAOO,OAHZ;AAIJC,gBAAS,eAAKC,OAAL,CAAaT,OAAOQ,GAApB,EAAyBE,SAAzB,CAAmCR,IAAIS,MAAvC;AAJL,KAD2B;AAOhCC,UAAM;AACLR,SAAIH,QAAQG,EADP;AAELE,WAAML,QAAQK,IAFT;AAGLC,cAASN,QAAQM,OAHZ;AAILC,gBAAS,eAAKC,OAAL,CAAaR,QAAQO,GAArB,EAA0BE,SAA1B,CAAoCR,IAAIS,MAAxC;AAJJ;AAP0B,IAAjC;AAcA;;AAED;;;;;;;;6BAKWX,M,EAAQ;AAClB,UAAO,KAAKP,KAAL,CAAWM,QAAX,CAAoBC,OAAOI,EAA3B,CAAP;AACA;;AAED;;;;;;;;6BAKWJ,M,EAAQ;AAClB;AACA;AACA,OAAIA,OAAOa,MAAX,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,OAAMC,QAAQ,KAAKrB,KAAL,CAAWM,QAAX,CAAoBC,OAAOI,EAA3B,CAAd;;AAEA,OAAIU,UAAUC,SAAd,EAAyB;AACxB,WAAO,IAAP;AACA;;AAED,OAAI,CAAC,aAAGC,UAAH,CAAcF,MAAMF,IAAN,CAAWJ,GAAzB,CAAL,EAAoC;AACnC,WAAO,IAAP;AACA;;AAED,UAAO,KAAP;AACA;;AAED;;;;;;;;yBAKsB;AAAA,OAAjBjB,QAAiB,uEAAN,IAAM;;AACrBA,cAAWA,YAAY,KAAKC,SAA5B;;AAEA,OAAID,aAAawB,SAAjB,EAA4B;AAC3B,UAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACA;;AAED,gBAAGC,aAAH,CAAiB3B,QAAjB,EAA2B,KAAK4B,MAAL,EAA3B;AACA;;AAED;;;;;;;2BAIS;AACR,UAAOzB,KAAK0B,SAAL,CAAe,KAAK3B,KAApB,EAA2B,IAA3B,EAAiC,CAAjC,CAAP;AACA;;;;;;AAGF,IAAM4B,WAAW,IAAI/B,QAAJ,CAChB,eAAKgC,IAAL,CAAUjC,OAAOkC,YAAP,EAAV,EAAiC,eAAjC,CADgB,CAAjB;;kBAIeF,Q","file":"manifest.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport * as config from './config';\n\n/**\n * A class to hold information about processed modules and optionally dump/read\n * it to/from disk.\n * @type {Manifest}\n */\nexport class Manifest {\n\t/**\n\t * Constructor\n\t * @param {String} filePath an optional path to a file to load initial status\n\t */\n\tconstructor(filePath = null) {\n\t\tif (filePath) {\n\t\t\tthis._filePath = filePath;\n\n\t\t\ttry {\n\t\t\t\tthis._data = JSON.parse(fs.readFileSync(filePath));\n\t\t\t\treturn;\n\t\t\t} catch (err) {\n\t\t\t\tif (err.code !== 'ENOENT') {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._data = {\n\t\t\tpackages: {},\n\t\t};\n\t}\n\n\t/**\n\t * Add a processed package entry\n\t * @param {PkgDesc} srcPkg the source package descriptor\n\t * @param {PkgDesc} destPkg the destination package descriptor\n\t */\n\taddPackage(srcPkg, destPkg) {\n\t\tconst cwd = process.cwd();\n\n\t\tthis._data.packages[srcPkg.id] = {\n\t\t\tsrc: {\n\t\t\t\tid: srcPkg.id,\n\t\t\t\tname: srcPkg.name,\n\t\t\t\tversion: srcPkg.version,\n\t\t\t\tdir: `.${path.resolve(srcPkg.dir).substring(cwd.length)}`,\n\t\t\t},\n\t\t\tdest: {\n\t\t\t\tid: destPkg.id,\n\t\t\t\tname: destPkg.name,\n\t\t\t\tversion: destPkg.version,\n\t\t\t\tdir: `.${path.resolve(destPkg.dir).substring(cwd.length)}`,\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Get a processed package entry\n\t * @param {PkgDesc} srcPkg the source package descriptor\n\t * @return {Object} the processed package entry (see addPackage for format description)\n\t */\n\tgetPackage(srcPkg) {\n\t\treturn this._data.packages[srcPkg.id];\n\t}\n\n\t/**\n\t * Tests whether a package must be regenerated\n\t * @param {PkgDesc} srcPkg the source package descriptor\n\t * @return {Boolean} true if package is outdated\n\t */\n\tisOutdated(srcPkg) {\n\t\t// Unless we use real timestamps or digests, we cannot detect reliably\n\t\t// if the root package is outdated or up-to-date.\n\t\tif (srcPkg.isRoot) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst entry = this._data.packages[srcPkg.id];\n\n\t\tif (entry === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!fs.existsSync(entry.dest.dir)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Save current manifest to a file\n\t * @param  {String} filePath path to file or null to use default path\n\t * @return {void}\n\t */\n\tsave(filePath = null) {\n\t\tfilePath = filePath || this._filePath;\n\n\t\tif (filePath === undefined) {\n\t\t\tthrow new Error('No file path given and no default path set');\n\t\t}\n\n\t\tfs.writeFileSync(filePath, this.toJSON());\n\t}\n\n\t/**\n\t * Return the JSON serialization of this manifest\n\t * @return {String}\n\t */\n\ttoJSON() {\n\t\treturn JSON.stringify(this._data, null, 2);\n\t}\n}\n\nconst manifest = new Manifest(\n\tpath.join(config.getOutputDir(), 'manifest.json')\n);\n\nexport default manifest;\n"]}