{"version":3,"sources":["../src/ClayLink.js"],"names":["ClayLink","ClayComponent","STATE","ariaLabel","Config","string","ariaExpanded","bool","buttonStyle","oneOf","data","object","defaultEventHandler","download","elementClasses","href","icon","iconAlignment","value","id","imageAlt","imageSrc","label","any","spritemap","style","target","title","Soy","register","templates"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,Q;;;;;;;;;;EAAiBC,uB;;AAEvB;;;;;;;AAKAD,SAASE,KAAT,GAAiB;AAChB;;;;;;;AAOAC,YAAWC,mBAAOC,MAAP,EARK;;AAUhB;;;;;;;AAOAC,eAAcF,mBAAOG,IAAP,EAjBE;;AAmBhB;;;;;;;;AAQAC,cAAaJ,mBAAOK,KAAP,CAAa,CAAC,MAAD,EAAS,SAAT,EAAoB,WAApB,CAAb,CA3BG;;AA6BhB;;;;;;;AAOAC,OAAMN,mBAAOO,MAAP,EApCU;;AAsChB;;;;;;;;AAQAC,sBAAqBR,mBAAOO,MAAP,EA9CL;;AAgDhB;;;;;;;AAOAE,WAAUT,mBAAOC,MAAP,EAvDM;;AAyDhB;;;;;;;AAOAS,iBAAgBV,mBAAOC,MAAP,EAhEA;;AAkEhB;;;;;;;AAOAU,OAAMX,mBAAOC,MAAP,EAzEU;;AA2EhB;;;;;;;AAOAW,OAAMZ,mBAAOC,MAAP,EAlFU;;AAoFhB;;;;;;;AAOAY,gBAAeb,mBAAOK,KAAP,CAAa,CAAC,MAAD,EAAS,OAAT,CAAb,EAAgCS,KAAhC,CAAsC,MAAtC,CA3FC;;AA6FhB;;;;;;;AAOAC,KAAIf,mBAAOC,MAAP,EApGY;;AAsGhB;;;;;;;AAOAe,WAAUhB,mBAAOC,MAAP,EA7GM;;AA+GhB;;;;;;;AAOAgB,WAAUjB,mBAAOC,MAAP,EAtHM;;AAwHhB;;;;;;;AAOAiB,QAAOlB,mBAAOmB,GAAP,EA/HS;;AAiIhB;;;;;;;AAOAC,YAAWpB,mBAAOC,MAAP,EAxIK;;AA0IhB;;;;;;;AAOAoB,QAAOrB,mBAAOK,KAAP,CAAa,CAAC,WAAD,CAAb,CAjJS;;AAmJhB;;;;;;;AAOAiB,SAAQtB,mBAAOK,KAAP,CAAa,CAAC,QAAD,EAAW,OAAX,CAAb,CA1JQ;;AA4JhB;;;;;;;AAOAkB,QAAOvB,mBAAOC,MAAP;AAnKS,CAAjB;;AAsKA,iCAAmB,WAAnB,EAAgCL,QAAhC;;AAEA4B,mBAAIC,QAAJ,CAAa7B,QAAb,EAAuB8B,qBAAvB;;QAEQ9B,Q,GAAAA,Q;kBACOA,Q","file":"ClayLink.js","sourcesContent":["import 'clay-icon';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayLink.soy.js';\n\n/**\n * Implementation of the Metal Clay Link.\n * @extends ClayComponent\n */\nclass ClayLink extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayLink.STATE = {\n\t/**\n\t * Aria label attribute for the anchor element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\tariaLabel: Config.string(),\n\n\t/**\n\t * Aria Expanded attribute for the anchor element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(bool|undefined)}\n\t */\n\tariaExpanded: Config.bool(),\n\n\t/**\n\t * The css class to act as a button. If this is defined `style` param is\n\t * ignored.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\tbuttonStyle: Config.oneOf(['link', 'primary', 'secondary']),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Sets the download attribute on the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\tdownload: Config.string(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Sets the HTML attribute href on the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Icon to be rendered in the link.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Render position of the ClayIcon in the ClayLink element.\n\t * @default left\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?string}\n\t */\n\ticonAlignment: Config.oneOf(['left', 'right']).value('left'),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Alternative text of the image to be rendered inside the link.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\timageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered inside the link.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\timageSrc: Config.string(),\n\n\t/**\n\t * Sets the text or HTML to be rendered inside the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?string|undefined}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * The css class that colors the button.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\tstyle: Config.oneOf(['secondary']),\n\n\t/**\n\t * Sets the HTML attribute target on the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\ttarget: Config.oneOf(['_blank', '_self']),\n\n\t/**\n\t * Sets the HTML attribute title on the anchor tag.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLink\n\t * @type {?(string|undefined)}\n\t */\n\ttitle: Config.string(),\n};\n\ndefineWebComponent('clay-link', ClayLink);\n\nSoy.register(ClayLink, templates);\n\nexport {ClayLink};\nexport default ClayLink;\n"]}