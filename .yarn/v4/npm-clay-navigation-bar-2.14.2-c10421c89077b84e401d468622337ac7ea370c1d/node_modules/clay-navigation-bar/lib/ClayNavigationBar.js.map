{"version":3,"sources":["../src/ClayNavigationBar.js"],"names":["ClayNavigationBar","addListener","_handleTransitionEnd","_isTransitioning","_setCollapseHeight","_visible","_removeCollapseHeight","event","preventDefault","element","delegateTarget","index","getAttribute","item","items","emit","data","name","originalEvent","refs","content","target","style","removeProperty","elementCollapse","setAttribute","children","clientHeight","ClayComponent","STATE","Config","bool","value","internal","object","defaultEventHandler","elementClasses","string","id","inverted","arrayOf","shapeOf","active","href","required","label","spritemap","Soy","register","templates"],"mappings":"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","file":"ClayNavigationBar.js","sourcesContent":["import 'clay-link';\nimport ClayComponent from 'clay-component';\nimport {Config} from 'metal-state';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayNavigationBar.soy.js';\n\n/**\n * Metal Clay Navbar component.\n * @extends ClayComponent\n */\nclass ClayNavigationBar extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener('transitionend', this._handleTransitionEnd, true);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t// eslint-disable-next-line\n\tsync_isTransitioning() {\n\t\tif (this._isTransitioning) {\n\t\t\tthis._setCollapseHeight();\n\t\t\tif (this._visible) {\n\t\t\t\tthis._removeCollapseHeight();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Check the click and set transition true.\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleClickToggler(event) {\n\t\tevent.preventDefault();\n\n\t\tif (this._visible && !this._isTransitioning) {\n\t\t\tthis._setCollapseHeight();\n\t\t}\n\n\t\tif (!this._isTransitioning) {\n\t\t\tthis._isTransitioning = true;\n\t\t}\n\t}\n\n\t/**\n\t * Continues the propagation of the item click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleNavItemClicked(event) {\n\t\tconst element = event.delegateTarget;\n\t\tconst index = element.getAttribute('data-nav-item-index');\n\t\tconst item = this.items[index];\n\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\titem: item,\n\t\t\t},\n\t\t\tname: 'itemClicked',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Handle css transition end.\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleTransitionEnd(event) {\n\t\tconst element = this.refs.content;\n\t\tif (\n\t\t\telement == event.target &&\n\t\t\tthis._isTransitioning &&\n\t\t\t!this._visible\n\t\t) {\n\t\t\tthis._visible = true;\n\t\t\tthis._isTransitioning = false;\n\t\t\tthis._removeCollapseHeight();\n\t\t} else if (element == event.target) {\n\t\t\tthis._visible = false;\n\t\t\tthis._isTransitioning = false;\n\t\t}\n\t}\n\n\t/**\n\t * Removes height css property on `.navbar-collapse`\n\t * @private\n\t */\n\t_removeCollapseHeight() {\n\t\tthis.refs.content.style.removeProperty('height');\n\t}\n\n\t/**\n\t * Sets the height css property on `.navbar-collapse`\n\t * @private\n\t */\n\t_setCollapseHeight() {\n\t\tconst elementCollapse = this.refs.content;\n\n\t\telementCollapse.setAttribute(\n\t\t\t'style',\n\t\t\t`height: ${elementCollapse.children[0].clientHeight}px`\n\t\t);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayNavigationBar.STATE = {\n\t/**\n\t * The toggle animation.\n\t * @default false\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @private\n\t * @type {?boolean}\n\t */\n\t_isTransitioning: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Navmenus visible in mobile when click in the button.\n\t * @default false\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @private\n\t * @type {?bool}\n\t */\n\t_visible: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The display style attribute.\n\t * @default false\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {?boolean}\n\t */\n\tinverted: Config.bool().value(false),\n\n\t/**\n\t * List of items to show in the Navbar.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {!Array}\n\t */\n\titems: Config.arrayOf(\n\t\tConfig.shapeOf({\n\t\t\tactive: Config.bool().value(false),\n\t\t\thref: Config.string().required(),\n\t\t\tlabel: Config.string().required(),\n\t\t})\n\t).required(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayNavigationBar\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n};\n\ndefineWebComponent('clay-navigation-bar', ClayNavigationBar);\n\nSoy.register(ClayNavigationBar, templates);\n\nexport {ClayNavigationBar};\nexport default ClayNavigationBar;\n"]}