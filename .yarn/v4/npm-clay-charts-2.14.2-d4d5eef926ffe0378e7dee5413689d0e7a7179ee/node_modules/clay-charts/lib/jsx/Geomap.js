'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Geomap = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Geomap = require('../Geomap');

var _metalJsx = require('metal-jsx');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Geomap  component for use with JSX.
 * @extends Geomap
 */
var Geomap = function (_GeomapComponent) {
	_inherits(Geomap, _GeomapComponent);

	function Geomap() {
		_classCallCheck(this, Geomap);

		return _possibleConstructorReturn(this, (Geomap.__proto__ || Object.getPrototypeOf(Geomap)).apply(this, arguments));
	}

	_createClass(Geomap, [{
		key: 'render',

		/**
   * @inheritDoc
   */
		value: function render() {
			var state = this.getState();
			var id = state.id;
			var style = 'width:' + state._width + ';height:' + state._height;

			IncrementalDOM.elementOpenStart('div');
			iDOMHelpers.forOwn(id && { id: id }, iDOMHelpers.attr);
			IncrementalDOM.attr('style', style);
			IncrementalDOM.elementOpenEnd('div');
			return IncrementalDOM.elementClose('div');
		}
	}]);

	return Geomap;
}(_Geomap.Geomap);

Geomap.DATA_MANAGER = _metalJsx.JSXDataManager;
Geomap.PROPS = _Geomap.Geomap.STATE;
Geomap.RENDERER = _metalJsx.JSXRenderer;

exports.Geomap = Geomap;
exports.default = Geomap;
//# sourceMappingURL=Geomap.js.map