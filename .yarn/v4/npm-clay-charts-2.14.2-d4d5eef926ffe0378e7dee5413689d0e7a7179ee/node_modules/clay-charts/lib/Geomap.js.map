{"version":3,"sources":["../src/Geomap.js"],"names":["Geomap","config","getInitialConfig","_geoMapInstance","geomap","Object","assign","element","attached","disposed","Component","Soy","register","templates","STATE","_domainMin","Config","number","internal","_domainMax","_height","oneOfType","string","value","_width","color","shapeOf","range","max","required","min","selected","data","object","func","id","pollingInterval"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;AAEA;;;IAGMA,M;;;;;;;;;;;;AACL;;;6BAGW;AACV,OAAMC,SAAS,KAAKC,gBAAL,EAAf;;AAEA,QAAKC,eAAL,GAAuB,IAAIC,yBAAOJ,MAAX,CACtBK,OAAOC,MAAP,CACC;AACCC,aAAS,KAAKA;AADf,IADD,EAICN,MAJD,CADsB,CAAvB;;AASA,QAAKE,eAAL,CAAqBK,QAArB;AACA;;AAED;;;;;;6BAGW;AACV,QAAKL,eAAL,CAAqBM,QAArB;AACA;;;;EAxBmBC,wB;;AA2BrBC,mBAAIC,QAAJ,CAAaZ,MAAb,EAAqBa,mBAArB;;AAEA;;;;;AAKAb,OAAOc,KAAP,GAAe;AACd;;;;;;AAMAC,aAAYC,mBAAOC,MAAP,GAAgBC,QAAhB,EAPE;;AASd;;;;;;AAMAC,aAAYH,mBAAOC,MAAP,GAAgBC,QAAhB,EAfE;;AAiBd;;;;;;;AAOAE,UAASJ,mBAAOK,SAAP,CAAiB,CAACL,mBAAOM,MAAP,EAAD,EAAkBN,mBAAOC,MAAP,EAAlB,CAAjB,EACPM,KADO,CACD,MADC,EAEPL,QAFO,EAxBK;;AA4Bd;;;;;;;AAOAM,SAAQR,mBAAOK,SAAP,CAAiB,CAACL,mBAAOM,MAAP,EAAD,EAAkBN,mBAAOC,MAAP,EAAlB,CAAjB,EACNM,KADM,CACA,MADA,EAENL,QAFM,EAnCM;;AAuCd;;;;;;;AAOAO,QAAOT,mBAAOU,OAAP,CAAe;AACrBC,SAAOX,mBAAOU,OAAP,CAAe;AACrBE,QAAKZ,mBAAOM,MAAP,GAAgBO,QAAhB,EADgB;AAErBC,QAAKd,mBAAOM,MAAP,GAAgBO,QAAhB;AAFgB,GAAf,CADc;AAKrBE,YAAUf,mBAAOM,MAAP,EALW;AAMrBC,SAAOP,mBAAOM,MAAP,GAAgBO,QAAhB;AANc,EAAf,EAOJN,KAPI,CAOE;AACRI,SAAO;AACNG,QAAK,SADC;AAENF,QAAK;AAFC,GADC;AAKRG,YAAU,SALF;AAMRR,SAAO;AANC,EAPF,CA9CO;;AA8Dd;;;;;;;AAOAS,OAAMhB,mBAAOK,SAAP,CAAiB,CAACL,mBAAOiB,MAAP,EAAD,EAAkBjB,mBAAOkB,IAAP,EAAlB,EAAiClB,mBAAOM,MAAP,EAAjC,CAAjB,CArEQ;;AAuEd;;;;;;;AAOAa,KAAInB,mBAAOM,MAAP,EA9EU;;AAgFd;;;;;;;AAOAc,kBAAiBpB,mBAAOC,MAAP;AAvFH,CAAf;;QA0FQjB,M,GAAAA,M;kBACOA,M","file":"Geomap.js","sourcesContent":["import Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport templates from './Geomap.soy.js';\nimport {Config} from 'metal-state';\nimport {geomap} from 'clay-charts-shared';\n\n/**\n * Geomap component\n */\nclass Geomap extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tconst config = this.getInitialConfig();\n\n\t\tthis._geoMapInstance = new geomap.Geomap(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\telement: this.element,\n\t\t\t\t},\n\t\t\t\tconfig\n\t\t\t)\n\t\t);\n\n\t\tthis._geoMapInstance.attached();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tthis._geoMapInstance.disposed();\n\t}\n}\n\nSoy.register(Geomap, templates);\n\n/**\n * GeoMap state definition.\n * @type {!Object}\n * @static\n */\nGeomap.STATE = {\n\t/**\n\t * Minimum value for domain\n\t * @instance\n\t * @memberof Geomap\n\t * @type {!Number}\n\t */\n\t_domainMin: Config.number().internal(),\n\n\t/**\n\t * Maximum value for domain\n\t * @instance\n\t * @memberof Geomap\n\t * @type {!Number}\n\t */\n\t_domainMax: Config.number().internal(),\n\n\t/**\n\t * Height of the map\n\t * @default 480\n\t * @instance\n\t * @memberof Geomap\n\t * @type {?Number}\n\t */\n\t_height: Config.oneOfType([Config.string(), Config.number()])\n\t\t.value('100%')\n\t\t.internal(),\n\n\t/**\n\t * Width of the map\n\t * @default 640\n\t * @instance\n\t * @memberof Geomap\n\t * @type {?Number}\n\t */\n\t_width: Config.oneOfType([Config.string(), Config.number()])\n\t\t.value('100%')\n\t\t.internal(),\n\n\t/**\n\t * Color configuration.\n\t * @default undefined\n\t * @instance\n\t * @memberof ChartBase\n\t * @type {?Object}\n\t */\n\tcolor: Config.shapeOf({\n\t\trange: Config.shapeOf({\n\t\t\tmax: Config.string().required(),\n\t\t\tmin: Config.string().required(),\n\t\t}),\n\t\tselected: Config.string(),\n\t\tvalue: Config.string().required(),\n\t}).value({\n\t\trange: {\n\t\t\tmin: '#b1d4ff',\n\t\t\tmax: '#0065e4',\n\t\t},\n\t\tselected: '#4b9bff',\n\t\tvalue: 'pop_est',\n\t}),\n\n\t/**\n\t * Data that will be rendered to the chart.\n\t * @default undefined\n\t * @instance\n\t * @memberof ChartBase\n\t * @type {?(Array|undefined)}\n\t */\n\tdata: Config.oneOfType([Config.object(), Config.func(), Config.string()]),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof Geomap\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Set an interval (in ms) to fetch the data.\n\t * @default undefined\n\t * @instance\n\t * @memberof ChartBase\n\t * @type {?Number}\n\t */\n\tpollingInterval: Config.number(),\n};\n\nexport {Geomap};\nexport default Geomap;\n"]}