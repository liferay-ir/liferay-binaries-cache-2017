{"version":3,"sources":["../src/ClayButton.js"],"names":["ClayButton","ClayComponent","STATE","ariaLabel","Config","string","block","bool","value","data","object","defaultEventHandler","disabled","elementClasses","icon","iconAlignment","oneOf","id","label","any","monospaced","name","size","spritemap","style","oneOfType","tabIndex","title","type","Soy","register","templates"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,U;;;;;;;;;;EAAmBC,uB;;AAEzB;;;;;;;AAKAD,WAAWE,KAAX,GAAmB;AAClB;;;;;;;AAOAC,YAAWC,mBAAOC,MAAP,EARO;;AAUlB;;;;;;;AAOAC,QAAOF,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAjBW;;AAmBlB;;;;;;;AAOAC,OAAML,mBAAOM,MAAP,EA1BY;;AA4BlB;;;;;;;;AAQAC,sBAAqBP,mBAAOM,MAAP,EApCH;;AAsClB;;;;;;;AAOAE,WAAUR,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA7CQ;;AA+ClB;;;;;;;AAOAK,iBAAgBT,mBAAOC,MAAP,EAtDE;;AAwDlB;;;;;;;AAOAS,OAAMV,mBAAOC,MAAP,EA/DY;;AAiElB;;;;;;;AAOAU,gBAAeX,mBAAOY,KAAP,CAAa,CAAC,MAAD,EAAS,OAAT,CAAb,EAAgCR,KAAhC,CAAsC,MAAtC,CAxEG;;AA0ElB;;;;;;;AAOAS,KAAIb,mBAAOC,MAAP,EAjFc;;AAmFlB;;;;;;;AAOAa,QAAOd,mBAAOe,GAAP,EA1FW;;AA4FlB;;;;;;;AAOAC,aAAYhB,mBAAOG,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAnGM;;AAqGlB;;;;;;;AAOAa,OAAMjB,mBAAOC,MAAP,EA5GY;;AA8GlB;;;;;;;;AAQAiB,OAAMlB,mBAAOY,KAAP,CAAa,CAAC,IAAD,CAAb,CAtHY;;AAwHlB;;;;;;;AAOAO,YAAWnB,mBAAOC,MAAP,EA/HO;;AAiIlB;;;;;;;;AAQAmB,QAAOpB,mBAAOqB,SAAP,CAAiB,CACvBrB,mBAAOG,IAAP,EADuB,EAEvBH,mBAAOY,KAAP,CAAa,CAAC,MAAD,EAAS,SAAT,EAAoB,WAApB,EAAiC,UAAjC,CAAb,CAFuB,CAAjB,EAGJR,KAHI,CAGE,SAHF,CAzIW;;AA8IlB;;;;;;;AAOAkB,WAAUtB,mBAAOC,MAAP,EArJQ;;AAuJlB;;;;;;;AAOAsB,QAAOvB,mBAAOC,MAAP,EA9JW;;AAgKlB;;;;;;;AAOAuB,OAAMxB,mBAAOY,KAAP,CAAa,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAAb,EAA4CR,KAA5C,CAAkD,QAAlD,CAvKY;;AAyKlB;;;;;;;AAOAA,QAAOJ,mBAAOC,MAAP;AAhLW,CAAnB;;AAmLA,iCAAmB,aAAnB,EAAkCL,UAAlC;;AAEA6B,mBAAIC,QAAJ,CAAa9B,UAAb,EAAyB+B,uBAAzB;;QAEQ/B,U,GAAAA,U;kBACOA,U","file":"ClayButton.js","sourcesContent":["import 'clay-icon';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayButton.soy.js';\n\n/**\n * Metal Clay Button component.\n * @extends ClayComponent\n */\nclass ClayButton extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayButton.STATE = {\n\t/**\n\t * Aria label attribute for the button element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tariaLabel: Config.string(),\n\n\t/**\n\t * Renders the button as a block element.\n\t * @default false\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?boolean}\n\t */\n\tblock: Config.bool().value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * The button disabled attribute.\n\t * @default false\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?boolean}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Icon to be rendered in the button.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Render ClayIcon in the ClayButton element.\n\t * @default left\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?string}\n\t */\n\ticonAlignment: Config.oneOf(['left', 'right']).value('left'),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The label of the button content.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any(),\n\n\t/**\n\t * Flag to indicate if button should be monospaced.\n\t * @default false\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?bool}\n\t */\n\tmonospaced: Config.bool().value(false),\n\n\t/**\n\t * The name attribute value of the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tname: Config.string(),\n\n\t/**\n\t * The name that will make the CSS class name that will represent the\n\t * button size.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tsize: Config.oneOf(['sm']),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * The css class that colors the button. Style `unstyled` is only for internal\n\t * purposes.\n\t * @default primary\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(bool|string|undefined)}\n\t */\n\tstyle: Config.oneOfType([\n\t\tConfig.bool(),\n\t\tConfig.oneOf(['link', 'primary', 'secondary', 'unstyled']),\n\t]).value('primary'),\n\n\t/**\n\t * Flag to indicate if the element can be focused.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\ttabIndex: Config.string(),\n\n\t/**\n\t * The title attribute of the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\ttitle: Config.string(),\n\n\t/**\n\t * The type attribute value of the element.\n\t * @default button\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?string}\n\t */\n\ttype: Config.oneOf(['button', 'reset', 'submit']).value('button'),\n\n\t/**\n\t * The value attribute value of the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayButton\n\t * @type {?(string|undefined)}\n\t */\n\tvalue: Config.string(),\n};\n\ndefineWebComponent('clay-button', ClayButton);\n\nSoy.register(ClayButton, templates);\n\nexport {ClayButton};\nexport default ClayButton;\n"]}