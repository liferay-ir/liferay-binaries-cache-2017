{"version":3,"sources":["../src/ClaySticker.js"],"names":["ClaySticker","ClayComponent","STATE","data","Config","object","defaultEventHandler","elementClasses","string","icon","id","imageAlt","imageSrc","label","any","outside","bool","value","position","oneOf","size","shape","spritemap","style","title","Soy","register","templates"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,W;;;;;;;;;;EAAoBC,uB;;AAE1B;;;;;;;AAKAD,YAAYE,KAAZ,GAAoB;AACnB;;;;;;;AAOAC,OAAMC,mBAAOC,MAAP,EARa;;AAUnB;;;;;;;;AAQAC,sBAAqBF,mBAAOC,MAAP,EAlBF;;AAoBnB;;;;;;;AAOAE,iBAAgBH,mBAAOI,MAAP,EA3BG;;AA6BnB;;;;;;;AAOAC,OAAML,mBAAOI,MAAP,EApCa;;AAsCnB;;;;;;;AAOAE,KAAIN,mBAAOI,MAAP,EA7Ce;;AA+CnB;;;;;;;AAOAG,WAAUP,mBAAOI,MAAP,EAtDS;;AAwDnB;;;;;;;AAOAI,WAAUR,mBAAOI,MAAP,EA/DS;;AAiEnB;;;;;;;AAOAK,QAAOT,mBAAOU,GAAP,EAxEY;;AA0EnB;;;;;;;;AAQAC,UAASX,mBAAOY,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAlFU;;AAoFnB;;;;;;;;;AASAC,WAAUd,mBAAOe,KAAP,CAAa,CACtB,aADsB,EAEtB,cAFsB,EAGtB,UAHsB,EAItB,WAJsB,CAAb,CA7FS;;AAoGnB;;;;;;;AAOAC,OAAMhB,mBAAOe,KAAP,CAAa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAb,CA3Ga;;AA6GnB;;;;;;;AAOAE,QAAOjB,mBAAOe,KAAP,CAAa,CAAC,QAAD,EAAW,SAAX,CAAb,EAAoCF,KAApC,CAA0C,SAA1C,CApHY;;AAsHnB;;;;;;;AAOAK,YAAWlB,mBAAOI,MAAP,EA7HQ;;AA+HnB;;;;;;;;AAQAe,QAAOnB,mBAAOe,KAAP,CAAa,CACnB,QADmB,EAEnB,MAFmB,EAGnB,MAHmB,EAInB,OAJmB,EAKnB,SALmB,EAMnB,WANmB,EAOnB,SAPmB,EAQnB,UARmB,EASnB,SATmB,CAAb,EAUJF,KAVI,CAUE,SAVF,CAvIY;;AAmJnB;;;;;;;AAOAO,QAAOpB,mBAAOI,MAAP;AA1JY,CAApB;;AA6JA,iCAAmB,cAAnB,EAAmCR,WAAnC;;AAEAyB,mBAAIC,QAAJ,CAAa1B,WAAb,EAA0B2B,wBAA1B;;QAEQ3B,W,GAAAA,W;kBACOA,W","file":"ClaySticker.js","sourcesContent":["import 'clay-icon';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClaySticker.soy.js';\n\n/**\n * Implementation of the Metal Clay Link.\n * @extends ClayComponent\n */\nclass ClaySticker extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClaySticker.STATE = {\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Render ClayIcon in the ClaySticker element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Id to be applied to the sticker element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Alternate text of the image.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\timageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\timageSrc: Config.string(),\n\n\t/**\n\t * Sets the text or HTML to be rendered inside sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(html|string|undefined)}\n\t */\n\tlabel: Config.any(),\n\n\t/**\n\t * Flag to indicate if the sticker should be positioned on the outside\n\t * corners when position is defined.\n\t * @default false\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?bool}\n\t */\n\toutside: Config.bool().value(false),\n\n\t/**\n\t * Position of the sticker in relation to the contents.\n\t * Available positions are `bottom-left`, `bottom-right`, `top-left`\n\t * and `top-right`.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\tposition: Config.oneOf([\n\t\t'bottom-left',\n\t\t'bottom-right',\n\t\t'top-left',\n\t\t'top-right',\n\t]),\n\n\t/**\n\t * Sticker size. Available sizes are `sm`, `lg`, `xl`.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\tsize: Config.oneOf(['lg', 'sm', 'xl']),\n\n\t/**\n\t * Shape of the sticker. Available shapes are `circle`, `rounded`.\n\t * @default rounded\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?string}\n\t */\n\tshape: Config.oneOf(['circle', 'rounded']).value('rounded'),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * Sticker style. Available sizes are: `danger`, `dark`, `info`, `light`,\n\t * `primary`, `secondary`, `success`, `warning`.\n\t * @default primary\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?string}\n\t */\n\tstyle: Config.oneOf([\n\t\t'danger',\n\t\t'dark',\n\t\t'info',\n\t\t'light',\n\t\t'primary',\n\t\t'secondary',\n\t\t'success',\n\t\t'unstyled',\n\t\t'warning',\n\t]).value('primary'),\n\n\t/**\n\t * Title to be applied to the sticker element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClaySticker\n\t * @type {?(string|undefined)}\n\t */\n\ttitle: Config.string(),\n};\n\ndefineWebComponent('clay-sticker', ClaySticker);\n\nSoy.register(ClaySticker, templates);\n\nexport {ClaySticker};\nexport default ClaySticker;\n"]}