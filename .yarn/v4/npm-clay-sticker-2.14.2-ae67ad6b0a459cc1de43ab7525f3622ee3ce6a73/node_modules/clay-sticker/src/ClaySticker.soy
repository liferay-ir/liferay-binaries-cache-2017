{namespace ClaySticker}

/**
 * This renders a sticker.
 */
{template .render}
	{@param? elementClasses: string}
	{@param? icon: string}
	{@param? id: string}
	{@param? imageAlt: string}
	{@param? imageSrc: string}
	{@param? label: html|string}
	{@param? outside: bool}
	{@param? position: string}
	{@param? shape: string}
	{@param? size: string}
	{@param? spritemap: string}
	{@param? style: string}
	{@param? title: string}

	{let $attributes kind="attributes"}
		class="sticker
				{sp}sticker-{$shape ?: 'rounded'}
				{sp}sticker-{$style ?: 'primary'}

			{if $position}
				{if $outside}
					{sp}sticker-outside
				{/if}

				{sp}sticker-{$position}
			{/if}

			{if $size}
				{sp}sticker-{$size}
			{/if}

			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}

		{if $title}
			title="{$title}"
		{/if}
	{/let}

	<span {$attributes}>
		{call .content}
			{param icon: $icon /}
			{param imageAlt: $imageAlt /}
			{param imageSrc: $imageSrc /}
			{param label: $label /}
			{param spritemap: $spritemap /}
		{/call}
	</span>
{/template}

/**
 * Renders element content
 */
{template .content}
	{@param? icon: string}
	{@param? imageAlt: string}
	{@param? imageSrc: string}
	{@param? label: html|string}
	{@param? spritemap: string}

	{let $classes kind="text"}
		{if $icon and $spritemap}
			inline-item
		{else}
			sticker-overlay
		{/if}
	{/let}

	<span class="{$classes}">
		{if $icon and $spritemap}
			{call ClayIcon.render}
				{param spritemap: $spritemap /}
				{param symbol: $icon /}
			{/call}
		{elseif $imageSrc}
			{call .image}
				{param imageAlt: $imageAlt ?: '' /}
				{param imageSrc: $imageSrc /}
			{/call}
		{elseif $label}
			{$label}
		{/if}
	</span>
{/template}

/**
 * Renders element content image
 */
{template .image}
	{@param imageAlt: string}
	{@param imageSrc: string}

	{let $imageAttributes kind="attributes"}
		alt="{$imageAlt}"
		class="sticker-img"
		src="{$imageSrc}"
	{/let}

	<img {$imageAttributes} />
{/template}
