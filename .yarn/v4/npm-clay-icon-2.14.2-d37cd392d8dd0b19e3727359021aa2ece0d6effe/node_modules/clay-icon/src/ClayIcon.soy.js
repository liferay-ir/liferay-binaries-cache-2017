/* jshint ignore:start */
import Component from 'metal-component';
import Soy from 'metal-soy';

var templates;
goog.loadModule(function(exports) {
var soy = goog.require('soy');
var soydata = goog.require('soydata');
// This file was automatically generated from ClayIcon.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace ClayIcon.
 * @public
 */

goog.module('ClayIcon.incrementaldom');

goog.require('goog.soy.data.SanitizedContent');
var incrementalDom = goog.require('incrementaldom');
goog.require('soy.asserts');
var soyIdom = goog.require('soy.idom');


/**
 * @param {{
 *  spritemap: (!goog.soy.data.SanitizedContent|string),
 *  symbol: (!goog.soy.data.SanitizedContent|string),
 *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
 *  focusable: (boolean|null|undefined),
 *  id: (!goog.soy.data.SanitizedContent|null|string|undefined)
 * }} opt_data
 * @param {Object<string, *>=} opt_ijData
 * @param {Object<string, *>=} opt_ijData_deprecated
 * @return {void}
 * @suppress {checkTypes}
 */
function $render(opt_data, opt_ijData, opt_ijData_deprecated) {
  opt_ijData = opt_ijData_deprecated || opt_ijData;
  /** @type {!goog.soy.data.SanitizedContent|string} */
  var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');
  /** @type {!goog.soy.data.SanitizedContent|string} */
  var symbol = soy.asserts.assertType(goog.isString(opt_data.symbol) || opt_data.symbol instanceof goog.soy.data.SanitizedContent, 'symbol', opt_data.symbol, '!goog.soy.data.SanitizedContent|string');
  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
  var elementClasses = soy.asserts.assertType(opt_data.elementClasses == null || (goog.isString(opt_data.elementClasses) || opt_data.elementClasses instanceof goog.soy.data.SanitizedContent), 'elementClasses', opt_data.elementClasses, '!goog.soy.data.SanitizedContent|null|string|undefined');
  /** @type {boolean|null|undefined} */
  var focusable = soy.asserts.assertType(opt_data.focusable == null || (goog.isBoolean(opt_data.focusable) || opt_data.focusable === 1 || opt_data.focusable === 0), 'focusable', opt_data.focusable, 'boolean|null|undefined');
  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
  var id = soy.asserts.assertType(opt_data.id == null || (goog.isString(opt_data.id) || opt_data.id instanceof goog.soy.data.SanitizedContent), 'id', opt_data.id, '!goog.soy.data.SanitizedContent|null|string|undefined');
  var attributes__soy9 = function() {
    incrementalDom.attr('class', 'lexicon-icon lexicon-icon-' + symbol + (elementClasses ? ' ' + elementClasses : ''));
    if (focusable) {
      incrementalDom.attr('focusable', 'true');
    } else {
      incrementalDom.attr('focusable', 'false');
    }
    if (id) {
      incrementalDom.attr('id', id);
    }
    incrementalDom.attr('role', 'presentation');
  };
  incrementalDom.elementOpenStart('svg');
      attributes__soy9();
  incrementalDom.elementOpenEnd();
    incrementalDom.elementOpenStart('use');
        incrementalDom.attr('xlink:href', spritemap + '#' + symbol);
    incrementalDom.elementOpenEnd();
    incrementalDom.elementClose('use');
  incrementalDom.elementClose('svg');
}
exports.render = $render;
/**
 * @typedef {{
 *  spritemap: (!goog.soy.data.SanitizedContent|string),
 *  symbol: (!goog.soy.data.SanitizedContent|string),
 *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
 *  focusable: (boolean|null|undefined),
 *  id: (!goog.soy.data.SanitizedContent|null|string|undefined)
 * }}
 */
$render.Params;
if (goog.DEBUG) {
  $render.soyTemplateName = 'ClayIcon.render';
}

exports.render.params = ["spritemap","symbol","elementClasses","focusable","id"];
exports.render.types = {"spritemap":"string","symbol":"string","elementClasses":"string","focusable":"bool","id":"string"};
templates = exports;
return exports;

});

class ClayIcon extends Component {}
Soy.register(ClayIcon, templates);
export { ClayIcon, templates };
export default templates;
/* jshint ignore:end */
