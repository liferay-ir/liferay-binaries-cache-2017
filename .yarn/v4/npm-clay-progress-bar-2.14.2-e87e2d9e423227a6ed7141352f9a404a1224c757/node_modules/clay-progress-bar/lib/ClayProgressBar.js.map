{"version":3,"sources":["../src/ClayProgressBar.js"],"names":["ClayProgressBar","ClayComponent","STATE","data","Config","object","defaultEventHandler","elementClasses","string","id","spritemap","status","oneOf","value","validator","Soy","register","templates"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,e;;;;;;;;;;EAAwBC,uB;;AAE9B;;;;;;;AAKAD,gBAAgBE,KAAhB,GAAwB;AACvB;;;;;;;AAOAC,OAAMC,mBAAOC,MAAP,EARiB;;AAUvB;;;;;;;;AAQAC,sBAAqBF,mBAAOC,MAAP,EAlBE;;AAoBvB;;;;;;;AAOAE,iBAAgBH,mBAAOI,MAAP,EA3BO;;AA6BvB;;;;;;;AAOAC,KAAIL,mBAAOI,MAAP,EApCmB;;AAsCvB;;;;;;;AAOAE,YAAWN,mBAAOI,MAAP,EA7CY;;AA+CvB;;;;;;;;AAQAG,SAAQP,mBAAOQ,KAAP,CAAa,CAAC,UAAD,EAAa,SAAb,CAAb,CAvDe;;AAyDvB;;;;;;;AAOAC,QAAO;AACNC,aAAW;AAAA,UAASD,SAAS,CAAT,IAAcA,SAAS,GAAhC;AAAA,GADL;AAENA,SAAO;AAFD;AAhEgB,CAAxB;;AAsEA,iCAAmB,mBAAnB,EAAwCb,eAAxC;;AAEAe,mBAAIC,QAAJ,CAAahB,eAAb,EAA8BiB,4BAA9B;;QAEQjB,e,GAAAA,e;kBACOA,e","file":"ClayProgressBar.js","sourcesContent":["import 'clay-icon';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayProgressBar.soy.js';\n\n/**\n * Metal Clay Button component.\n * @extends ClayComponent\n */\nclass ClayProgressBar extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayProgressBar.STATE = {\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {!string}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * Progress bar state. Completed state can be defined here but also is\n\t * automatically set if value is equal to maxValue.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {?string}\n\t */\n\tstatus: Config.oneOf(['complete', 'warning']),\n\n\t/**\n\t * The progress value of the bar.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayProgressBar\n\t * @type {?number}\n\t */\n\tvalue: {\n\t\tvalidator: value => value >= 0 && value <= 100,\n\t\tvalue: 0,\n\t},\n};\n\ndefineWebComponent('clay-progress-bar', ClayProgressBar);\n\nSoy.register(ClayProgressBar, templates);\n\nexport {ClayProgressBar};\nexport default ClayProgressBar;\n"]}