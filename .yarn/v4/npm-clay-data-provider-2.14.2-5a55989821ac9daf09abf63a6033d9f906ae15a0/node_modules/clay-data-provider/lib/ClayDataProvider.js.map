{"version":3,"sources":["../src/ClayDataProvider.js"],"names":["ClayDataProvider","_isResolvedData","_pollingInterval","_hasData","dataSource","_dataSource","updateData","inputMode","bind","debounceTime","clearInterval","query","requestRetries","initialData","_handleDataChange","promise","fetch","requestOptions","then","res","json","requestTimeout","_setPolling","catch","_setRequestRetries","err","emit","data","name","Array","isArray","pollingInterval","setInterval","_fetchData","isDisposed","console","error","param","extract","elem","reduce","prev","element","index","string","_performCall","result","length","matches","values","score","value","sort","a","b","ClayComponent","STATE","Config","oneOfType","array","func","object","internal","content","required","number","oneOf","shapeOf","body","cache","credentials","headers","method","mode","redirect","referrer","requestPolling","validator","warn","Soy","register","templates"],"mappings":"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","file":"ClayDataProvider.js","sourcesContent":["import {cancelDebounce, debounce} from 'metal-debounce';\nimport {Config} from 'metal-state';\nimport {isObject, isFunction} from 'metal';\nimport {match, timeout} from './utils';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayDataProvider.soy.js';\n\n/**\n * Metal ClayDataProvider component.\n * @extends ClayComponent\n */\nclass ClayDataProvider extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis._isResolvedData = false;\n\t\tthis._pollingInterval = 0;\n\t\tif (this._hasData(this.dataSource)) {\n\t\t\tthis._dataSource = this.dataSource;\n\t\t\tthis._isResolvedData = true;\n\t\t} else {\n\t\t\tthis.updateData();\n\t\t}\n\n\t\tif (this.inputMode === 'userInput') {\n\t\t\tthis.updateData = debounce(\n\t\t\t\tthis.updateData.bind(this),\n\t\t\t\tthis.debounceTime\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tif (this._pollingInterval) {\n\t\t\tclearInterval(this._pollingInterval);\n\t\t\tthis._pollingInterval = null;\n\t\t}\n\n\t\tcancelDebounce(this.updateData);\n\t}\n\n\t/**\n\t * Makes the request and defines initial data while it is requesting.\n\t * @param {!string} query\n\t * @param {!number} requestRetries\n\t * @protected\n\t */\n\tupdateData(query, requestRetries = 0) {\n\t\tif (\n\t\t\tthis.initialData &&\n\t\t\t!this._pollingInterval &&\n\t\t\trequestRetries === 0\n\t\t) {\n\t\t\tthis._dataSource = this.initialData;\n\t\t\tthis._handleDataChange();\n\t\t}\n\n\t\tlet promise;\n\n\t\tif (isFunction(this.dataSource)) {\n\t\t\tpromise = this.dataSource(query);\n\t\t} else {\n\t\t\tpromise = fetch(this.dataSource, this.requestOptions).then(res =>\n\t\t\t\tres.json()\n\t\t\t);\n\t\t}\n\n\t\ttimeout(this.requestTimeout, promise)\n\t\t\t.then(res => {\n\t\t\t\tthis._dataSource = res;\n\t\t\t\tthis._isResolvedData = true;\n\t\t\t\tthis._handleDataChange();\n\n\t\t\t\tif (this.inputMode === 'polling') {\n\t\t\t\t\tthis._setPolling();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => this._setRequestRetries(query, err, requestRetries));\n\t}\n\n\t/**\n\t * Handles the event when data changed.\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleDataChange() {\n\t\treturn !this.emit({\n\t\t\tdata: this._dataSource,\n\t\t\tname: 'dataChange',\n\t\t});\n\t}\n\n\t/**\n\t * Checks whether the data is locally.\n\t * @param {!(string|object|array)} data\n\t * @return {Boolean}\n\t */\n\t_hasData(data) {\n\t\tif (Array.isArray(data) || isObject(data)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets up the polling interval.\n\t * @protected\n\t */\n\t_setPolling() {\n\t\tif (this.pollingInterval > 0) {\n\t\t\tif (this._pollingInterval) {\n\t\t\t\tclearInterval(this._pollingInterval);\n\t\t\t}\n\n\t\t\tthis._pollingInterval = setInterval(() => {\n\t\t\t\tthis._isResolvedData = false;\n\t\t\t\tthis._fetchData();\n\t\t\t}, this.pollingInterval);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the request retries.\n\t * @param {!string} query\n\t * @param {!string} err\n\t * @param {!number} requestRetries\n\t * @protected\n\t */\n\t_setRequestRetries(query, err, requestRetries) {\n\t\tif (this.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.requestRetries > 0 && requestRetries < this.requestRetries) {\n\t\t\tconsole.error(\n\t\t\t\t`DataProvider: (${requestRetries + 1}/${\n\t\t\t\t\tthis.requestRetries\n\t\t\t\t}) Request attempt failed`,\n\t\t\t\terr\n\t\t\t);\n\n\t\t\tthis.updateData(query, requestRetries + 1);\n\t\t} else {\n\t\t\tconsole.error('DataProvider: Error making the requisition', err);\n\t\t}\n\t}\n\n\t/**\n\t * Handles data mapping.\n\t * @param {!(function|string)} param\n\t * @param {!Array} data\n\t * @protected\n\t * @return {!(string|number)}\n\t */\n\t_performCall(param, data) {\n\t\tif (typeof param === 'function') {\n\t\t\treturn param(data);\n\t\t}\n\n\t\tif (typeof data === 'string') {\n\t\t\treturn data;\n\t\t}\n\n\t\treturn data[param];\n\t}\n\n\t/**\n\t * Helper method to filter a list based on a string.\n\t * @param {!string} query\n\t * @param {?(function|string)} extract\n\t * @public\n\t * @return {Array} A list of items containing the corresponding characters\n\t */\n\tfilter(query, extract = elem => elem) {\n\t\tif (!this._isResolvedData) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._dataSource\n\t\t\t.reduce((prev, element, index) => {\n\t\t\t\tlet string = this._performCall(extract, element);\n\t\t\t\tlet result = match(query, string);\n\n\t\t\t\tif (result != null) {\n\t\t\t\t\tprev[prev.length] = {\n\t\t\t\t\t\tdata: element,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tmatches: result.values,\n\t\t\t\t\t\tscore: result.score,\n\t\t\t\t\t\tvalue: string,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn prev;\n\t\t\t}, [])\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a > b) return 1;\n\t\t\t\tif (a < b) return -1;\n\t\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayDataProvider.STATE = {\n\t/**\n\t * The array or object of items for internal manipulation\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\t_dataSource: Config.oneOfType([\n\t\tConfig.array(),\n\t\tConfig.func(),\n\t\tConfig.object(),\n\t]).internal(),\n\n\t/**\n\t * The content renderer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {!html}\n\t */\n\tcontent: Config.required(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * The array of data items that the data source contains,\n\t * the URL for the data provider to request, or a function\n\t * that receives the query and returns a promise with the\n\t * elements.\n\t *\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {!(string|object|array|function)}\n\t */\n\tdataSource: Config.oneOfType([\n\t\tConfig.array(),\n\t\tConfig.func(),\n\t\tConfig.object(),\n\t\tConfig.string(),\n\t]).required(),\n\n\t/**\n\t * Set the request debounce time\n\t * @instance\n\t * @default 200\n\t * @memberof ClayDataProvider\n\t * @type {?(number)}\n\t */\n\tdebounceTime: Config.number().value(200),\n\n\t/**\n\t * Set some initial data while the first request is being made\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\tinitialData: Config.oneOfType([Config.array(), Config.object()]),\n\n\t/**\n\t * Specifies explicitly if request needs to be made with debounce\n\t * (userInput) or with polling (polling)\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\tinputMode: Config.oneOf(['polling', 'userInput']).value('userInput'),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\tpollingInterval: Config.number().value(0),\n\n\t/**\n\t * Set ups the request options\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|undefined)}\n\t */\n\trequestOptions: Config.shapeOf({\n\t\tbody: Config.object(),\n\t\tcache: Config.string(),\n\t\tcredentials: Config.string(),\n\t\theaders: Config.object(),\n\t\tmethod: Config.string(),\n\t\tmode: Config.string(),\n\t\tredirect: Config.string(),\n\t\treferrer: Config.string(),\n\t}),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestPolling: Config.validator(value => {\n\t\tif (value) {\n\t\t\tconsole.warn(\n\t\t\t\t'🚨 `requestPolling` has been renamed to `pollingInterval` and will be deprecated and removed in the next release.'\n\t\t\t);\n\t\t}\n\t}),\n\n\t/**\n\t * Define how many attempts will be made when the request fails\n\t * @instance\n\t * @default 5\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestRetries: Config.number().value(5),\n\n\t/**\n\t * Set timeout of the request\n\t * @instance\n\t * @default 30000\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestTimeout: Config.number().value(30000),\n};\n\ndefineWebComponent('clay-data-provider', ClayDataProvider);\n\nSoy.register(ClayDataProvider, templates);\n\nexport {ClayDataProvider};\nexport default ClayDataProvider;\n"]}