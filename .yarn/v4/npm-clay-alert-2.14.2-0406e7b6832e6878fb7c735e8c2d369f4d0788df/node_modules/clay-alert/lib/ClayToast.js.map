{"version":3,"sources":["../src/ClayToast.js"],"names":["ClayToast","addListener","_defaultHideToast","destroyOnHide","dispose","emit","ClayComponent","STATE","autoClose","Config","oneOfType","bool","number","value","data","object","defaultEventHandler","elementClasses","string","id","message","any","required","spritemap","style","oneOf","title","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,S;;;;;;;;;;;;AACL;;;6BAGW;AACV,QAAKC,WAAL,CAAiB,MAAjB,EAAyB,KAAKC,iBAA9B,EAAiD,IAAjD;AACA;;AAED;;;;;;;sCAIoB;AACnB,OAAI,KAAKC,aAAT,EAAwB;AACvB,SAAKC,OAAL;AACA;AACD;;AAED;;;;;;;gCAIc;AACb,UAAO,CAAC,KAAKC,IAAL,CAAU,MAAV,CAAR;AACA;;AAED;;;;;;;0BAIQ;AACP,QAAKA,IAAL,CAAU,MAAV;AACA;;;;EAhCsBC,uB;;AAmCxB;;;;;;;AAKAN,UAAUO,KAAV,GAAkB;AACjB;;;;;;;;AAQAC,YAAWC,mBAAOC,SAAP,CAAiB,CAACD,mBAAOE,IAAP,EAAD,EAAgBF,mBAAOG,MAAP,EAAhB,CAAjB,EAAmDC,KAAnD,CAAyD,KAAzD,CATM;;AAWjB;;;;;;;AAOAC,OAAML,mBAAOM,MAAP,EAlBW;;AAoBjB;;;;;;;;AAQAC,sBAAqBP,mBAAOM,MAAP,EA5BJ;;AA8BjB;;;;;;;AAOAZ,gBAAeM,mBAAOE,IAAP,GAAcE,KAAd,CAAoB,KAApB,CArCE;;AAuCjB;;;;;;;AAOAI,iBAAgBR,mBAAOS,MAAP,EA9CC;;AAgDjB;;;;;;;AAOAC,KAAIV,mBAAOS,MAAP,EAvDa;;AAyDjB;;;;;;;AAOAE,UAASX,mBAAOY,GAAP,GAAaC,QAAb,EAhEQ;;AAkEjB;;;;;;;AAOAC,YAAWd,mBAAOS,MAAP,GAAgBI,QAAhB,EAzEM;;AA2EjB;;;;;;;AAOAE,QAAOf,mBAAOgB,KAAP,CAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,SAAnB,EAA8B,SAA9B,CAAb,EAAuDZ,KAAvD,CAA6D,MAA7D,CAlFU;;AAoFjB;;;;;;;AAOAa,QAAOjB,mBAAOS,MAAP,GAAgBI,QAAhB;AA3FU,CAAlB;;AA8FA,iCAAmB,YAAnB,EAAiCtB,SAAjC;;AAEA2B,mBAAIC,QAAJ,CAAa5B,SAAb,EAAwB6B,sBAAxB;;QAEQ7B,S,GAAAA,S;kBACOA,S","file":"ClayToast.js","sourcesContent":["import './ClayAlertBase';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayToast.soy.js';\n\n/**\n * Metal Clay Toast component.\n * @extends ClayComponent\n */\nclass ClayToast extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener('hide', this._defaultHideToast, true);\n\t}\n\n\t/**\n\t * Hides the toast and destroy it if proceed.\n\t * @private\n\t */\n\t_defaultHideToast() {\n\t\tif (this.destroyOnHide) {\n\t\t\tthis.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Continues the propagation of the hide event\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleHide() {\n\t\treturn !this.emit('hide');\n\t}\n\n\t/**\n\t * Emits hide alert.\n\t * @public\n\t */\n\tclose() {\n\t\tthis.emit('hide');\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayToast.STATE = {\n\t/**\n\t * Flag to `true` to indicate whether the alert should be closed\n\t * automatically with the default time.\n\t * @default false\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?(bool|number)}\n\t */\n\tautoClose: Config.oneOfType([Config.bool(), Config.number()]).value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the alert should be destroyed when close.\n\t * @default false\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?bool}\n\t */\n\tdestroyOnHide: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The message of alert\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {!(html|string)}\n\t */\n\tmessage: Config.any().required(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * The style of alert\n\t * @default info\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {?string}\n\t */\n\tstyle: Config.oneOf(['danger', 'info', 'success', 'warning']).value('info'),\n\n\t/**\n\t * The title of alert\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayToast\n\t * @type {!string}\n\t */\n\ttitle: Config.string().required(),\n};\n\ndefineWebComponent('clay-toast', ClayToast);\n\nSoy.register(ClayToast, templates);\n\nexport {ClayToast};\nexport default ClayToast;\n"]}