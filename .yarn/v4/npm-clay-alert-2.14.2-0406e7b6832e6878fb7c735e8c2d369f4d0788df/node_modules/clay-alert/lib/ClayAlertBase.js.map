{"version":3,"sources":["../src/ClayAlertBase.js"],"names":["ClayAlertBase","addListener","_defaultHideAlert","_timer","clearTimeout","undefined","_timeToDisappear","_startedTime","firstRender","_startTimer","isDisposed","_delayTime","_visible","destroyOnHide","dispose","close","_resumeTimeout","_pauseTimeout","Date","setTimeout","autoClose","emit","ClayComponent","STATE","Config","bool","internal","value","number","closeable","data","object","defaultEventHandler","elementClasses","string","id","message","any","required","spritemap","style","oneOf","title","type","Soy","register","templates"],"mappings":"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","file":"ClayAlertBase.js","sourcesContent":["import 'clay-button';\nimport 'clay-icon';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\nimport {isServerSide} from 'metal';\n\nimport templates from './ClayAlertBase.soy.js';\n\n/**\n * Metal Clay Alert Base component.\n * @extends ClayComponent\n */\nclass ClayAlertBase extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener('hide', this._defaultHideAlert, true);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tif (this._timer) {\n\t\t\tclearTimeout(this._timer);\n\t\t\tthis._timer = undefined;\n\t\t}\n\t\tthis._timeToDisappear = undefined;\n\t\tthis._startedTime = undefined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trendered(firstRender) {\n\t\tif (firstRender && !isServerSide()) {\n\t\t\tthis._startTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the alert and destroy it if proceed.\n\t * @private\n\t */\n\t_defaultHideAlert() {\n\t\tif (!this.isDisposed()) {\n\t\t\tthis._delayTime = 0;\n\t\t\tthis._visible = false;\n\n\t\t\tif (this._timer) {\n\t\t\t\tclearTimeout(this._timer);\n\t\t\t}\n\n\t\t\tif (this.destroyOnHide) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles onclick event for the close button in case of closeable alert.\n\t * @private\n\t */\n\t_handleCloseClick() {\n\t\tthis.close();\n\t}\n\n\t/**\n\t * Handles mouseout event for the alert.\n\t * @private\n\t */\n\t_handleMouseOut() {\n\t\tthis._resumeTimeout();\n\t}\n\n\t/**\n\t * Handles mouseover event for the alert.\n\t * @private\n\t */\n\t_handleMouseOver() {\n\t\tthis._pauseTimeout();\n\t}\n\n\t/**\n\t * Pauses the closing delay time.\n\t * @private\n\t */\n\t_pauseTimeout() {\n\t\tif (this._timer) {\n\t\t\tclearTimeout(this._timer);\n\t\t\tthis._timer = undefined;\n\t\t\tthis._timeToDisappear -= new Date() - this._startedTime;\n\t\t}\n\t}\n\n\t/**\n\t * Resumes the closing delay time.\n\t * @private\n\t */\n\t_resumeTimeout() {\n\t\tif (this._timeToDisappear > 0) {\n\t\t\tthis._startedTime = new Date();\n\t\t\tthis._timer = setTimeout(() => {\n\t\t\t\tthis.close();\n\t\t\t}, this._timeToDisappear);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the delayTime if passed, if it does not set the default, and starts.\n\t * @private\n\t */\n\t_startTimer() {\n\t\tif (this.autoClose) {\n\t\t\tthis._timeToDisappear = this.autoClose * 1000;\n\n\t\t\tthis._resumeTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Emits hide alert.\n\t * @private\n\t */\n\tclose() {\n\t\tthis.emit('hide');\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayAlertBase.STATE = {\n\t/**\n\t * Flag to indicate the visibility of the alert\n\t * @default true\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?bool}\n\t */\n\t_visible: Config.bool()\n\t\t.internal()\n\t\t.value(true),\n\n\t/**\n\t * Set the duration time to auto close the alert.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?number}\n\t */\n\tautoClose: Config.number(),\n\n\t/**\n\t * Flag to indicate if the alert is closeable.\n\t * @default false\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?bool}\n\t */\n\tcloseable: Config.bool().value(false),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the alert should be destroyed when close.\n\t * @default false\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?bool}\n\t */\n\tdestroyOnHide: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * The message of alert\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {!(html|string)}\n\t */\n\tmessage: Config.any().required(),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * The style of alert\n\t * @default info\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?string}\n\t */\n\tstyle: Config.oneOf(['danger', 'info', 'success', 'warning']).value('info'),\n\n\t/**\n\t * The title of alert\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {!string}\n\t */\n\ttitle: Config.string().required(),\n\n\t/**\n\t * The type of alert\n\t * @default embedded\n\t * @instance\n\t * @memberof ClayAlertBase\n\t * @type {?string}\n\t */\n\ttype: Config.oneOf(['embedded', 'stripe', 'toast']).value('embedded'),\n};\n\ndefineWebComponent('clay-alert-base', ClayAlertBase);\n\nSoy.register(ClayAlertBase, templates);\n\nexport {ClayAlertBase};\nexport default ClayAlertBase;\n"]}