{"version":3,"sources":["../src/ClayToast.soy.js"],"names":["templates","goog","loadModule","exports","soy","require","soydata","module","soyIdom","$templateAlias1","Soy","getTemplate","$render","opt_data","opt_ijData","opt_ijData_deprecated","message","asserts","assertType","isFunction","isString","data","SanitizedContent","spritemap","title","_handleHide","autoClose","isBoolean","isNumber","elementClasses","id","style","timeToDisappear__soy232","closeable","events","hide","ref","type","render","Params","DEBUG","soyTemplateName","params","types","ClayToast","Component","register"],"mappings":"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","file":"ClayToast.soy.js","sourcesContent":["/* jshint ignore:start */\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nvar templates;\ngoog.loadModule(function(exports) {\nvar soy = goog.require('soy');\nvar soydata = goog.require('soydata');\n// This file was automatically generated from ClayToast.soy.\n// Please don't edit this file by hand.\n\n/**\n * @fileoverview Templates in namespace ClayToast.\n * @public\n */\n\ngoog.module('ClayToast.incrementaldom');\n\ngoog.require('goog.soy.data.SanitizedContent');\ngoog.require('soy.asserts');\nvar soyIdom = goog.require('soy.idom');\n\nvar $templateAlias1 = Soy.getTemplate('ClayAlertBase.incrementaldom', 'render');\n\n\n/**\n * @param {{\n *  message: (!goog.soy.data.SanitizedContent|function()|string),\n *  spritemap: (!goog.soy.data.SanitizedContent|string),\n *  title: (!goog.soy.data.SanitizedContent|string),\n *  _handleHide: (*|null|undefined),\n *  autoClose: (boolean|null|number|undefined),\n *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),\n *  id: (!goog.soy.data.SanitizedContent|null|string|undefined),\n *  style: (!goog.soy.data.SanitizedContent|null|string|undefined)\n * }} opt_data\n * @param {Object<string, *>=} opt_ijData\n * @param {Object<string, *>=} opt_ijData_deprecated\n * @return {void}\n * @suppress {checkTypes}\n */\nfunction $render(opt_data, opt_ijData, opt_ijData_deprecated) {\n  opt_ijData = opt_ijData_deprecated || opt_ijData;\n  /** @type {!goog.soy.data.SanitizedContent|function()|string} */\n  var message = soy.asserts.assertType(goog.isFunction(opt_data.message) || (goog.isString(opt_data.message) || opt_data.message instanceof goog.soy.data.SanitizedContent), 'message', opt_data.message, '!goog.soy.data.SanitizedContent|function()|string');\n  /** @type {!goog.soy.data.SanitizedContent|string} */\n  var spritemap = soy.asserts.assertType(goog.isString(opt_data.spritemap) || opt_data.spritemap instanceof goog.soy.data.SanitizedContent, 'spritemap', opt_data.spritemap, '!goog.soy.data.SanitizedContent|string');\n  /** @type {!goog.soy.data.SanitizedContent|string} */\n  var title = soy.asserts.assertType(goog.isString(opt_data.title) || opt_data.title instanceof goog.soy.data.SanitizedContent, 'title', opt_data.title, '!goog.soy.data.SanitizedContent|string');\n  /** @type {*|null|undefined} */\n  var _handleHide = opt_data._handleHide;\n  /** @type {boolean|null|number|undefined} */\n  var autoClose = soy.asserts.assertType(opt_data.autoClose == null || (goog.isBoolean(opt_data.autoClose) || opt_data.autoClose === 1 || opt_data.autoClose === 0) || goog.isNumber(opt_data.autoClose), 'autoClose', opt_data.autoClose, 'boolean|null|number|undefined');\n  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */\n  var elementClasses = soy.asserts.assertType(opt_data.elementClasses == null || (goog.isString(opt_data.elementClasses) || opt_data.elementClasses instanceof goog.soy.data.SanitizedContent), 'elementClasses', opt_data.elementClasses, '!goog.soy.data.SanitizedContent|null|string|undefined');\n  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */\n  var id = soy.asserts.assertType(opt_data.id == null || (goog.isString(opt_data.id) || opt_data.id instanceof goog.soy.data.SanitizedContent), 'id', opt_data.id, '!goog.soy.data.SanitizedContent|null|string|undefined');\n  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */\n  var style = soy.asserts.assertType(opt_data.style == null || (goog.isString(opt_data.style) || opt_data.style instanceof goog.soy.data.SanitizedContent), 'style', opt_data.style, '!goog.soy.data.SanitizedContent|null|string|undefined');\n  var timeToDisappear__soy232 = autoClose == true ? 8 : autoClose == false ? null : autoClose;\n  $templateAlias1({autoClose: timeToDisappear__soy232, closeable: true, elementClasses: elementClasses, events: {hide: _handleHide}, id: id, message: message, ref: 'alertBase', spritemap: spritemap, style: style, title: title, type: 'toast'}, null, opt_ijData);\n}\nexports.render = $render;\n/**\n * @typedef {{\n *  message: (!goog.soy.data.SanitizedContent|function()|string),\n *  spritemap: (!goog.soy.data.SanitizedContent|string),\n *  title: (!goog.soy.data.SanitizedContent|string),\n *  _handleHide: (*|null|undefined),\n *  autoClose: (boolean|null|number|undefined),\n *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),\n *  id: (!goog.soy.data.SanitizedContent|null|string|undefined),\n *  style: (!goog.soy.data.SanitizedContent|null|string|undefined)\n * }}\n */\n$render.Params;\nif (goog.DEBUG) {\n  $render.soyTemplateName = 'ClayToast.render';\n}\n\nexports.render.params = [\"message\",\"spritemap\",\"title\",\"_handleHide\",\"autoClose\",\"elementClasses\",\"id\",\"style\"];\nexports.render.types = {\"message\":\"html|string\",\"spritemap\":\"string\",\"title\":\"string\",\"_handleHide\":\"any\",\"autoClose\":\"bool|int\",\"elementClasses\":\"string\",\"id\":\"string\",\"style\":\"string\"};\ntemplates = exports;\nreturn exports;\n\n});\n\nclass ClayToast extends Component {}\nSoy.register(ClayToast, templates);\nexport { ClayToast, templates };\nexport default templates;\n/* jshint ignore:end */\n"]}