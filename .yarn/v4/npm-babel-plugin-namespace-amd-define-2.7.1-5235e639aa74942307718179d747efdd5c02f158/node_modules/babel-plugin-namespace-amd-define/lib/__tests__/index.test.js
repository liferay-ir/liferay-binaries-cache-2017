'use strict';

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _babelIpc = require('liferay-npm-build-tools-common/lib/babel-ipc');

var babelIpc = _interopRequireWildcard(_babelIpc);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

var logger = void 0;

beforeEach(function () {
	babelIpc.set(__filename, {
		log: logger = new _pluginLogger2.default()
	});
});

it('logs results correctly', function () {
	var source = '\n\tdefine([], function(){})\n\tif (typeof define === "function" && define.amd) {\n\t\tconsole.log(\'UMD!\');\n\t}\n\t';

	babel.transform(source, {
		filenameRelative: __filename,
		plugins: [_index2.default]
	});

	expect(logger.messages).toMatchSnapshot();
});

it('namespaces unqualified define calls', function () {
	var source = '\n\tdefine([], function(){})\n\t';

	var _babel$transform = babel.transform(source, {
		filenameRelative: __filename,
		plugins: [_index2.default]
	}),
	    code = _babel$transform.code;

	expect(code).toMatchSnapshot();
});

it('does not namespace already qualified define calls', function () {
	var source = '\n\tOther.Namespace.define([], function(){})\n\t';

	var _babel$transform2 = babel.transform(source, {
		filenameRelative: __filename,
		plugins: [_index2.default]
	}),
	    code = _babel$transform2.code;

	expect(code).toMatchSnapshot();
});

describe('does not namespace references to local define identifier', function () {
	it('when it is a variable', function () {
		var source = '\n\t\tlet define = \'x\';\n\n\t\tif(true) {\n\t\t\tif(true) {\n\t\t\t\tconsole.log(define);\n\t\t\t}\n\t    }\n\t\t';

		var _babel$transform3 = babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		}),
		    code = _babel$transform3.code;

		expect(code).toMatchSnapshot();
	});

	it('when it is a function parameter', function () {
		var source = '\n\t\tfunction fn(define) {\n\t\t\tconsole.log(define);\n\t\t};\n\t\t';

		var _babel$transform4 = babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		}),
		    code = _babel$transform4.code;

		expect(code).toMatchSnapshot();
	});

	it('when it is a function', function () {
		var source = '\n\t\tfunction define(x) {\n\t\t\tconsole.log(define);\n\t\t}\n\t\t';

		var _babel$transform5 = babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		}),
		    code = _babel$transform5.code;

		expect(code).toMatchSnapshot();
	});

	it('when it is an object field', function () {
		var source = '\n\t\t\tvar a = {\n\t\t\t\tdefine: function(name, value) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t';

		var _babel$transform6 = babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		}),
		    code = _babel$transform6.code;

		expect(code).toMatchSnapshot();
	});
});
//# sourceMappingURL=index.test.js.map