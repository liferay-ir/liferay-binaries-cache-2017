{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["babel","babelIpc","logger","beforeEach","set","__filename","log","it","source","transform","filenameRelative","plugins","expect","messages","toMatchSnapshot","code","describe"],"mappings":";;AAMA;;IAAYA,K;;AACZ;;IAAYC,Q;;AACZ;;;;AACA;;;;;;;;AATA;;;;;;AAWA,IAAIC,eAAJ;;AAEAC,WAAW,YAAM;AAChBF,UAASG,GAAT,CAAaC,UAAb,EAAyB;AACxBC,OAAMJ,SAAS;AADS,EAAzB;AAGA,CAJD;;AAMAK,GAAG,wBAAH,EAA6B,YAAM;AAClC,KAAMC,iIAAN;;AAOAR,OAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACvBE,oBAAkBL,UADK;AAEvBM,WAAS;AAFc,EAAxB;;AAKAC,QAAOV,OAAOW,QAAd,EAAwBC,eAAxB;AACA,CAdD;;AAgBAP,GAAG,qCAAH,EAA0C,YAAM;AAC/C,KAAMC,2CAAN;;AAD+C,wBAKhCR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,oBAAkBL,UADoB;AAEtCM,WAAS;AAF6B,EAAxB,CALgC;AAAA,KAKxCI,IALwC,oBAKxCA,IALwC;;AAU/CH,QAAOG,IAAP,EAAaD,eAAb;AACA,CAXD;;AAaAP,GAAG,mDAAH,EAAwD,YAAM;AAC7D,KAAMC,2DAAN;;AAD6D,yBAK9CR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,oBAAkBL,UADoB;AAEtCM,WAAS;AAF6B,EAAxB,CAL8C;AAAA,KAKtDI,IALsD,qBAKtDA,IALsD;;AAU7DH,QAAOG,IAAP,EAAaD,eAAb;AACA,CAXD;;AAaAE,SAAS,0DAAT,EAAqE,YAAM;AAC1ET,IAAG,uBAAH,EAA4B,YAAM;AACjC,MAAMC,8HAAN;;AADiC,0BAWlBR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,qBAAkBL,UADoB;AAEtCM,YAAS;AAF6B,GAAxB,CAXkB;AAAA,MAW1BI,IAX0B,qBAW1BA,IAX0B;;AAgBjCH,SAAOG,IAAP,EAAaD,eAAb;AACA,EAjBD;;AAmBAP,IAAG,iCAAH,EAAsC,YAAM;AAC3C,MAAMC,gFAAN;;AAD2C,0BAO5BR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,qBAAkBL,UADoB;AAEtCM,YAAS;AAF6B,GAAxB,CAP4B;AAAA,MAOpCI,IAPoC,qBAOpCA,IAPoC;;AAY3CH,SAAOG,IAAP,EAAaD,eAAb;AACA,EAbD;;AAeAP,IAAG,uBAAH,EAA4B,YAAM;AACjC,MAAMC,8EAAN;;AADiC,0BAOlBR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,qBAAkBL,UADoB;AAEtCM,YAAS;AAF6B,GAAxB,CAPkB;AAAA,MAO1BI,IAP0B,qBAO1BA,IAP0B;;AAYjCH,SAAOG,IAAP,EAAaD,eAAb;AACA,EAbD;;AAeAP,IAAG,4BAAH,EAAiC,YAAM;AACtC,MAAMC,yHAAN;;AADsC,0BASvBR,MAAMS,SAAN,CAAgBD,MAAhB,EAAwB;AACtCE,qBAAkBL,UADoB;AAEtCM,YAAS;AAF6B,GAAxB,CATuB;AAAA,MAS/BI,IAT+B,qBAS/BA,IAT+B;;AActCH,SAAOG,IAAP,EAAaD,eAAb;AACA,EAfD;AAgBA,CAlED","file":"index.test.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as babel from 'babel-core';\nimport * as babelIpc from 'liferay-npm-build-tools-common/lib/babel-ipc';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport plugin from '../index';\n\nlet logger;\n\nbeforeEach(() => {\n\tbabelIpc.set(__filename, {\n\t\tlog: (logger = new PluginLogger()),\n\t});\n});\n\nit('logs results correctly', () => {\n\tconst source = `\n\tdefine([], function(){})\n\tif (typeof define === \"function\" && define.amd) {\n\t\tconsole.log('UMD!');\n\t}\n\t`;\n\n\tbabel.transform(source, {\n\t\tfilenameRelative: __filename,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(logger.messages).toMatchSnapshot();\n});\n\nit('namespaces unqualified define calls', () => {\n\tconst source = `\n\tdefine([], function(){})\n\t`;\n\n\tconst {code} = babel.transform(source, {\n\t\tfilenameRelative: __filename,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(code).toMatchSnapshot();\n});\n\nit('does not namespace already qualified define calls', () => {\n\tconst source = `\n\tOther.Namespace.define([], function(){})\n\t`;\n\n\tconst {code} = babel.transform(source, {\n\t\tfilenameRelative: __filename,\n\t\tplugins: [plugin],\n\t});\n\n\texpect(code).toMatchSnapshot();\n});\n\ndescribe('does not namespace references to local define identifier', () => {\n\tit('when it is a variable', () => {\n\t\tconst source = `\n\t\tlet define = 'x';\n\n\t\tif(true) {\n\t\t\tif(true) {\n\t\t\t\tconsole.log(define);\n\t\t\t}\n\t    }\n\t\t`;\n\n\t\tconst {code} = babel.transform(source, {\n\t\t\tfilenameRelative: __filename,\n\t\t\tplugins: [plugin],\n\t\t});\n\n\t\texpect(code).toMatchSnapshot();\n\t});\n\n\tit('when it is a function parameter', () => {\n\t\tconst source = `\n\t\tfunction fn(define) {\n\t\t\tconsole.log(define);\n\t\t};\n\t\t`;\n\n\t\tconst {code} = babel.transform(source, {\n\t\t\tfilenameRelative: __filename,\n\t\t\tplugins: [plugin],\n\t\t});\n\n\t\texpect(code).toMatchSnapshot();\n\t});\n\n\tit('when it is a function', () => {\n\t\tconst source = `\n\t\tfunction define(x) {\n\t\t\tconsole.log(define);\n\t\t}\n\t\t`;\n\n\t\tconst {code} = babel.transform(source, {\n\t\t\tfilenameRelative: __filename,\n\t\t\tplugins: [plugin],\n\t\t});\n\n\t\texpect(code).toMatchSnapshot();\n\t});\n\n\tit('when it is an object field', () => {\n\t\tconst source = `\n\t\t\tvar a = {\n\t\t\t\tdefine: function(name, value) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t`;\n\n\t\tconst {code} = babel.transform(source, {\n\t\t\tfilenameRelative: __filename,\n\t\t\tplugins: [plugin],\n\t\t});\n\n\t\texpect(code).toMatchSnapshot();\n\t});\n});\n"]}