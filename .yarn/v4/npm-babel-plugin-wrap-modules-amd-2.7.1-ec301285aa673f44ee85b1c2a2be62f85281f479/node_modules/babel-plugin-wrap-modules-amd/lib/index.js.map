{"version":3,"sources":["../src/index.js"],"names":["t","types","wrapVisitor","Identifier","path","dependencies","node","name","parent","isCallExpression","callee","arguments","length","argument0","isLiteral","moduleName","value","visitor","Program","enter","state","exit","opts","traverse","body","Object","keys","map","dep","buildDeps","join","buildDefine","SOURCE","DEPS","babelIpc","get","log","info"],"mappings":";;;;;;kBAqBe,gBAAqB;AAAA,KAAJA,CAAI,QAAXC,KAAW;;AACnC,KAAMC,cAAc;AACnBC,YADmB,sBACRC,IADQ,SACc;AAAA,OAAfC,YAAe,SAAfA,YAAe;;AAChC,OAAMC,OAAOF,KAAKE,IAAlB;;AAEA,OAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC5B,QAAMC,SAASJ,KAAKI,MAApB;;AAEA,QACCR,EAAES,gBAAF,CAAmBD,MAAnB,KACAA,OAAOE,MAAP,KAAkBJ,IADlB,IAEAE,OAAOG,SAAP,CAAiBC,MAAjB,IAA2B,CAH5B,EAIE;AACD,SAAMC,YAAYL,OAAOG,SAAP,CAAiB,CAAjB,CAAlB;;AAEA,SAAIX,EAAEc,SAAF,CAAYD,SAAZ,CAAJ,EAA4B;AAC3B,UAAME,aAAaF,UAAUG,KAA7B;;AAEAX,mBAAaU,UAAb,IAA2BA,UAA3B;AACA;AACD;AACD;AACD;AArBkB,EAApB;;AAwBA,QAAO;AACNE,WAAS;AACRC,YAAS;AACRC,SADQ,iBACFf,IADE,EACIgB,KADJ,EACW;AAClBA,WAAMf,YAAN,GAAqB,EAArB;AACA,KAHO;AAIRgB,QAJQ,gBAIHjB,IAJG,EAIGgB,KAJH,EAIU;AAAA,SACVE,IADU,GACFF,KADE,CACVE,IADU;AAAA,SAEZjB,YAFY,GAEIe,KAFJ,CAEZf,YAFY;;AAIjB;AACA;;AACAD,UAAKmB,QAAL,CAAcrB,WAAd,EAA2B,EAACoB,UAAD,EAAOjB,0BAAP,EAA3B;;AANiB,SAQVC,IARU,GAQFF,IARE,CAQVE,IARU;AAAA,SASVkB,IATU,GASFlB,IATE,CASVkB,IATU;;;AAWjBnB,oBAAeoB,OAAOC,IAAP,CAAYrB,YAAZ,EAA0BsB,GAA1B,CACd;AAAA,oBAAWC,GAAX;AAAA,MADc,CAAf;;AAIA,SAAMC,YAAY,+HAEIxB,aAAaO,MAAb,GAAsB,CAAtB,GAA0B,GAA1B,GAAgC,EAFpC,qCAGIP,aAAayB,IAAb,EAHJ,8BAAlB;;AAMAxB,UAAKkB,IAAL,GAAY,CACXO,YAAY;AACXC,cAAQR,IADG;AAEXS,YAAMJ;AAFK,MAAZ,CADW,CAAZ;;AAOA;;AA5BiB,yBA6BHK,SAASC,GAAT,CAAaf,KAAb,EAAoB;AAAA,aAAO;AACxCgB,YAAK;AADmC,OAAP;AAAA,MAApB,CA7BG;AAAA,SA6BVA,GA7BU,iBA6BVA,GA7BU;;AAiCjBA,SAAIC,IAAJ,CACC,kBADD,EAEC,wBAFD,EAGChC,aAAayB,IAAb,CAAkB,IAAlB,CAHD;AAKA;AA1CO;AADD;AADH,EAAP;AAgDA,C;;AAxFD;;;;AACA;;IAAYI,Q;;AACZ;;;;;;;;AAEA,IAAMH,cAAc,gNAApB;;AAQA;;;AAlBA","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport template from 'babel-template';\nimport * as babelIpc from 'liferay-npm-build-tools-common/lib/babel-ipc';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\n\nconst buildDefine = template(`\n     define(DEPS, function(module, exports, require) {\n        // Make module believe it is running under Node.js\n        var define = undefined;\n \t    SOURCE\n     })\n `);\n\n/**\n * @return {object} a babel visitor\n */\nexport default function({types: t}) {\n\tconst wrapVisitor = {\n\t\tIdentifier(path, {dependencies}) {\n\t\t\tconst node = path.node;\n\n\t\t\tif (node.name === 'require') {\n\t\t\t\tconst parent = path.parent;\n\n\t\t\t\tif (\n\t\t\t\t\tt.isCallExpression(parent) &&\n\t\t\t\t\tparent.callee === node &&\n\t\t\t\t\tparent.arguments.length == 1\n\t\t\t\t) {\n\t\t\t\t\tconst argument0 = parent.arguments[0];\n\n\t\t\t\t\tif (t.isLiteral(argument0)) {\n\t\t\t\t\t\tconst moduleName = argument0.value;\n\n\t\t\t\t\t\tdependencies[moduleName] = moduleName;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\tenter(path, state) {\n\t\t\t\t\tstate.dependencies = {};\n\t\t\t\t},\n\t\t\t\texit(path, state) {\n\t\t\t\t\tconst {opts} = state;\n\t\t\t\t\tlet {dependencies} = state;\n\n\t\t\t\t\t// We must traverse the AST again because some plugins emit\n\t\t\t\t\t// their require() calls after exiting Program node :-(\n\t\t\t\t\tpath.traverse(wrapVisitor, {opts, dependencies});\n\n\t\t\t\t\tconst {node} = path;\n\t\t\t\t\tconst {body} = node;\n\n\t\t\t\t\tdependencies = Object.keys(dependencies).map(\n\t\t\t\t\t\tdep => `'${dep}'`\n\t\t\t\t\t);\n\n\t\t\t\t\tconst buildDeps = template(`[\n                         'module', 'exports', 'require' \n                         ${dependencies.length > 0 ? ',' : ''} \n                         ${dependencies.join()}\n                     ]`);\n\n\t\t\t\t\tnode.body = [\n\t\t\t\t\t\tbuildDefine({\n\t\t\t\t\t\t\tSOURCE: body,\n\t\t\t\t\t\t\tDEPS: buildDeps(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t];\n\n\t\t\t\t\t// Log results\n\t\t\t\t\tconst {log} = babelIpc.get(state, () => ({\n\t\t\t\t\t\tlog: new PluginLogger(),\n\t\t\t\t\t}));\n\n\t\t\t\t\tlog.info(\n\t\t\t\t\t\t'wrap-modules-amd',\n\t\t\t\t\t\t'Detected dependencies:',\n\t\t\t\t\t\tdependencies.join(', ')\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n"]}