{"version":3,"sources":["../src/ClayFileCard.js"],"names":["ClayFileCard","event","emit","ClayComponent","STATE","actionAriaLabel","Config","string","actionItems","actionItemsValidator","data","object","defaultEventHandler","disabled","bool","value","elementClasses","href","icon","id","inputName","inputValue","labels","arrayOf","oneOfType","shapeOf","label","style","oneOf","labelStylesMap","selectable","selected","spritemap","required","stickerClasses","stickerIcon","stickerImageAlt","stickerImageSrc","stickerLabel","stickerShape","stickerStyle","subtitle","title","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,Y;;;;;;;;;;;;AACL;;;;;;2CAMyBC,K,EAAO;AAC/B,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;AAED;;;;;;;;qCAKmBA,K,EAAO;AACzB,QAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB;AACA;;;;EAlByBE,uB;;AAqB3B;;;;;;;AAKAH,aAAaI,KAAb,GAAqB;AACpB;;;;;;;AAOAC,kBAAiBC,mBAAOC,MAAP,EARG;;AAUpB;;;;;;;AAOAC,cAAaC,gCAjBO;;AAmBpB;;;;;;;AAOAC,OAAMJ,mBAAOK,MAAP,EA1Bc;;AA4BpB;;;;;;;;AAQAC,sBAAqBN,mBAAOK,MAAP,EApCD;;AAsCpB;;;;;;;AAOAE,WAAUP,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA7CU;;AA+CpB;;;;;;;AAOAC,iBAAgBV,mBAAOC,MAAP,EAtDI;;AAwDpB;;;;;;;AAOAU,OAAMX,mBAAOC,MAAP,EA/Dc;;AAiEpB;;;;;;;AAOAW,OAAMZ,mBAAOC,MAAP,GAAgBQ,KAAhB,CAAsB,qBAAtB,CAxEc;;AA0EpB;;;;;;;AAOAI,KAAIb,mBAAOC,MAAP,EAjFgB;;AAmFpB;;;;;;;AAOAa,YAAWd,mBAAOC,MAAP,EA1FS;;AA4FpB;;;;;;;AAOAc,aAAYf,mBAAOC,MAAP,EAnGQ;;AAqGpB;;;;;;;AAOAe,SAAQhB,mBAAOiB,OAAP,CACPjB,mBAAOkB,SAAP,CAAiB,CAChBlB,mBAAOC,MAAP,EADgB,EAEhBD,mBAAOmB,OAAP,CAAe;AACdC,SAAOpB,mBAAOC,MAAP,EADO;AAEdoB,SAAOrB,mBAAOsB,KAAP,CAAa,CACnB,QADmB,EAEnB,MAFmB,EAGnB,WAHmB,EAInB,SAJmB,EAKnB,SALmB,CAAb,EAMJb,KANI,CAME,WANF;AAFO,EAAf,CAFgB,CAAjB,CADO,CA5GY;;AA4HpB;;;;;;;AAOAc,iBAAgBvB,mBAAOK,MAAP,EAnII;;AAqIpB;;;;;;;AAOAmB,aAAYxB,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA5IQ;;AA8IpB;;;;;;;AAOAgB,WAAUzB,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CArJU;;AAuJpB;;;;;;;AAOAiB,YAAW1B,mBAAOC,MAAP,GAAgB0B,QAAhB,EA9JS;;AAgKpB;;;;;;;AAOAC,iBAAgB5B,mBAAOC,MAAP,EAvKI;;AAyKpB;;;;;;;AAOA4B,cAAa7B,mBAAOC,MAAP,EAhLO;;AAkLpB;;;;;;;AAOA6B,kBAAiB9B,mBAAOC,MAAP,EAzLG;;AA2LpB;;;;;;;AAOA8B,kBAAiB/B,mBAAOC,MAAP,EAlMG;;AAoMpB;;;;;;;AAOA+B,eAAchC,mBAAOC,MAAP,EA3MM;;AA6MpB;;;;;;;AAOAgC,eAAcjC,mBAAOsB,KAAP,CAAa,CAAC,QAAD,EAAW,SAAX,CAAb,EAAoCb,KAApC,CAA0C,SAA1C,CApNM;;AAsNpB;;;;;;;AAOAyB,eAAclC,mBAAOsB,KAAP,CAAa,CAC1B,QAD0B,EAE1B,MAF0B,EAG1B,MAH0B,EAI1B,OAJ0B,EAK1B,SAL0B,EAM1B,WAN0B,EAO1B,SAP0B,EAQ1B,SAR0B,CAAb,EASXb,KATW,CASL,SATK,CA7NM;;AAwOpB;;;;;;;AAOA0B,WAAUnC,mBAAOC,MAAP,EA/OU;;AAiPpB;;;;;;;AAOAmC,QAAOpC,mBAAOC,MAAP,GAAgB0B,QAAhB;AAxPa,CAArB;;AA2PA,iCAAmB,gBAAnB,EAAqCjC,YAArC;;AAEA2C,mBAAIC,QAAJ,CAAa5C,YAAb,EAA2B6C,yBAA3B;;QAEQ7C,Y,GAAAA,Y;kBACOA,Y","file":"ClayFileCard.js","sourcesContent":["import 'clay-icon';\nimport 'clay-sticker';\nimport './ClayCardBase';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport actionItemsValidator from './action_items_validator';\nimport templates from './ClayFileCard.soy.js';\n\n/**\n * Metal ClayFileCard component.\n * @extends ClayComponent\n */\nclass ClayFileCard extends ClayComponent {\n\t/**\n\t * Continues the propagation of the dropdown action item click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleActionItemClicked(event) {\n\t\treturn !this.emit('itemClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the checkbox changed event\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleItemToggled(event) {\n\t\tthis.emit('itemToggled', event);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayFileCard.STATE = {\n\t/**\n\t * Aria label attribute for the action element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tactionAriaLabel: Config.string(),\n\n\t/**\n\t * List of items to display in the actions menu.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(array|undefined)}\n\t */\n\tactionItems: actionItemsValidator,\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is disabled or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Url to be applied to the title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Icon to be rendered in the visual area of the card.\n\t * @default documents-and-media\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?string}\n\t */\n\ticon: Config.string().value('documents-and-media'),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Name to be applied to the input element.\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t * @default undefined\n\t */\n\tinputName: Config.string(),\n\n\t/**\n\t * Value to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: Config.string(),\n\n\t/**\n\t * Labels of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(array|undefined)}\n\t */\n\tlabels: Config.arrayOf(\n\t\tConfig.oneOfType([\n\t\t\tConfig.string(),\n\t\t\tConfig.shapeOf({\n\t\t\t\tlabel: Config.string(),\n\t\t\t\tstyle: Config.oneOf([\n\t\t\t\t\t'danger',\n\t\t\t\t\t'info',\n\t\t\t\t\t'secondary',\n\t\t\t\t\t'success',\n\t\t\t\t\t'warning',\n\t\t\t\t]).value('secondary'),\n\t\t\t}),\n\t\t])\n\t),\n\n\t/**\n\t * Object that maps specific label values with desired styles.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(object|undefined)}\n\t */\n\tlabelStylesMap: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is selectable or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?bool}\n\t */\n\tselectable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the card is selected or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?bool}\n\t */\n\tselected: Config.bool().value(false),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * CSS classes for the inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerClasses: Config.string(),\n\n\t/**\n\t * Icon to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerIcon: Config.string(),\n\n\t/**\n\t * Alternate text of the image to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageSrc: Config.string(),\n\n\t/**\n\t * Label for the sticker represented in the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerLabel: Config.string(),\n\n\t/**\n\t * Shape for the sticker represented in the card.\n\t * @default rounded\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?string}\n\t */\n\tstickerShape: Config.oneOf(['circle', 'rounded']).value('rounded'),\n\n\t/**\n\t * Style of sticker represented in the card.\n\t * @default primary\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?string}\n\t */\n\tstickerStyle: Config.oneOf([\n\t\t'danger',\n\t\t'dark',\n\t\t'info',\n\t\t'light',\n\t\t'primary',\n\t\t'secondary',\n\t\t'success',\n\t\t'warning',\n\t]).value('primary'),\n\n\t/**\n\t * Subtitle of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\tsubtitle: Config.string(),\n\n\t/**\n\t * Title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {!string}\n\t */\n\ttitle: Config.string().required(),\n};\n\ndefineWebComponent('clay-file-card', ClayFileCard);\n\nSoy.register(ClayFileCard, templates);\n\nexport {ClayFileCard};\nexport default ClayFileCard;\n"]}