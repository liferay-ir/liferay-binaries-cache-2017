{"version":3,"sources":["../src/ClayUserCard.js"],"names":["ClayUserCard","event","emit","ClayComponent","STATE","actionAriaLabel","Config","string","actionItems","actionItemsValidator","data","object","defaultEventHandler","disabled","bool","value","elementClasses","href","icon","id","imageAlt","imageSrc","initials","validator","console","warn","inputName","inputValue","name","required","selectable","selected","spritemap","subtitle","userColorClass","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;AARA;;;AAUA;;;;IAIMA,Y;;;;;;;;;;;;AACL;;;;;;2CAMyBC,K,EAAO;AAC/B,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;AAED;;;;;;;;qCAKmBA,K,EAAO;AACzB,QAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB;AACA;;;;EAlByBE,uB;;AAqB3B;;;;;;;AAKAH,aAAaI,KAAb,GAAqB;AACpB;;;;;;;AAOAC,kBAAiBC,mBAAOC,MAAP,EARG;;AAUpB;;;;;;;AAOAC,cAAaC,gCAjBO;;AAmBpB;;;;;;;AAOAC,OAAMJ,mBAAOK,MAAP,EA1Bc;;AA4BpB;;;;;;;;AAQAC,sBAAqBN,mBAAOK,MAAP,EApCD;;AAsCpB;;;;;;;AAOAE,WAAUP,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CA7CU;;AA+CpB;;;;;;;AAOAC,iBAAgBV,mBAAOC,MAAP,EAtDI;;AAwDpB;;;;;;;AAOAU,OAAMX,mBAAOC,MAAP,EA/Dc;;AAiEpB;;;;;;;AAOAW,OAAMZ,mBAAOC,MAAP,EAxEc;;AA0EpB;;;;;;;AAOAY,KAAIb,mBAAOC,MAAP,EAjFgB;;AAmFpB;;;;;;;AAOAa,WAAUd,mBAAOC,MAAP,EA1FU;;AA4FpB;;;;;;;AAOAc,WAAUf,mBAAOC,MAAP,EAnGU;;AAqGpB;;;;;;;;AAQAe,WAAUhB,mBAAOiB,SAAP,CAAiB,iBAAS;AACnC,MAAIR,KAAJ,EAAW;AACVS,WAAQC,IAAR,CACC,kFADD;AAGA;AACD,EANS,CA7GU;;AAqHpB;;;;;;;AAOAC,YAAWpB,mBAAOC,MAAP,EA5HS;;AA8HpB;;;;;;;AAOAoB,aAAYrB,mBAAOC,MAAP,EArIQ;;AAuIpB;;;;;;;AAOAqB,OAAMtB,mBAAOC,MAAP,GAAgBsB,QAAhB,EA9Ic;;AAgJpB;;;;;;;AAOAC,aAAYxB,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAvJQ;;AAyJpB;;;;;;;AAOAgB,WAAUzB,mBAAOQ,IAAP,GAAcC,KAAd,CAAoB,KAApB,CAhKU;;AAkKpB;;;;;;;AAOAiB,YAAW1B,mBAAOC,MAAP,EAzKS;;AA2KpB;;;;;;;AAOA0B,WAAU3B,mBAAOC,MAAP,EAlLU;;AAoLpB;;;;;;;AAOA2B,iBAAgB5B,mBAAOC,MAAP;AA3LI,CAArB;;AA8LA,iCAAmB,gBAAnB,EAAqCP,YAArC;;AAEAmC,mBAAIC,QAAJ,CAAapC,YAAb,EAA2BqC,yBAA3B;;QAEQrC,Y,GAAAA,Y;kBACOA,Y","file":"ClayUserCard.js","sourcesContent":["import './ClayCardBase';\nimport 'clay-link';\nimport 'clay-sticker';\n// eslint-disable-next-line\nimport { ClayActionsDropdown } from 'clay-dropdown';\nimport {Config} from 'metal-state';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport actionItemsValidator from './action_items_validator';\nimport templates from './ClayUserCard.soy.js';\n\n/**\n * Metal ClayUserCard component.\n * @extends ClayComponent\n */\nclass ClayUserCard extends ClayComponent {\n\t/**\n\t * Continues the propagation of the dropdown action item click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleActionItemClicked(event) {\n\t\treturn !this.emit('itemClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the checkbox changed event\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleItemToggled(event) {\n\t\tthis.emit('itemToggled', event);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayUserCard.STATE = {\n\t/**\n\t * Aria label attribute for the action element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tactionAriaLabel: Config.string(),\n\n\t/**\n\t * List of items to display in the actions menu.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(array|undefined)}\n\t */\n\tactionItems: actionItemsValidator,\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is disabled or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Url to be applied to the title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Icon to be renderer in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayFileCard\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Alternate text of the image.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\timageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\timageSrc: Config.string(),\n\n\t/**\n\t * Initials of the user.\n\t * @default undefined\n\t * @deprecated\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tinitials: Config.validator(value => {\n\t\tif (value) {\n\t\t\tconsole.warn(\n\t\t\t\t'ðŸš¨ `initials` has been deprecated and will be removed in the next major version.'\n\t\t\t);\n\t\t}\n\t}),\n\n\t/**\n\t * Name to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tinputName: Config.string(),\n\n\t/**\n\t * Value to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: Config.string(),\n\n\t/**\n\t * Name of the user.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {!string}\n\t */\n\tname: Config.string().required(),\n\n\t/**\n\t * Flag to indicate if the card is selectable or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?bool}\n\t */\n\tselectable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the card is selected or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?bool}\n\t */\n\tselected: Config.bool().value(false),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * Subtitle of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?(string|undefined)}\n\t */\n\tsubtitle: Config.string(),\n\n\t/**\n\t * Color of the user sticker.\n\t * @default primary\n\t * @instance\n\t * @memberof ClayUserCard\n\t * @type {?string}\n\t */\n\tuserColorClass: Config.string(),\n};\n\ndefineWebComponent('clay-user-card', ClayUserCard);\n\nSoy.register(ClayUserCard, templates);\n\nexport {ClayUserCard};\nexport default ClayUserCard;\n"]}