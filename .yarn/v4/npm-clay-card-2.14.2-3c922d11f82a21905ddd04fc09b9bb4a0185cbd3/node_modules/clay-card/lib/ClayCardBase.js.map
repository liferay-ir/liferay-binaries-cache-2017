{"version":3,"sources":["../src/ClayCardBase.js"],"names":["ClayCardBase","event","emit","ClayComponent","STATE","actionAriaLabel","Config","string","actionItems","actionItemsValidator","contentRenderer","oneOf","value","data","object","defaultEventHandler","disabled","bool","elementClasses","href","icon","id","imageAlt","imageSrc","inputName","inputValue","labels","arrayOf","oneOfType","shapeOf","label","style","labelStylesMap","selectable","selected","spritemap","stickerClasses","stickerIcon","stickerImageAlt","stickerImageSrc","stickerLabel","stickerShape","stickerStyle","subtitle","title","required","Soy","register","templates"],"mappings":"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","file":"ClayCardBase.js","sourcesContent":["import 'clay-checkbox';\nimport 'clay-label';\nimport 'clay-link';\nimport 'clay-sticker';\n// eslint-disable-next-line\nimport { ClayActionsDropdown } from 'clay-dropdown';\nimport {Config} from 'metal-state';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport actionItemsValidator from './action_items_validator';\nimport templates from './ClayCardBase.soy.js';\n\n/**\n * Metal ClayCardBase component.\n * @extends ClayComponent\n */\nclass ClayCardBase extends ClayComponent {\n\t/**\n\t * Continues the propagation of the dropdown action item click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleActionItemClicked(event) {\n\t\treturn !this.emit('itemClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the checkbox changed event\n\t * @param {!Event} event\n\t * @private\n\t */\n\t_handleItemCheckboxClick(event) {\n\t\tthis.emit('itemToggled', event);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayCardBase.STATE = {\n\t/**\n\t * Aria label attribute for the action element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tactionAriaLabel: Config.string(),\n\n\t/**\n\t * List of items to display in the actions menu.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(array|undefined)}\n\t */\n\tactionItems: actionItemsValidator,\n\n\t/**\n\t * Content Renderer name of card.\n\t * @default image\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?array}\n\t */\n\tcontentRenderer: Config.oneOf(['image', 'file', 'user']).value('image'),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is disabled or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Url to be applied to the title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Icon to be rendered in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Alternate text of the image.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\timageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\timageSrc: Config.string(),\n\n\t/**\n\t * Name to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tinputName: Config.string(),\n\n\t/**\n\t * Value to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: Config.string(),\n\n\t/**\n\t * Labels of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(array|undefined)}\n\t */\n\tlabels: Config.arrayOf(\n\t\tConfig.oneOfType([\n\t\t\tConfig.string(),\n\t\t\tConfig.shapeOf({\n\t\t\t\tlabel: Config.string(),\n\t\t\t\tstyle: Config.oneOf([\n\t\t\t\t\t'danger',\n\t\t\t\t\t'info',\n\t\t\t\t\t'secondary',\n\t\t\t\t\t'success',\n\t\t\t\t\t'warning',\n\t\t\t\t]).value('secondary'),\n\t\t\t}),\n\t\t])\n\t),\n\n\t/**\n\t * Object that maps specific label values with desired styles.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(object|undefined)}\n\t * @default undefined\n\t */\n\tlabelStylesMap: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is selectable or not.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?bool}\n\t * @default false\n\t */\n\tselectable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the card is selected or not.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?bool}\n\t * @default false\n\t */\n\tselected: Config.bool().value(false),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t * @default undefined\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * CSS classes for the inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tstickerClasses: Config.string(),\n\n\t/**\n\t * Icon to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tstickerIcon: Config.string(),\n\n\t/**\n\t * Alternate text of the image to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageSrc: Config.string(),\n\n\t/**\n\t * Label for the sticker represented in the card.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t * @default undefined\n\t */\n\tstickerLabel: Config.string(),\n\n\t/**\n\t * Shape for the sticker represented in the card.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?string}\n\t * @default rounded\n\t */\n\tstickerShape: Config.oneOf(['circle', 'rounded']).value('rounded'),\n\n\t/**\n\t * Style of sticker represented in the card.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?string}\n\t * @default primary\n\t */\n\tstickerStyle: Config.oneOf([\n\t\t'danger',\n\t\t'dark',\n\t\t'info',\n\t\t'light',\n\t\t'primary',\n\t\t'secondary',\n\t\t'success',\n\t\t'warning',\n\t]).value('primary'),\n\n\t/**\n\t * Subtitle of the card.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {?(string|undefined)}\n\t * @default undefined\n\t */\n\tsubtitle: Config.string(),\n\n\t/**\n\t * Title of the card.\n\t * @instance\n\t * @memberof ClayCardBase\n\t * @type {!string}\n\t * @default undefined\n\t */\n\ttitle: Config.string().required(),\n};\n\ndefineWebComponent('clay-card', ClayCardBase);\n\nSoy.register(ClayCardBase, templates);\n\nexport {ClayCardBase};\nexport default ClayCardBase;\n"]}