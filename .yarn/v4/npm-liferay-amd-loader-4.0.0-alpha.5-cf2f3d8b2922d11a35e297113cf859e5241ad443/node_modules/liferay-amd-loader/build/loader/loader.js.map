{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/loader/path-resolver.js","webpack:///./src/loader/url-builder.js","webpack:///./src/loader/bootstrap.js","webpack:///./src/loader/loader.js","webpack:///./src/loader/config.js","webpack:///./src/loader/module.js","webpack:///./src/loader/resolvable-promise.js","webpack:///./src/loader/dependency-resolver.js","webpack:///./src/loader/script-loader.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PathResolver","root","dependency","indexOf","moduleParts","split","splice","dependencyParts","dependencyName","length","dependencyPart","concat","slice","push","join","URLBuilder","config","_classCallCheck","this","_config","moduleNames","_this","bufferURL","modulesURL","result","basePath","charAt","forEach","moduleName","getModule","path","_getModulePath","combine","url","_getURLWithParams","_generateBufferURLs","urlMaxLength","urls","urlResult","paths","keys","item","substring","lastIndexOf","defaultURLParams","queryString","map","_loader","cfg","window","__CONFIG__","namespace","undefined","exposeGlobal","loader","Loader","require","define","amd","arguments","document","_pathResolver","Config","_dependencyResolver","DependencyResolver","_urlBuilder","_scriptLoader","ScriptLoader","_requireCallId","packageJson","version","_len","args","Array","_key","defined","showWarnings","console","warn","dependencies","factory","exportedValue","Error","explainResolutions","log","resolvePath","resolve","_this2","_len2","_key2","moduleLoader","requireCallId","success","failure","lastArg","successGiven","penultimateArg","failureGiven","isArray","_ref","apply","_toConsumableArray","stack","error","missingModules","_interceptHandler","resolvedModuleNames","unregisteredModuleNames","rejectTimeout","timeoutRejected","then","resolution","_explainResolution","_throwOnResolutionErrors","addMappings","configMap","addPaths","pathMap","resolvedModules","_getUnregisteredModuleNames","addModule","moduleMap","_setRejectTimeout","loadModules","_waitForModuleDefinitions","clearTimeout","_setModuleImplementations","implementations","_getModuleImplementations","catch","err","handler","type","resolutionErrors","filter","dep","substr","assign","reject","waitTimeout","setTimeout","implemented","Promise","all","getModules","implement","_this3","rejected","rejection","moduleImpl","dependencyImplementations","_createLocalRequire","dependencyModule","getDependency","implementation","fulfilled","_this4","pathResolver","localRequire","_len3","rest","_key3","resolvedPath","toUrl","build","_module","_modules","_maps","_paths","maps","_parse","moduleProperties","Module","entries","_ref2","_slicedToArray","mappings","values","mappedName","_mapModule","defaultValue","contextMap","_mapMatches","match","_typeof","_mapExactMatch","_mapPartialMatch","_mapWildcardMatch","alias","aliasValue","exactMatch","_resolvablePromise","_name","_dependencies","_factory","_implementation","_map","_state","_fetch","ResolvablePromise","new","_define","_implement","fetch","resolved","_assertNotFulfilled","resolvablePromise","capture","promise","_resolve","_reject","jest","_cachedResolutions","modulesParam","encodeURIComponent","options","method","body","response","text","JSON","parse","_document","_injectedScripts","urlBuilder","promises","_loadScript","script","createElement","src","async","onload","onreadystatechange","readyState","onerror","head","appendChild"],"mappings":"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","file":"loader.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * A class to resolve paths inside modules.\n */\nexport default class PathResolver {\n\t/**\n\t * Resolves the path of module\n\t * @param {string} root root path which will be used as reference to resolve\n\t *     \t\t\t\t\t\tthe path of the dependency\n\t * @param {string} dependency the dependency path, which has to be\n\t *     \t\t\t\t\t\t\tresolved\n\t * @return {string} the resolved dependency path.\n\t */\n\tresolvePath(root, dependency) {\n\t\tif (\n\t\t\tdependency === 'require' ||\n\t\t\tdependency === 'exports' ||\n\t\t\tdependency === 'module' ||\n\t\t\t!(dependency.indexOf('.') === 0 || dependency.indexOf('..') === 0)\n\t\t) {\n\t\t\treturn dependency;\n\t\t}\n\n\t\t// Split module directories\n\t\tlet moduleParts = root.split('/');\n\n\t\t// Remove module name\n\t\tmoduleParts.splice(-1, 1);\n\n\t\t// Split dependency directories\n\t\tconst dependencyParts = dependency.split('/');\n\n\t\t// Extract dependency name\n\t\tconst dependencyName = dependencyParts.splice(-1, 1);\n\n\t\tfor (let i = 0; i < dependencyParts.length; i++) {\n\t\t\tconst dependencyPart = dependencyParts[i];\n\n\t\t\tif (dependencyPart === '.') {\n\t\t\t\tcontinue;\n\t\t\t} else if (dependencyPart === '..') {\n\t\t\t\tif (moduleParts.length) {\n\t\t\t\t\tmoduleParts.splice(-1, 1);\n\t\t\t\t} else {\n\t\t\t\t\tmoduleParts = moduleParts.concat(dependencyParts.slice(i));\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmoduleParts.push(dependencyPart);\n\t\t\t}\n\t\t}\n\n\t\tmoduleParts.push(dependencyName);\n\n\t\treturn moduleParts.join('/');\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n *\n */\nexport default class URLBuilder {\n\t/**\n\t * Creates an instance of URLBuilder class\n\t * @constructor\n\t * @param {Config} config\n\t */\n\tconstructor(config) {\n\t\tthis._config = config;\n\t}\n\n\t/**\n\t * Returns a list of URLs from provided list of modules.\n\t * @param {array} moduleNames list of modules for which URLs should be\n\t * \t\t\t\t\t\t\t\tcreated\n\t * @return {array} list of URLs\n\t */\n\tbuild(moduleNames) {\n\t\tconst config = this._config;\n\n\t\tconst bufferURL = [];\n\t\tconst modulesURL = [];\n\t\tlet result = [];\n\n\t\tlet basePath = config.basePath;\n\n\t\tif (basePath.length && basePath.charAt(basePath.length - 1) !== '/') {\n\t\t\tbasePath += '/';\n\t\t}\n\n\t\tmoduleNames.forEach(moduleName => {\n\t\t\tconst module = config.getModule(moduleName);\n\t\t\tconst path = this._getModulePath(module);\n\n\t\t\tif (config.combine) {\n\t\t\t\tbufferURL.push(path);\n\t\t\t\tmodulesURL.push(module.name);\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tmodules: [module.name],\n\t\t\t\t\turl: this._getURLWithParams(config.url + basePath + path),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Add to the result all modules, which have to be combined.\n\t\tif (bufferURL.length) {\n\t\t\tresult = result.concat(\n\t\t\t\tthis._generateBufferURLs(modulesURL, bufferURL, {\n\t\t\t\t\tbasePath,\n\t\t\t\t\turl: config.url,\n\t\t\t\t\turlMaxLength: config.urlMaxLength,\n\t\t\t\t})\n\t\t\t);\n\t\t\tbufferURL.length = 0;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate the appropriate set of URLs based on the list of\n\t * required modules and the maximum allowed URL length\n\t * @param {Array<String>} modules Array of module names\n\t * @param {Array<String>} urls Array of module URLs\n\t * @param {Object} config Configuration object containing URL, basePath and\n\t *     \t\t\t\t\t\turlMaxLength\n\t * @return {Array<Object>} Resulting array of {modules, url} objects\n\t */\n\t_generateBufferURLs(modules, urls, config) {\n\t\tconst basePath = config.basePath;\n\t\tconst result = [];\n\t\tconst urlMaxLength = config.urlMaxLength;\n\n\t\tlet urlResult = {\n\t\t\tmodules: [modules[0]],\n\t\t\turl: config.url + basePath + urls[0],\n\t\t};\n\n\t\tfor (let i = 1; i < urls.length; i++) {\n\t\t\tconst module = modules[i];\n\t\t\tconst path = urls[i];\n\n\t\t\tif (\n\t\t\t\turlResult.url.length + basePath.length + path.length + 1 <\n\t\t\t\turlMaxLength\n\t\t\t) {\n\t\t\t\turlResult.modules.push(module);\n\t\t\t\turlResult.url += '&' + basePath + path;\n\t\t\t} else {\n\t\t\t\tresult.push(urlResult);\n\n\t\t\t\turlResult = {\n\t\t\t\t\tmodules: [module],\n\t\t\t\t\turl: config.url + basePath + path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\turlResult.url = this._getURLWithParams(urlResult.url);\n\n\t\tresult.push(urlResult);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the path for a module. If module has property path, it will be\n\t * returned directly. Otherwise, the name of module will be used and\n\t * extension .js will be added to module name if omitted.\n\t * @param {object} module The module which path should be returned.\n\t * @return {string} Module path.\n\t */\n\t_getModulePath(module) {\n\t\tconst paths = this._config.paths;\n\n\t\tlet path = module.name;\n\n\t\tObject.keys(paths).forEach(function(item) {\n\t\t\tif (path === item || path.indexOf(item + '/') === 0) {\n\t\t\t\tpath = paths[item] + path.substring(item.length);\n\t\t\t}\n\t\t});\n\n\t\tif (path.lastIndexOf('.js') !== path.length - 3) {\n\t\t\tpath += '.js';\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns an url with parameters defined in config.defaultURLParams. If\n\t * config.defaultURLParams is not defined or is an empty map, the url will\n\t * be returned unmodified.\n\t * @param {string} url The url to be returned with parameters.\n\t * @return {string} url The url with parameters.\n\t */\n\t_getURLWithParams(url) {\n\t\tconst config = this._config;\n\n\t\tconst defaultURLParams = config.defaultURLParams || {};\n\n\t\tconst keys = Object.keys(defaultURLParams);\n\n\t\tif (!keys.length) {\n\t\t\treturn url;\n\t\t}\n\n\t\tconst queryString = keys\n\t\t\t.map(function(key) {\n\t\t\t\treturn key + '=' + defaultURLParams[key];\n\t\t\t})\n\t\t\t.join('&');\n\n\t\treturn url + (url.indexOf('?') > -1 ? '&' : '?') + queryString;\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Loader from './loader.js';\n\nconst cfg = window.__CONFIG__ || {};\nconst namespace = typeof cfg.namespace === 'string' ? cfg.namespace : undefined;\nconst exposeGlobal = cfg.exposeGlobal === undefined ? true : cfg.exposeGlobal;\nconst loader = new Loader(cfg);\n\nif (namespace) {\n\tconst ns = window[namespace] ? window[namespace] : {};\n\tns.Loader = loader;\n\twindow[namespace] = ns;\n} else {\n\twindow.Loader = loader;\n}\n\nif (exposeGlobal) {\n\twindow.Loader = loader;\n\twindow.require = Loader.prototype.require.bind(loader);\n\twindow.define = Loader.prototype.define.bind(loader);\n\twindow.define.amd = {};\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Config from './config';\nimport DependencyResolver from './dependency-resolver';\nimport ScriptLoader from './script-loader';\nimport PathResolver from './path-resolver';\nimport URLBuilder from './url-builder';\nimport packageJson from '../../package.json';\n\n/* eslint-disable no-console */\n\n/**\n *\n */\nexport default class Loader {\n\t/**\n\t * Creates an instance of Loader class.\n\t * @namespace Loader\n\t * @constructor\n\t * @param {object=} config Configuration options (defaults to\n\t * \t\t\t\t\t\t\twindow.__CONFIG__)\n\t * @param {object} document DOM document object to use (defaults to\n\t * \t\t\t\t\t\t\t\twindow.document)\n\t */\n\tconstructor(config = null, document = null) {\n\t\tthis._pathResolver = new PathResolver();\n\n\t\tthis._config = new Config(config || window.__CONFIG__);\n\n\t\tthis._dependencyResolver = new DependencyResolver(this._config);\n\t\tthis._urlBuilder = new URLBuilder(this._config);\n\t\tthis._scriptLoader = new ScriptLoader(\n\t\t\tdocument || window.document,\n\t\t\tthis._config\n\t\t);\n\n\t\tthis._requireCallId = 0;\n\t}\n\n\t/**\n\t * Get loader version\n\t * @return {String} the version number as specified in package.json\n\t */\n\tversion() {\n\t\treturn packageJson.version;\n\t}\n\n\t/**\n\t * Defines a module in the system and fires\n\t * @param {string} name the name of the module\n\t * @param {array} dependencies list of module dependencies\n\t * @param {function} factory the AMD factory function of the module\n\t */\n\tdefine(...args) {\n\t\tconst config = this._config;\n\n\t\tconst name = args[0];\n\n\t\tlet module = config.getModule(name);\n\n\t\tif (module && module.defined) {\n\t\t\tif (config.showWarnings) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Liferay AMD Loader: Module '${name}' is being ` +\n\t\t\t\t\t\t'redefined; only the first definition will be used'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet dependencies = args[1];\n\t\tlet factory = args[2];\n\n\t\t// Acccount for call polymorphism\n\t\tif (args.length == 2) {\n\t\t\tfactory = dependencies;\n\t\t\tdependencies = ['require', 'exports', 'module'];\n\t\t}\n\n\t\t// Normalize factory argument\n\t\tif (typeof factory !== 'function') {\n\t\t\tconst exportedValue = factory;\n\n\t\t\tfactory = () => exportedValue;\n\t\t}\n\n\t\t// Do the things\n\t\tmodule = config.getModule(name);\n\n\t\tif (!module) {\n\t\t\tthrow new Error(\n\t\t\t\t`Trying to define a module that was not registered: ${name}\\n` +\n\t\t\t\t\t'This usually means that someone is calling define() ' +\n\t\t\t\t\t'for a module that has not been previously required.'\n\t\t\t);\n\t\t}\n\n\t\tif (module.defined) {\n\t\t\tthrow new Error(\n\t\t\t\t`Trying to define a module more than once: ${name}\\n` +\n\t\t\t\t\t'This usually means that someone is calling define() ' +\n\t\t\t\t\t'more than once for the same module, which can lead to ' +\n\t\t\t\t\t'unexpected results.'\n\t\t\t);\n\t\t}\n\n\t\tif (config.explainResolutions) {\n\t\t\tconsole.log('Liferay AMD Loader:', 'Defining', module.name);\n\t\t}\n\n\t\tmodule.factory = factory;\n\t\tmodule.dependencies = dependencies.map(dependency =>\n\t\t\tthis._pathResolver.resolvePath(name, dependency)\n\t\t);\n\n\t\tmodule.define.resolve(args);\n\t}\n\n\t/**\n\t * Requires list of modules. If a module is not yet registered, it will be\n\t * ignored and its implementation in the provided success callback will be\n\t * left undefined.\n\t * @param {array|string[]} modules Modules can be specified as an array of\n\t * \t\t\t\t\t\t\t\t\tstrings or provided as multiple string\n\t * \t\t\t\t\t\t\t\t\tparameters.\n\t * @param {function} success Callback, which will be invoked in case of\n\t * \t\t\t\t\t\t\t\tsuccess. The provided parameters will be\n\t * \t\t\t\t\t\t\t\timplementations of all required modules.\n\t * @param {function} failure Callback, which will be invoked in case of\n\t * \t\t\t\t\t\t\t\tfailure. One parameter with information\n\t * \t\t\t\t\t\t\t\tabout the error will be provided.\n\t */\n\trequire(...args) {\n\t\tconst moduleLoader = this._scriptLoader;\n\t\tconst config = this._config;\n\t\tconst requireCallId = this._requireCallId++;\n\n\t\tlet moduleNames;\n\t\tlet success;\n\t\tlet failure;\n\n\t\t// Account for call polymorphism\n\t\tif (args.length == 1) {\n\t\t\tmoduleNames = args[0];\n\t\t\tsuccess = undefined;\n\t\t\tfailure = undefined;\n\t\t} else if (args.length == 2) {\n\t\t\tconst lastArg = args[args.length - 1];\n\n\t\t\tif (typeof lastArg === 'function') {\n\t\t\t\tmoduleNames = args[0];\n\t\t\t\tsuccess = lastArg;\n\t\t\t\tfailure = undefined;\n\t\t\t} else if (lastArg == null) {\n\t\t\t\tmoduleNames = args[0];\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t} else {\n\t\t\t\tmoduleNames = args;\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst lastArg = args[args.length - 1];\n\t\t\tlet successGiven = false;\n\n\t\t\tif (typeof lastArg === 'function' || lastArg == null) {\n\t\t\t\tsuccessGiven = true;\n\t\t\t}\n\n\t\t\tif (!successGiven) {\n\t\t\t\tmoduleNames = args;\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t} else {\n\t\t\t\tconst penultimateArg = args[args.length - 2];\n\t\t\t\tlet failureGiven = false;\n\n\t\t\t\tif (\n\t\t\t\t\ttypeof penultimateArg === 'function' ||\n\t\t\t\t\tpenultimateArg == null\n\t\t\t\t) {\n\t\t\t\t\tfailureGiven = true;\n\t\t\t\t}\n\n\t\t\t\tif (!failureGiven) {\n\t\t\t\t\tmoduleNames = args.slice(0, args.length - 1);\n\t\t\t\t\tsuccess = lastArg;\n\t\t\t\t\tfailure = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tmoduleNames = args.slice(0, args.length - 2);\n\t\t\t\t\tsuccess = penultimateArg;\n\t\t\t\t\tfailure = lastArg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten moduleNames argument if necessary\n\t\tif (typeof moduleNames === 'string') {\n\t\t\tmoduleNames = [moduleNames];\n\t\t} else if (moduleNames.length == 1 && Array.isArray(moduleNames[0])) {\n\t\t\tmoduleNames = [].concat(...moduleNames);\n\t\t}\n\n\t\t// Provide default value for success\n\t\tif (success === undefined) {\n\t\t\tsuccess = () => {};\n\t\t}\n\n\t\t// Provide default value for failure\n\t\tif (failure === undefined) {\n\t\t\tconst stack = new Error(\n\t\t\t\t'This is not a real error, but a fake one created to capture ' +\n\t\t\t\t\t\"require()'s caller stack trace\"\n\t\t\t);\n\n\t\t\tfailure = error => {\n\t\t\t\tif (!config.explainResolutions) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.log('---------------------------------------');\n\t\t\t\tconsole.log('Liferay AMD Loader: Unhandled require failure:');\n\t\t\t\tconsole.log(\n\t\t\t\t\t'\\nNOTE: You are seeing this message because you have\\n' +\n\t\t\t\t\t\t'invoked require() without a failure handler. It\\n' +\n\t\t\t\t\t\t'does not necessarily mean that the Loader is\\n' +\n\t\t\t\t\t\t'broken and may be caused by errors in your code or\\n' +\n\t\t\t\t\t\t'third party modules.\\n\\n' +\n\t\t\t\t\t\t'If you want to avoid it make sure to provide a\\n' +\n\t\t\t\t\t\t'failure handler when calling require().\\n\\n'\n\t\t\t\t);\n\t\t\t\tconsole.log('A detailed report of what happened follows:');\n\t\t\t\tconsole.log('  · Require call id:', requireCallId);\n\t\t\t\tconsole.log('  · Required modules:', moduleNames);\n\t\t\t\tconsole.log('  · Error cause:', error);\n\t\t\t\tif (error.missingModules) {\n\t\t\t\t\tconsole.log('  · Missing modules:', error.missingModules);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  · Caller's stack trace:\", stack);\n\t\t\t\tconsole.log('---------------------------------------');\n\t\t\t};\n\t\t}\n\n\t\t// Intercept handlers to explain resolutions\n\t\tsuccess = this._interceptHandler(success, 'success', requireCallId);\n\t\tfailure = this._interceptHandler(failure, 'failure', requireCallId);\n\n\t\t// Global closure variables\n\t\tlet resolvedModuleNames;\n\t\tlet unregisteredModuleNames;\n\t\tlet rejectTimeout;\n\t\tlet timeoutRejected = false;\n\n\t\t// Do the things (note that each then() block contains a synchronous\n\t\t// block of code, that means that between then() blocks may be\n\t\t// interrupted by any parallel call)\n\t\tthis._dependencyResolver\n\t\t\t.resolve(moduleNames)\n\t\t\t.then(resolution => {\n\t\t\t\t// Show extra information when explainResolutions is active\n\t\t\t\tthis._explainResolution(requireCallId, moduleNames, resolution);\n\n\t\t\t\t// Fail if resolution errors present\n\t\t\t\tthis._throwOnResolutionErrors(resolution);\n\n\t\t\t\t// Merge global maps from resolution into config\n\t\t\t\tconfig.addMappings(resolution.configMap);\n\n\t\t\t\t// Merge global paths from resolution into config\n\t\t\t\tconfig.addPaths(resolution.pathMap);\n\n\t\t\t\t// Store resolved module names\n\t\t\t\tresolvedModuleNames = resolution.resolvedModules;\n\n\t\t\t\t// Grab unregistered module names (some of the resolved modules\n\t\t\t\t// may have been registered by a parallel require() call, so we\n\t\t\t\t// are not responsible for loading them).\n\t\t\t\tunregisteredModuleNames = this._getUnregisteredModuleNames(\n\t\t\t\t\tresolvedModuleNames\n\t\t\t\t);\n\n\t\t\t\t// Register the modules\n\t\t\t\tunregisteredModuleNames.forEach(moduleName =>\n\t\t\t\t\tconfig.addModule(moduleName, {\n\t\t\t\t\t\tmap: resolution.moduleMap[moduleName],\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\t// Prepare load timeout\n\t\t\t\trejectTimeout = this._setRejectTimeout(\n\t\t\t\t\tmoduleNames,\n\t\t\t\t\tresolution,\n\t\t\t\t\t(...args) => {\n\t\t\t\t\t\ttimeoutRejected = true;\n\t\t\t\t\t\tfailure(...args);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Load the modules we are responsible for\n\t\t\t\tif (config.explainResolutions) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t\t\t'Fetching',\n\t\t\t\t\t\tunregisteredModuleNames,\n\t\t\t\t\t\t'from require call',\n\t\t\t\t\t\trequireCallId\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn moduleLoader.loadModules(unregisteredModuleNames);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\t// Wait for all unregistered modules to be defined\n\t\t\t\treturn this._waitForModuleDefinitions(resolvedModuleNames);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\t// Everything went well so we can clear the timeout\n\t\t\t\tclearTimeout(rejectTimeout);\n\n\t\t\t\t// Set the implementations of all needed modules. Note that we\n\t\t\t\t// set the implementation of modules not loaded by this\n\t\t\t\t// require() call but it is necessary in case the require()\n\t\t\t\t// call that loaded them aborted because of an error in the\n\t\t\t\t// implementation of some module.\n\t\t\t\tthis._setModuleImplementations(\n\t\t\t\t\trequireCallId,\n\t\t\t\t\tresolvedModuleNames\n\t\t\t\t);\n\n\t\t\t\t// Now get all needed modules implementations\n\t\t\t\tconst implementations = this._getModuleImplementations(\n\t\t\t\t\tmoduleNames\n\t\t\t\t);\n\n\t\t\t\t// And invoke the sucess handler\n\t\t\t\tsuccess(...implementations);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\tif (rejectTimeout) {\n\t\t\t\t\tclearTimeout(rejectTimeout);\n\t\t\t\t}\n\n\t\t\t\tfailure(err);\n\t\t\t});\n\t}\n\n\t/**\n\t * Intercept a require success or failure handler to show information to\n\t * explain resolutions.\n\t * @param {function} handler\n\t * @param {string} type\n\t * @param {number} requireCallId\n\t */\n\t_interceptHandler(handler, type, requireCallId) {\n\t\tconst config = this._config;\n\n\t\treturn (...args) => {\n\t\t\tif (config.explainResolutions) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'Liferay AMD Loader: Invoking',\n\t\t\t\t\ttype,\n\t\t\t\t\t'handler for',\n\t\t\t\t\t'require call',\n\t\t\t\t\trequireCallId\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\thandler(...args);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Explain resolution if flag is active\n\t * @param {number} requireCallId\n\t * @param {Array<string>} moduleNames\n\t * @param {object} resolution\n\t */\n\t_explainResolution(requireCallId, moduleNames, resolution) {\n\t\tconst config = this._config;\n\n\t\tif (config.explainResolutions) {\n\t\t\tconsole.log(\n\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t'Require call',\n\t\t\t\trequireCallId,\n\t\t\t\t'resolved modules',\n\t\t\t\tmoduleNames,\n\t\t\t\t'to',\n\t\t\t\tresolution\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Traverse a resolved dependencies array looking for server sent errors and\n\t * throw an Error if any is found.\n\t * @param {object} resolution the resolution object\n\t * @throws {Error} if a resolution error is found\n\t */\n\t_throwOnResolutionErrors(resolution) {\n\t\tconst resolutionErrors = resolution.resolvedModules\n\t\t\t.filter(dep => dep.indexOf(':ERROR:') === 0)\n\t\t\t.map(dep => dep.substr(7));\n\n\t\tif (resolutionErrors.length > 0) {\n\t\t\tthrow Object.assign(\n\t\t\t\tnew Error(\n\t\t\t\t\t'The following problems where detected while ' +\n\t\t\t\t\t\t'resolving modules:\\n' +\n\t\t\t\t\t\tresolutionErrors.join('\\n')\n\t\t\t\t),\n\t\t\t\t{resolutionErrors}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Filters a list of modules and returns only those which are not yet\n\t * registered.\n\t * @param {array} moduleNames list of module names to be tested\n\t * @return {array} list of modules matching the specified filter\n\t */\n\t_getUnregisteredModuleNames(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn moduleNames.filter(moduleName => !config.getModule(moduleName));\n\t}\n\n\t/**\n\t * Set a timeout (only if allowed by configuration) to reject a Promise if\n\t * a certain set of modules has not been successfully loaded.\n\t * @param {Array} modules the modules to be loaded\n\t * @param {object} resolution the resolution object associated to the\n\t * \t\t\t\t\t\t\t\tmodules\n\t * @param {function} reject the promise reject function\n\t * @return {int} a timeout id or undefined if configuration disabled timeout\n\t */\n\t_setRejectTimeout(modules, resolution, reject) {\n\t\tconst config = this._config;\n\n\t\tif (config.waitTimeout === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn setTimeout(() => {\n\t\t\tconst resolvedModuleNames = resolution.resolvedModules;\n\n\t\t\tconst missingModules = resolvedModuleNames.filter(moduleName => {\n\t\t\t\tconst module = config.getModule(moduleName);\n\t\t\t\treturn !module || !module.implemented;\n\t\t\t});\n\n\t\t\tconst error = Object.assign(\n\t\t\t\tnew Error('Load timeout for modules: ' + modules),\n\t\t\t\t{\n\t\t\t\t\tmodules,\n\t\t\t\t\tresolution,\n\t\t\t\t\tmissingModules,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treject(error);\n\t\t}, config.waitTimeout);\n\t}\n\n\t/**\n\t * Resolves a Promise as soon as all provided modules are defined.\n\t * @param {array} moduleNames list of module names for which to wait\n\t * @return {Promise}\n\t */\n\t_waitForModuleDefinitions(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn Promise.all(\n\t\t\tconfig.getModules(moduleNames).map(module => module.define)\n\t\t);\n\t}\n\n\t/**\n\t * Resolves a Promise as soon as all provided modules are implemented.\n\t * @param {array} moduleNames list of module names for which to wait\n\t * @return {Promise}\n\t */\n\t_waitForModuleImplementations(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn Promise.all(\n\t\t\tconfig.getModules(moduleNames).map(module => module.implement)\n\t\t);\n\t}\n\n\t/**\n\t * Invokes the implementation method of modules passing the implementations\n\t * of its dependencies.\n\t * @throws {Error} as soon as any factory fails\n\t * @param {number} requireCallId\n\t * @param {array} moduleNames list of modules to invoke\n\t */\n\t_setModuleImplementations(requireCallId, moduleNames) {\n\t\tconst config = this._config;\n\n\t\tconfig.getModules(moduleNames).forEach(module => {\n\t\t\t// Skip already implemented modules\n\t\t\tif (module.implemented) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fail for already rejected implementations\n\t\t\tif (module.implement.rejected) {\n\t\t\t\tthrow module.implement.rejection;\n\t\t\t}\n\n\t\t\t// Show info about resolution\n\t\t\tif (config.explainResolutions) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t\t'Implementing',\n\t\t\t\t\tmodule.name,\n\t\t\t\t\t'from require call',\n\t\t\t\t\trequireCallId\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Prepare CommonJS module implementation object\n\t\t\t\tconst moduleImpl = {exports: {}};\n\n\t\t\t\t// Prepare arguments for the AMD factory function\n\t\t\t\tconst dependencyImplementations = module.dependencies.map(\n\t\t\t\t\tdependency => {\n\t\t\t\t\t\tif (dependency === 'exports') {\n\t\t\t\t\t\t\treturn moduleImpl.exports;\n\t\t\t\t\t\t} else if (dependency === 'module') {\n\t\t\t\t\t\t\treturn moduleImpl;\n\t\t\t\t\t\t} else if (dependency === 'require') {\n\t\t\t\t\t\t\treturn this._createLocalRequire(module);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dependencyModule = config.getDependency(\n\t\t\t\t\t\t\t\tmodule.name,\n\t\t\t\t\t\t\t\tdependency\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (!dependencyModule) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Unsatisfied dependency: ${dependency} ` +\n\t\t\t\t\t\t\t\t\t\t`found in module ${module.name}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!dependencyModule.implemented) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Module ${module.name} depends on ` +\n\t\t\t\t\t\t\t\t\t\t`${dependencyModule.name} which is ` +\n\t\t\t\t\t\t\t\t\t\t'not yet implemented (this may be ' +\n\t\t\t\t\t\t\t\t\t\t'due to a cyclic dependency)'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn dependencyModule.implementation;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Invoke AMD factory function\n\t\t\t\tconst result = module.factory(...dependencyImplementations);\n\n\t\t\t\t// Resolve the implementation\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tmodule.implementation = result;\n\t\t\t\t} else {\n\t\t\t\t\tmodule.implementation = moduleImpl.exports;\n\t\t\t\t}\n\n\t\t\t\tmodule.implement.resolve(module.implementation);\n\t\t\t} catch (err) {\n\t\t\t\tif (!module.implement.fulfilled) {\n\t\t\t\t\tmodule.implement.reject(err);\n\t\t\t\t}\n\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Create a function implementing the local require method of the AMD\n\t * specification.\n\t * @param  {Object} module a module descriptor\n\t * @return {function} the local require implementation for the given module\n\t */\n\t_createLocalRequire(module) {\n\t\tconst config = this._config;\n\t\tconst pathResolver = this._pathResolver;\n\n\t\tconst localRequire = (moduleName, ...rest) => {\n\t\t\tif (rest.length > 0) {\n\t\t\t\treturn this.require(moduleName, ...rest);\n\t\t\t} else {\n\t\t\t\tconst resolvedPath = pathResolver.resolvePath(\n\t\t\t\t\tmodule.name,\n\t\t\t\t\tmoduleName\n\t\t\t\t);\n\n\t\t\t\tconst dependencyModule = config.getDependency(\n\t\t\t\t\tmodule.name,\n\t\t\t\t\tresolvedPath\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\t!dependencyModule ||\n\t\t\t\t\t!('implementation' in dependencyModule)\n\t\t\t\t) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Module \"' +\n\t\t\t\t\t\t\tmoduleName +\n\t\t\t\t\t\t\t'\" has not been loaded yet for context: ' +\n\t\t\t\t\t\t\tmodule.name\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn dependencyModule.implementation;\n\t\t\t}\n\t\t};\n\n\t\tlocalRequire.toUrl = moduleName => {\n\t\t\tconst moduleURLs = this._urlBuilder.build([moduleName]);\n\n\t\t\treturn moduleURLs[0].url;\n\t\t};\n\n\t\treturn localRequire;\n\t}\n\n\t/**\n\t * Retrieves module implementations to an array.\n\t * @param {array} moduleNames list of modules, which implementations\n\t * \t\t\t\t\twill be collected\n\t * @return {array} list of modules implementations.\n\t */\n\t_getModuleImplementations(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn config\n\t\t\t.getModules(moduleNames)\n\t\t\t.map(module => module.implementation);\n\t}\n}\n\nLoader.prototype.define.amd = {};\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Module from './module';\n\n/**\n *\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of Configuration class\n\t * @constructor\n\t * @param {object=} cfg configuration properties\n\t */\n\tconstructor(cfg = {}) {\n\t\tthis._modules = {};\n\t\tthis._maps = {};\n\t\tthis._paths = {};\n\n\t\tthis._config = {maps: {}, paths: {}};\n\t\tthis._parse(cfg, 'defaultURLParams', {});\n\t\tthis._parse(cfg, 'explainResolutions', false);\n\t\tthis._parse(cfg, 'showWarnings', false);\n\t\tthis._parse(cfg, 'waitTimeout', 7000);\n\t\tthis._parse(cfg, 'basePath', '/');\n\t\tthis._parse(cfg, 'resolvePath', '/o/js_resolve_modules');\n\t\tthis._parse(cfg, 'combine', false);\n\t\tthis._parse(cfg, 'url', '');\n\t\tthis._parse(cfg, 'urlMaxLength', 2000);\n\t}\n\n\t/**\n\t * Whether to explain how require() calls are resolved\n\t */\n\tget explainResolutions() {\n\t\treturn this._config.explainResolutions;\n\t}\n\n\t/**\n\t * Whether to show development warnings\n\t */\n\tget showWarnings() {\n\t\treturn this._config.showWarnings;\n\t}\n\n\t/**\n\t * Time to wait for module script requests to load (in milliseconds)\n\t */\n\tget waitTimeout() {\n\t\treturn this._config.waitTimeout;\n\t}\n\n\t/**\n\t * The base path from where modules must be retrieved\n\t */\n\tget basePath() {\n\t\treturn this._config.basePath;\n\t}\n\n\t/**\n\t * The path to use when calling the server to resolve module dependencies\n\t */\n\tget resolvePath() {\n\t\treturn this._config.resolvePath;\n\t}\n\n\t/**\n\t * Whether to combine module requests into combo URLs\n\t */\n\tget combine() {\n\t\treturn this._config.combine;\n\t}\n\n\t/**\n\t * The URL of the server\n\t */\n\tget url() {\n\t\treturn this._config.url;\n\t}\n\n\t/**\n\t * The maximum length of a combo URL. If URL is larger than that it is split\n\t * in as many requests as needed.\n\t */\n\tget urlMaxLength() {\n\t\treturn this._config.urlMaxLength;\n\t}\n\n\t/**\n\t * Default parameters to add to the module request URLs\n\t */\n\tget defaultURLParams() {\n\t\treturn this._config.defaultURLParams;\n\t}\n\n\t/**\n\t * An object with registered module paths\n\t */\n\tget paths() {\n\t\treturn this._paths;\n\t}\n\n\t/**\n\t * Adds a module to the configuration with default field values if it\n\t * doesn't exist. Otherwise, throws an exception.\n\t * @param {string} moduleName\n\t * @param {object} moduleProperties initial properties to set on module in\n\t * \t\t\t\t\t\t\t\t\taddition to its name\n\t * @return {Object} the module\n\t */\n\taddModule(moduleName, moduleProperties = {}) {\n\t\tif (this._modules[moduleName]) {\n\t\t\tthrow new Error(`Module is already registered: ${moduleName}`);\n\t\t}\n\n\t\tconst module = new Module(moduleName);\n\n\t\tObject.entries(moduleProperties).forEach(([key, value]) => {\n\t\t\tmodule[key] = value;\n\t\t});\n\n\t\tthis._modules[moduleName] = module;\n\n\t\treturn module;\n\t}\n\n\t/**\n\t * Add mappings to the current configuration\n\t * @param {object} mappings an object with one or more mappings\n\t */\n\taddMappings(mappings) {\n\t\tObject.assign(this._maps, mappings);\n\t}\n\n\t/**\n\t * Add path mappings to the current configuration\n\t * @param {object} paths an object with one or more path mappings\n\t */\n\taddPaths(paths) {\n\t\tObject.assign(this._paths, paths);\n\t}\n\n\t/**\n\t * Returns array with all registered modules or the requested subset of\n\t * them.\n\t * @param {?Array} moduleNames optional list of module names to retrieve\n\t * @return {Array}\n\t */\n\tgetModules(moduleNames = undefined) {\n\t\tif (moduleNames === undefined) {\n\t\t\treturn Object.values(this._modules);\n\t\t}\n\n\t\treturn moduleNames.map(moduleName => this.getModule(moduleName));\n\t}\n\n\t/**\n\t * Returns the registered module for the moduleName.\n\t * @param {string} moduleName the module name\n\t * @return {Object} the registed module object\n\t */\n\tgetModule(moduleName) {\n\t\tlet module = this._modules[moduleName];\n\n\t\tif (!module) {\n\t\t\tconst mappedName = this._mapModule(moduleName);\n\n\t\t\tmodule = this._modules[mappedName];\n\t\t}\n\n\t\treturn module;\n\t}\n\n\t/**\n\t * Returns the registered module for the dependency of moduleName.\n\t * @param {string} moduleName the module name\n\t * @param {string} dependencyName the dependencyName name\n\t * @return {Object} the registed module object\n\t */\n\tgetDependency(moduleName, dependencyName) {\n\t\tconst module = this.getModule(moduleName);\n\n\t\tlet dependencyModule = this._modules[dependencyName];\n\n\t\tif (!dependencyModule) {\n\t\t\tconst mappedName = this._mapModule(dependencyName, module.map);\n\n\t\t\tdependencyModule = this._modules[mappedName];\n\t\t}\n\n\t\treturn dependencyModule;\n\t}\n\n\t/**\n\t * Parse a configuration property to store it in _config.\n\t * @param {object} cfg\n\t * @param {string} property\n\t * @param {*} defaultValue\n\t */\n\t_parse(cfg, property, defaultValue) {\n\t\tthis._config[property] = cfg.hasOwnProperty(property)\n\t\t\t? cfg[property]\n\t\t\t: defaultValue;\n\t}\n\n\t/**\n\t * Maps module names to their aliases. Example:\n\t * __CONFIG__.maps = {\n\t *      liferay: 'liferay@1.0.0'\n\t * }\n\t *\n\t * When someone does require('liferay/html/js/ac.es',...),\n\t * if the module 'liferay/html/js/ac.es' is not defined,\n\t * then a corresponding alias will be searched. If found, the name will be\n\t * replaced, so it will look like user did\n\t * require('liferay@1.0.0/html/js/ac.es',...).\n\t *\n\t * Additionally, modules can define a custom map to alias module names just\n\t * in the context of that module loading operation. When present, the\n\t * contextual module mapping will take precedence over the general one.\n\t * @param {string} moduleName The module which have to be mapped\n\t * @param {?object} contextMap Contextual module mapping information\n\t *     relevant to the current load operation\n\t * @return {array} The mapped module\n\t */\n\t_mapModule(moduleName, contextMap) {\n\t\tif (contextMap) {\n\t\t\tmoduleName = this._mapMatches(moduleName, contextMap);\n\t\t}\n\n\t\tif (Object.keys(this._maps).length > 0) {\n\t\t\tmoduleName = this._mapMatches(moduleName, this._maps);\n\t\t}\n\n\t\treturn moduleName;\n\t}\n\n\t/**\n\t * Creates a function that transforms module names based on a provided\n\t * set of mappings.\n\t * @param {string} moduleName module name\n\t * @param {object} maps Mapping information.\n\t * @return {function} The generated mapper function\n\t */\n\t_mapMatches(moduleName, maps) {\n\t\tlet match = maps[moduleName];\n\n\t\tif (match) {\n\t\t\tif (typeof match === 'object') {\n\t\t\t\treturn match.value;\n\t\t\t}\n\n\t\t\treturn match;\n\t\t}\n\n\t\tmatch = this._mapExactMatch(moduleName, maps);\n\n\t\t// Apply partial mapping only if exactMatch hasn't been\n\t\t// already applied for this mapping\n\t\tif (!match) {\n\t\t\tmatch = this._mapPartialMatch(moduleName, maps);\n\t\t}\n\n\t\t// Apply * mapping only if neither exactMatch nor\n\t\t// partialMatch have been already applied for this mapping\n\t\tif (!match) {\n\t\t\tmatch = this._mapWildcardMatch(moduleName, maps);\n\t\t}\n\n\t\treturn match || moduleName;\n\t}\n\n\t/**\n\t * Transforms a module name using the exactMatch mappings\n\t * in a provided mapping object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapExactMatch(module, maps) {\n\t\tfor (const alias in maps) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(maps, alias)) {\n\t\t\t\tconst aliasValue = maps[alias];\n\n\t\t\t\tif (aliasValue.value && aliasValue.exactMatch) {\n\t\t\t\t\tif (module === alias) {\n\t\t\t\t\t\treturn aliasValue.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms a module name using the partial mappings\n\t * in a provided mapping object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapPartialMatch(module, maps) {\n\t\tfor (const alias in maps) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(maps, alias)) {\n\t\t\t\tlet aliasValue = maps[alias];\n\n\t\t\t\tif (!aliasValue.exactMatch) {\n\t\t\t\t\tif (aliasValue.value) {\n\t\t\t\t\t\taliasValue = aliasValue.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (module === alias || module.indexOf(alias + '/') === 0) {\n\t\t\t\t\t\treturn aliasValue + module.substring(alias.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms a module name using the wildcard mapping in a provided mapping\n\t * object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapWildcardMatch(module, maps) {\n\t\tif (typeof maps['*'] === 'function') {\n\t\t\treturn maps['*'](module);\n\t\t}\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport ResolvablePromise from './resolvable-promise';\n\n/**\n * A module descriptor\n */\nexport default class Module {\n\t/**\n\t * @param {string} name name of module\n\t */\n\tconstructor(name) {\n\t\tthis._name = name;\n\t\tthis._dependencies = undefined;\n\t\tthis._factory = undefined;\n\t\tthis._implementation = undefined;\n\t\tthis._map = undefined;\n\n\t\tthis._state = {\n\t\t\t_fetch: ResolvablePromise.new(),\n\t\t\t_define: ResolvablePromise.new(),\n\t\t\t_implement: ResolvablePromise.new(),\n\t\t};\n\t}\n\n\t/**\n\t * Name of module\n\t */\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * Dependencies of module\n\t */\n\tget dependencies() {\n\t\treturn this._dependencies;\n\t}\n\n\t/**\n\t * AMD factory function\n\t */\n\tget factory() {\n\t\treturn this._factory;\n\t}\n\n\t/**\n\t * Result of factory invocation (module.exports)\n\t */\n\tget implementation() {\n\t\treturn this._implementation;\n\t}\n\n\t/**\n\t * Local module mappings for module\n\t */\n\tget map() {\n\t\treturn this._map;\n\t}\n\n\t/**\n\t * Get the fetch promise which is fulfilled when the script containing the\n\t * module definition has been loaded/failed.\n\t *\n\t * Note that a module may be defined even if it is not yet fetched because\n\t * define() gets called while the script is being loaded.\n\t * @return {ResolvablePromise}\n\t */\n\tget fetch() {\n\t\treturn this._state._fetch;\n\t}\n\n\t/**\n\t * Shorthand for this.fetch.resolved\n\t */\n\tget fetched() {\n\t\treturn this.fetch.resolved;\n\t}\n\n\t/**\n\t * Get the define promise which if fulfilled when the script had been\n\t * registered by the AMD define() function.\n\t *\n\t * Note that definition does not imply implementation.\n\t *\n\t * Also note that a module may be defined even if it is not yet fetched\n\t * because define() gets called while the script is being loaded.\n\t * @return {ResolvablePromise}\n\t */\n\tget define() {\n\t\treturn this._state._define;\n\t}\n\n\t/**\n\t * Shorthand for this.define.resolved\n\t */\n\tget defined() {\n\t\treturn this.define.resolved;\n\t}\n\n\t/**\n\t * Get the implement promise which if fulfilled when the module has been\n\t * defined and its AMD factory function has been invoked successfully.\n\t */\n\tget implement() {\n\t\treturn this._state._implement;\n\t}\n\n\t/**\n\t * Shorthand for this.implement.resolved\n\t */\n\tget implemented() {\n\t\treturn this.implement.resolved;\n\t}\n\n\t/**\n\t * Name of module\n\t * @param {string} name\n\t */\n\tset name(name) {\n\t\tthrow new Error(`Name of module ${this.name} is read-only`);\n\t}\n\n\t/**\n\t * Dependencies of module\n\t * @param {Array} dependencies\n\t */\n\tset dependencies(dependencies) {\n\t\tif (this._dependencies) {\n\t\t\tthrow new Error(`Dependencies of module ${this.name} already set`);\n\t\t}\n\n\t\tthis._dependencies = dependencies;\n\t}\n\n\t/**\n\t * AMD factory function\n\t * @param {function} factory\n\t */\n\tset factory(factory) {\n\t\tif (this._factory) {\n\t\t\tthrow new Error(`Factory of module ${this.name} already set`);\n\t\t}\n\n\t\tthis._factory = factory;\n\t}\n\n\t/**\n\t * Result of factory invocation (module.exports)\n\t * @param {*} implementation\n\t */\n\tset implementation(implementation) {\n\t\tif (this._implementation) {\n\t\t\tthrow new Error(\n\t\t\t\t`Implementation of module ${this.name} already set`\n\t\t\t);\n\t\t}\n\n\t\tthis._implementation = implementation;\n\t}\n\n\t/**\n\t * Local module mappings for module\n\t * @param {object} map\n\t */\n\tset map(map) {\n\t\tif (this._map) {\n\t\t\tthrow new Error(\n\t\t\t\t`Local module map of module ${this.name} already set`\n\t\t\t);\n\t\t}\n\n\t\tthis._map = map;\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * A Promise with resolve() and reject() methods so that it can be fulfilled\n * asynchronously from outside instead of the callback.\n *\n * Because Promise cannot be extended in the usual way, we need to do some\n * magic to define this class.\n */\nexport default class ResolvablePromise {\n\t/**\n\t * Don't construct ResolvablePromise objects directly: rely on\n\t * ResolvablePromise.new() instead.\n\t */\n\tconstructor() {\n\t\tthrow new Error(\n\t\t\t\"Don't construct ResolvablePromise objects directly: \" +\n\t\t\t\t'rely on ResolvablePromise.new() instead'\n\t\t);\n\t}\n}\n\nResolvablePromise.new = () => {\n\tconst capture = {};\n\n\tconst promise = new Promise((resolve, reject) => {\n\t\tcapture._resolve = resolve;\n\t\tcapture._reject = reject;\n\t});\n\n\tObject.assign(promise, capture, {\n\t\tfulfilled: false,\n\t\tresolved: false,\n\t\trejected: false,\n\t\tresolution: undefined,\n\t\trejection: undefined,\n\t});\n\n\tpromise.resolve = value => resolve(promise, value);\n\tpromise.reject = error => reject(promise, error);\n\n\t// This is to avoid UnhandledPromiseRejectionWarning errors during the tests\n\tif (typeof jest !== 'undefined') {\n\t\tpromise.catch(() => {});\n\t}\n\n\treturn promise;\n};\n\n/**\n * Resolve the promise\n * @param {ResolvablePromise} resolvablePromise\n * @param {*} value\n */\nfunction resolve(resolvablePromise, value) {\n\t_assertNotFulfilled(resolvablePromise);\n\n\tresolvablePromise.fulfilled = true;\n\tresolvablePromise.resolved = true;\n\tresolvablePromise.resolution = value;\n\n\tresolvablePromise._resolve(value);\n}\n\n/**\n * Reject the Promise\n * @param {ResolvablePromise} resolvablePromise\n * @param {Error} error\n */\nfunction reject(resolvablePromise, error) {\n\t_assertNotFulfilled(resolvablePromise);\n\n\tresolvablePromise.fulfilled = true;\n\tresolvablePromise.rejected = true;\n\tresolvablePromise.rejection = error;\n\n\tresolvablePromise._reject(error);\n}\n\n/**\n * Throws if Promise is already fulfilled\n * @param {ResolvablePromise} resolvablePromise\n */\nfunction _assertNotFulfilled(resolvablePromise) {\n\tif (resolvablePromise.fulfilled) {\n\t\tthrow new Error('Promise already fulfilled');\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport PathResolver from './path-resolver';\n\n/**\n * A class that calls the server to resolve module dependencies.\n */\nexport default class DependencyResolver {\n\t/**\n\t * Creates an instance of DependencyResolver class\n\t * @constructor\n\t * @param {Config} config\n\t */\n\tconstructor(config) {\n\t\tthis._config = config;\n\n\t\tthis._pathResolver = new PathResolver();\n\t\tthis._cachedResolutions = {};\n\t}\n\n\t/**\n\t * Resolves modules dependencies\n\t * @param {array} modules list of modules which dependencies should be\n\t *     \t\t\t\t\t\tresolved\n\t * @return {array} list of module names, representing module dependencies\n\t *     \t\t\t\t(module name itself is being returned too)\n\t */\n\tresolve(modules) {\n\t\tif (modules === undefined || modules.length == 0) {\n\t\t\tthrow new Error(`Argument 'modules' cannot be undefined or empty`);\n\t\t}\n\n\t\tconst config = this._config;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst resolution = this._cachedResolutions[modules];\n\n\t\t\tif (resolution) {\n\t\t\t\tresolve(resolution);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modulesParam = `modules=${encodeURIComponent(modules)}`;\n\t\t\tlet url = `${config.resolvePath}?${modulesParam}`;\n\t\t\tlet options = {};\n\n\t\t\tif (url.length > config.urlMaxLength) {\n\t\t\t\turl = config.resolvePath;\n\t\t\t\toptions = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: modulesParam,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tfetch(url, options)\n\t\t\t\t.then(response => response.text())\n\t\t\t\t.then(text => {\n\t\t\t\t\tconst resolution = JSON.parse(text);\n\t\t\t\t\tthis._cachedResolutions[modules] = resolution;\n\t\t\t\t\tresolve(resolution);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport URLBuilder from './url-builder';\n\n/* eslint-disable no-console */\n\n/**\n * A class responsible for loading the script resources that contain modules\n * from the server.\n */\nexport default class ScriptLoader {\n\t/**\n\t * @param {object} document DOM document object to use\n\t * @param {Config} config\n\t */\n\tconstructor(document, config) {\n\t\tthis._document = document;\n\t\tthis._config = config;\n\n\t\tthis._urlBuilder = new URLBuilder(config);\n\n\t\tthis._injectedScripts = {};\n\t}\n\n\t/**\n\t * Loads list of modules\n\t * @param {Array} moduleNames List of modules to be loaded.\n\t * @return {Promise} Promise which will be resolved as soon as all modules\n\t * \t\t\t\t\t\thave been loaded.\n\t */\n\tloadModules(moduleNames) {\n\t\tconst urlBuilder = this._urlBuilder;\n\n\t\tif (moduleNames.length == 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst modulesURLs = urlBuilder.build(moduleNames);\n\n\t\tconst promises = modulesURLs.map(modulesURL =>\n\t\t\tthis._loadScript(modulesURL)\n\t\t);\n\n\t\treturn Promise.all(promises);\n\t}\n\n\t/**\n\t * Places a script element on the page and waits for it to load.\n\t * @param {object} modulesURL an object with two properties:\n\t * \t\t\t\t\t- modules: list of the modules which should be loaded\n\t * \t\t\t\t\t- url: the URL from which the modules should be loaded\n\t * @return {Promise} a Promise which will be resolved as soon as the script\n\t * \t\t\t\t\t\tis loaded\n\t */\n\t_loadScript(modulesURL) {\n\t\tconst config = this._config;\n\t\tconst modules = config.getModules(modulesURL.modules);\n\n\t\tlet script = this._injectedScripts[modulesURL.url];\n\n\t\tif (!script) {\n\t\t\tscript = this._document.createElement('script');\n\n\t\t\tscript.src = modulesURL.url;\n\t\t\tscript.async = false;\n\n\t\t\tscript.onload = script.onreadystatechange = () => {\n\t\t\t\tif (\n\t\t\t\t\tthis.readyState &&\n\t\t\t\t\tthis.readyState !== 'complete' &&\n\t\t\t\t\tthis.readyState !== 'load'\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscript.onload = script.onreadystatechange = null;\n\t\t\t\tscript.onerror = null;\n\n\t\t\t\tmodules.forEach(module => {\n\t\t\t\t\tif (module.fetch.fulfilled) {\n\t\t\t\t\t\tif (config.showWarnings) {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`Liferay AMD Loader: Module '${module.name}' ` +\n\t\t\t\t\t\t\t\t\t`is being fetched from\\n${script.src}\\n` +\n\t\t\t\t\t\t\t\t\t`but was already fetched from\\n` +\n\t\t\t\t\t\t\t\t\t(module.fetch.resolved\n\t\t\t\t\t\t\t\t\t\t? module.fetch.resolution.src\n\t\t\t\t\t\t\t\t\t\t: module.fetch.rejection.script.src)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodule.fetch.resolve(script);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscript.onerror = () => {\n\t\t\t\tscript.onload = script.onreadystatechange = null;\n\t\t\t\tscript.onerror = null;\n\n\t\t\t\tconst error = Object.assign(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Unable to load script from URL ${modulesURL.url}`\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\turl: modulesURL.url,\n\t\t\t\t\t\tmodules: modulesURL.modules,\n\t\t\t\t\t\tscript,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tmodules.forEach(module => module.fetch.reject(error));\n\t\t\t};\n\n\t\t\tthis._injectedScripts[modulesURL.url] = script;\n\t\t\tthis._document.head.appendChild(script);\n\t\t}\n\n\t\treturn Promise.all(modules.map(module => module.fetch));\n\t}\n}\n"],"sourceRoot":""}