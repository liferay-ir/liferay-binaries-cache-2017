{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/loader/path-resolver.js","webpack:///./src/loader/url-builder.js","webpack:///./src/loader/bootstrap.js","webpack:///./src/loader/loader.js","webpack:///./src/loader/config.js","webpack:///./src/loader/module.js","webpack:///./src/loader/resolvable-promise.js","webpack:///./src/loader/dependency-resolver.js","webpack:///./src/loader/script-loader.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","length","configurable","writable","PathResolver","root","dependency","indexOf","moduleParts","split","splice","dependencyParts","dependencyName","dependencyPart","concat","slice","push","join","URLBuilder","config","this","_config","moduleNames","_this","bufferURL","modulesURL","result","basePath","charAt","forEach","moduleName","getModule","path","_getModulePath","combine","url","_getURLWithParams","_generateBufferURLs","urlMaxLength","urls","urlResult","paths","keys","item","substring","lastIndexOf","defaultURLParams","queryString","map","cfg","window","__CONFIG__","namespace","exposeGlobal","loader","Loader","require","define","amd","a","u","f","Array","isArray","from","arguments","document","TypeError","_pathResolver","Config","_dependencyResolver","DependencyResolver","_urlBuilder","_scriptLoader","ScriptLoader","_requireCallId","packageJson","version","_len","args","_key","defined","showWarnings","console","warn","dependencies","factory","exportedValue","Error","explainResolutions","log","resolvePath","resolve","_this2","_len2","_key2","moduleLoader","requireCallId","success","failure","lastArg","successGiven","penultimateArg","failureGiven","_ref","apply","_toConsumableArray","stack","error","missingModules","_interceptHandler","resolvedModuleNames","unregisteredModuleNames","rejectTimeout","timeoutRejected","then","resolution","_explainResolution","_throwOnResolutionErrors","addMappings","configMap","addPaths","pathMap","resolvedModules","_getUnregisteredModuleNames","addModule","moduleMap","_setRejectTimeout","loadModules","_waitForModuleDefinitions","clearTimeout","_setModuleImplementations","implementations","_getModuleImplementations","catch","err","handler","type","resolutionErrors","filter","dep","substr","assign","reject","waitTimeout","setTimeout","implemented","Promise","all","getModules","implement","_this3","rejected","rejection","moduleImpl","dependencyImplementations","_createLocalRequire","dependencyModule","getDependency","implementation","fulfilled","_this4","pathResolver","localRequire","_len3","rest","_key3","resolvedPath","toUrl","build","_modules","_maps","_paths","maps","_parse","moduleProperties","Module","entries","_ref2","_slicedToArray","mappings","values","mappedName","_mapModule","defaultValue","contextMap","_mapMatches","match","_typeof","_mapExactMatch","_mapPartialMatch","_mapWildcardMatch","alias","aliasValue","exactMatch","_name","_dependencies","_factory","_implementation","_map","_state","_fetch","ResolvablePromise","new","_define","_implement","fetch","resolved","_assertNotFulfilled","resolvablePromise","capture","promise","_resolve","_reject","jest","_cachedResolutions","modulesParam","encodeURIComponent","options","method","body","response","text","JSON","parse","_document","_injectedScripts","urlBuilder","promises","_loadScript","script","createElement","src","async","onload","onreadystatechange","readyState","onerror","head","appendChild"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,KACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,KAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,cAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,YAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,cAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA2B,SAC3B,WAAiC,OAAA3B,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAkB,EAAAC,GAAsD,OAAAlB,OAAAmB,UAAAC,eAAA3B,KAAAwB,EAAAC,IAGtDhC,EAAAmC,EAAA,GAIAnC,IAAAoC,EAAA,cAAAC,EAAAf,EAAAO,GAAA,aAAAf,OAAAC,eAAAO,EAAA,cAAAD,OAAA,QAAAH,EAAA,oBAAAmB,IAAAf,GAAA,QAAAO,EAAA,EAAAA,EAAAP,EAAAgB,OAAAT,IAAA,KAAAX,EAAAI,EAAAO,GAAAX,EAAAF,WAAAE,EAAAF,aAAA,EAAAE,EAAAqB,cAAA,YAAArB,MAAAsB,UAAA,GAAA1B,OAAAC,eAAAsB,EAAAnB,EAAAS,IAAAT,IAAA,gBAAAI,EAAAO,EAAAX,GAAA,OAAAW,GAAAQ,EAAAf,EAAAW,UAAAJ,GAAAX,GAAAmB,EAAAf,EAAAJ,GAAAI,GAAA,GCzEqBmB,8KASRC,EAAMC,GACjB,GACgB,YAAfA,GACe,YAAfA,GACe,WAAfA,GAC8B,IAA5BA,EAAWC,QAAQ,MAA2C,IAA7BD,EAAWC,QAAQ,MAEtD,OAAOD,EAIR,IAAIE,EAAcH,EAAKI,MAAM,KAG7BD,EAAYE,QAAQ,EAAG,GAQvB,IALA,IAAMC,EAAkBL,EAAWG,MAAM,KAGnCG,EAAiBD,EAAgBD,QAAQ,EAAG,GAEzC3C,EAAI,EAAGA,EAAI4C,EAAgBV,OAAQlC,IAAK,CAChD,IAAM8C,EAAiBF,EAAgB5C,GAEvC,GAAuB,MAAnB8C,EAEG,GAAuB,OAAnBA,EAAyB,CACnC,IAAIL,EAAYP,OAET,CACNO,EAAcA,EAAYM,OAAOH,EAAgBI,MAAMhD,IAEvD,MAJAyC,EAAYE,QAAQ,EAAG,QAOxBF,EAAYQ,KAAKH,GAMnB,OAFAL,EAAYQ,KAAKJ,GAEVJ,EAAYS,KAAK,SAAAjB,EAnDLI,GAmDKnB,EAAAQ,QAnDLW,0UCAAc,aAMpB,SAAAA,EAAYC,iGAAQC,KAAAF,GACnBE,KAAKC,QAAUF,0CASVG,GAAa,IAAAC,EAAAH,KACZD,EAASC,KAAKC,QAEdG,KACAC,KACFC,KAEAC,EAAWR,EAAOQ,SAiCtB,OA/BIA,EAAS1B,QAAmD,MAAzC0B,EAASC,OAAOD,EAAS1B,OAAS,KACxD0B,GAAY,KAGbL,EAAYO,QAAQ,SAAAC,GACnB,IAAMhE,EAASqD,EAAOY,UAAUD,GAC1BE,EAAOT,EAAKU,eAAenE,GAE7BqD,EAAOe,SACVV,EAAUR,KAAKgB,GACfP,EAAWT,KAAKlD,EAAOQ,OAEvBoD,EAAOV,MACN/C,SAAUH,EAAOQ,MACjB6D,IAAKZ,EAAKa,kBAAkBjB,EAAOgB,IAAMR,EAAWK,OAMnDR,EAAUvB,SACbyB,EAASA,EAAOZ,OACfM,KAAKiB,oBAAoBZ,EAAYD,GACpCG,WACAQ,IAAKhB,EAAOgB,IACZG,aAAcnB,EAAOmB,gBAGvBd,EAAUvB,OAAS,GAGbyB,8CAYYzD,EAASsE,EAAMpB,GAUlC,IATA,IAAMQ,EAAWR,EAAOQ,SAClBD,KACAY,EAAenB,EAAOmB,aAExBE,GACHvE,SAAUA,EAAQ,IAClBkE,IAAKhB,EAAOgB,IAAMR,EAAWY,EAAK,IAG1BxE,EAAI,EAAGA,EAAIwE,EAAKtC,OAAQlC,IAAK,CACrC,IAAMD,EAASG,EAAQF,GACjBiE,EAAOO,EAAKxE,GAGjByE,EAAUL,IAAIlC,OAAS0B,EAAS1B,OAAS+B,EAAK/B,OAAS,EACvDqC,GAEAE,EAAUvE,QAAQ+C,KAAKlD,GACvB0E,EAAUL,KAAO,IAAMR,EAAWK,IAElCN,EAAOV,KAAKwB,GAEZA,GACCvE,SAAUH,GACVqE,IAAKhB,EAAOgB,IAAMR,EAAWK,IAShC,OAJAQ,EAAUL,IAAMf,KAAKgB,kBAAkBI,EAAUL,KAEjDT,EAAOV,KAAKwB,GAELd,yCAUO5D,GACd,IAAM2E,EAAQrB,KAAKC,QAAQoB,MAEvBT,EAAOlE,EAAOQ,KAYlB,OAVAG,OAAOiE,KAAKD,GAAOZ,QAAQ,SAASc,GAC/BX,IAASW,GAAqC,IAA7BX,EAAKzB,QAAQoC,EAAO,OACxCX,EAAOS,EAAME,GAAQX,EAAKY,UAAUD,EAAK1C,WAIvC+B,EAAKa,YAAY,SAAWb,EAAK/B,OAAS,IAC7C+B,GAAQ,OAGFA,4CAUUG,GACjB,IAEMW,EAFS1B,KAAKC,QAEYyB,qBAE1BJ,EAAOjE,OAAOiE,KAAKI,GAEzB,IAAKJ,EAAKzC,OACT,OAAOkC,EAGR,IAAMY,EAAcL,EAClBM,IAAI,SAAS1D,GACb,OAAOA,EAAM,IAAMwD,EAAiBxD,KAEpC2B,KAAK,KAEP,OAAOkB,GAAOA,EAAI5B,QAAQ,MAAQ,EAAI,IAAM,KAAOwC,QA1JhC7B,GA0JgC6B,UA1JhC7B,gCCHrB,IAAArC,EAAA,SAAAmB,GAAA,OAAAA,KAAAb,WAAAa,EAAA,CAAAP,QAAAO,GAAA,CAAArC,EAAA,IAEMsF,EAAMC,OAAOC,eACbC,EAAqC,iBAAlBH,EAAIG,UAAyBH,EAAIG,iBACpDC,WAAeJ,EAAII,cAAoCJ,EAAII,aAC3DC,EAAS,IAAIC,UAAON,GAE1B,GAAIG,EAAW,CACd,IAAMhE,EAAK8D,OAAOE,GAAaF,OAAOE,MACtChE,EAAGmE,OAASD,EACZJ,OAAOE,GAAahE,OAEpB8D,OAAOK,OAASD,EAGbD,IACHH,OAAOK,OAASD,EAChBJ,OAAOM,QAAUD,UAAO3D,UAAU4D,QAAQjE,KAAK+D,GAC/CJ,OAAOO,OAASF,UAAO3D,UAAU6D,OAAOlE,KAAK+D,GAC7CJ,OAAOO,OAAOC,oVCnBf/F,EAAA,IAAAI,EAAAK,EACAT,EAAA,IAAAgG,EAAAvF,EACAT,EAAA,IAAAiG,EAAAxF,EACAT,EAAA,IAAAK,EAAAI,EACAT,EAAA,IAAAoC,EAAA3B,EACAT,EAAA,aAAAS,EAAA4B,GAAA,OAAAA,KAAAb,WAAAa,EAAA,CAAAP,QAAAO,GAAA,SAAA6D,EAAA7D,GAAA,GAAA8D,MAAAC,QAAA/D,GAAA,SAAAf,EAAA,EAAAO,EAAAsE,MAAA9D,EAAAC,QAAAhB,EAAAe,EAAAC,OAAAhB,IAAAO,EAAAP,GAAAe,EAAAf,GAAA,OAAAO,EAAA,OAAAsE,MAAAE,KAAAhE,GAAA,IAOqBuD,aAUpB,SAAAA,IAA4C,IAAhCpC,EAAgC8C,UAAAhE,OAAA,YAAAgE,UAAA,GAAAA,UAAA,GAAvB,KAAMC,EAAiBD,UAAAhE,OAAA,YAAAgE,UAAA,GAAAA,UAAA,GAAN,eAAAjE,EAAAf,GAAA,KAAAe,aAAAf,GAAA,UAAAkF,UAAA,sCAAM/C,KAAAmC,GAC3CnC,KAAKgD,cAAgB,IAAIhE,UAEzBgB,KAAKC,QAAU,IAAIgD,UAAOlD,GAAU+B,OAAOC,YAE3C/B,KAAKkD,oBAAsB,IAAIC,UAAmBnD,KAAKC,SACvDD,KAAKoD,YAAc,IAAItD,UAAWE,KAAKC,SACvCD,KAAKqD,cAAgB,IAAIC,UACxBR,GAAYhB,OAAOgB,SACnB9C,KAAKC,SAGND,KAAKuD,eAAiB,SAAA9F,EAAAmB,EAAA,EAAAV,IAAA,UAAAN,MAAA,WAQtB,OAAO4F,UAAYC,yCASJ,QAAAtD,EAAAH,KACTD,EAASC,KAAKC,QADLyD,EAAAb,UAAAhE,OAAN8E,EAAMjB,MAAAgB,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAf,UAAAe,GAGf,IAAM1G,EAAOyG,EAAK,GAEdjH,EAASqD,EAAOY,UAAUzD,GAE9B,GAAIR,GAAUA,EAAOmH,QAChB9D,EAAO+D,cACVC,QAAQC,KACP,+BAA+B9G,EAA/B,oEAHH,CAWA,IAAI+G,EAAeN,EAAK,GACpBO,EAAUP,EAAK,GASnB,GANmB,GAAfA,EAAK9E,SACRqF,EAAUD,EACVA,GAAgB,UAAW,UAAW,WAIhB,mBAAZC,EAAwB,CAClC,IAAMC,EAAgBD,EAEtBA,EAAU,kBAAMC,GAMjB,KAFAzH,EAASqD,EAAOY,UAAUzD,IAGzB,MAAM,IAAIkH,MACT,sDAAsDlH,EAAtD,6GAMF,GAAIR,EAAOmH,QACV,MAAM,IAAIO,MACT,6CAA6ClH,EAA7C,mIAOE6C,EAAOsE,oBACVN,QAAQO,IAAI,sBAAuB,WAAY5H,EAAOQ,MAGvDR,EAAOwH,QAAUA,EACjBxH,EAAOuH,aAAeA,EAAarC,IAAI,SAAA1C,GAAA,OACtCiB,EAAK6C,cAAcuB,YAAYrH,EAAMgC,KAGtCxC,EAAO2F,OAAOmC,QAAQb,sCAiBN,QAAAc,EAAAzE,KAAA0E,EAAA7B,UAAAhE,OAAN8E,EAAMjB,MAAAgC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhB,EAAMgB,GAAA9B,UAAA8B,GAChB,IAAMC,EAAe5E,KAAKqD,cACpBtD,EAASC,KAAKC,QACd4E,EAAgB7E,KAAKuD,iBAEvBrD,SACA4E,SACAC,SAGJ,GAAmB,GAAfpB,EAAK9E,OACRqB,EAAcyD,EAAK,GACnBmB,SACAC,cACM,GAAmB,GAAfpB,EAAK9E,OAAa,CAC5B,IAAMmG,EAAUrB,EAAKA,EAAK9E,OAAS,GAEZ,mBAAZmG,GACV9E,EAAcyD,EAAK,GACnBmB,EAAUE,EACVD,UACqB,MAAXC,GACV9E,EAAcyD,EAAK,GACnBmB,SACAC,WAEA7E,EAAcyD,EACdmB,SACAC,cAEK,CACN,IAAMC,EAAUrB,EAAKA,EAAK9E,OAAS,GAC/BoG,KAMJ,GAJuB,mBAAZD,GAAqC,MAAXA,IACpCC,MAGIA,EAIE,CACN,IAAMC,EAAiBvB,EAAKA,EAAK9E,OAAS,GACtCsG,KAGuB,mBAAnBD,GACW,MAAlBA,IAEAC,MAGIA,GAKJjF,EAAcyD,EAAKhE,MAAM,EAAGgE,EAAK9E,OAAS,GAC1CiG,EAAUI,EACVH,EAAUC,IANV9E,EAAcyD,EAAKhE,MAAM,EAAGgE,EAAK9E,OAAS,GAC1CiG,EAAUE,EACVD,eAjBD7E,EAAcyD,EACdmB,SACAC,SAyBF,GAA2B,iBAAhB7E,EACVA,GAAeA,QACT,GAA0B,GAAtBA,EAAYrB,QAAe6D,MAAMC,QAAQzC,EAAY,IAAK,KAAAkF,EACpElF,GAAckF,MAAG1F,OAAH2F,MAAAD,EAAAE,EAAapF,IAS5B,YALI4E,IACHA,EAAU,uBAIPC,EAAuB,CAC1B,IAAMQ,EAAQ,IAAInB,MACjB,8FAIDW,EAAU,SAAAS,GACJzF,EAAOsE,qBAIZN,QAAQO,IAAI,2CACZP,QAAQO,IAAI,kDACZP,QAAQO,IACP,gUAQDP,QAAQO,IAAI,+CACZP,QAAQO,IAAI,uBAAwBO,GACpCd,QAAQO,IAAI,wBAAyBpE,GACrC6D,QAAQO,IAAI,mBAAoBkB,GAC5BA,EAAMC,gBACT1B,QAAQO,IAAI,uBAAwBkB,EAAMC,gBAE3C1B,QAAQO,IAAI,4BAA6BiB,GACzCxB,QAAQO,IAAI,6CAKdQ,EAAU9E,KAAK0F,kBAAkBZ,EAAS,UAAWD,GACrDE,EAAU/E,KAAK0F,kBAAkBX,EAAS,UAAWF,GAGrD,IAAIc,SACAC,SACAC,SACAC,KAKJ9F,KAAKkD,oBACHsB,QAAQtE,GACR6F,KAAK,SAAAC,GAmDL,OAjDAvB,EAAKwB,mBAAmBpB,EAAe3E,EAAa8F,GAGpDvB,EAAKyB,yBAAyBF,GAG9BjG,EAAOoG,YAAYH,EAAWI,WAG9BrG,EAAOsG,SAASL,EAAWM,SAG3BX,EAAsBK,EAAWO,iBAKjCX,EAA0BnB,EAAK+B,4BAC9Bb,IAIuBlF,QAAQ,SAAAC,GAAA,OAC/BX,EAAO0G,UAAU/F,GAChBkB,IAAKoE,EAAWU,UAAUhG,OAK5BmF,EAAgBpB,EAAKkC,kBACpBzG,EACA8F,EACA,WACCF,KACAf,4BAKEhF,EAAOsE,oBACVN,QAAQO,IACP,sBACA,WACAsB,EACA,oBACAf,GAIKD,EAAagC,YAAYhB,KAEhCG,KAAK,WAEL,IAAID,EAGJ,OAAOrB,EAAKoC,0BAA0BlB,KAEtCI,KAAK,WAEL,IAAID,EAAJ,CAGAgB,aAAajB,GAObpB,EAAKsC,0BACJlC,EACAc,GAID,IAAMqB,EAAkBvC,EAAKwC,0BAC5B/G,GAID4E,iBAAWkC,OAEXE,MAAM,SAAAC,GAEFrB,IAEAD,GACHiB,aAAajB,GAGdd,EAAQoC,gDAWOC,EAASC,EAAMxC,GAChC,IAAM9E,EAASC,KAAKC,QAEpB,OAAO,WACFF,EAAOsE,oBACVN,QAAQO,IACP,+BACA+C,EACA,cACA,eACAxC,GAIF,IACCuC,0BACC,MAAOD,GACRpD,QAAQyB,MAAM2B,gDAWEtC,EAAe3E,EAAa8F,GAC/BhG,KAAKC,QAEToE,oBACVN,QAAQO,IACP,sBACA,eACAO,EACA,mBACA3E,EACA,KACA8F,oDAWsBA,GACxB,IAAMsB,EAAmBtB,EAAWO,gBAClCgB,OAAO,SAAAC,GAAA,OAAkC,IAA3BA,EAAIrI,QAAQ,aAC1ByC,IAAI,SAAA4F,GAAA,OAAOA,EAAIC,OAAO,KAExB,GAAIH,EAAiBzI,OAAS,EAC7B,MAAMxB,OAAOqK,OACZ,IAAItD,MACH,mEAECkD,EAAiBzH,KAAK,QAEvByH,yEAWwBpH,GAC3B,IAAMH,EAASC,KAAKC,QAEpB,OAAOC,EAAYqH,OAAO,SAAA7G,GAAA,OAAeX,EAAOY,UAAUD,+CAYzC7D,EAASmJ,EAAY2B,GACtC,IAAM5H,EAASC,KAAKC,QAEpB,GAA2B,IAAvBF,EAAO6H,YAIX,OAAOC,WAAW,WACjB,IAEMpC,EAFsBO,EAAWO,gBAEIgB,OAAO,SAAA7G,GACjD,IAAMhE,EAASqD,EAAOY,UAAUD,GAChC,OAAQhE,IAAWA,EAAOoL,cAGrBtC,EAAQnI,OAAOqK,OACpB,IAAItD,MAAM,6BAA+BvH,IAExCA,UACAmJ,aACAP,mBAIFkC,EAAOnC,IACLzF,EAAO6H,+DAQe1H,GACzB,IAAMH,EAASC,KAAKC,QAEpB,OAAO8H,QAAQC,IACdjI,EAAOkI,WAAW/H,GAAa0B,IAAI,SAAAlF,GAAA,OAAUA,EAAO2F,gEASxBnC,GAC7B,IAAMH,EAASC,KAAKC,QAEpB,OAAO8H,QAAQC,IACdjI,EAAOkI,WAAW/H,GAAa0B,IAAI,SAAAlF,GAAA,OAAUA,EAAOwL,+DAW5BrD,EAAe3E,GAAa,IAAAiI,EAAAnI,KAC/CD,EAASC,KAAKC,QAEpBF,EAAOkI,WAAW/H,GAAaO,QAAQ,SAAA/D,GAEtC,IAAIA,EAAOoL,YAAX,CAKA,GAAIpL,EAAOwL,UAAUE,SACpB,MAAM1L,EAAOwL,UAAUG,UAIpBtI,EAAOsE,oBACVN,QAAQO,IACP,sBACA,eACA5H,EAAOQ,KACP,oBACA2H,GAIF,IAEC,IAAMyD,GAAc7L,YAGd8L,EAA4B7L,EAAOuH,aAAarC,IACrD,SAAA1C,GACC,GAAmB,YAAfA,EACH,OAAOoJ,EAAW7L,QACZ,GAAmB,WAAfyC,EACV,OAAOoJ,EACD,GAAmB,YAAfpJ,EACV,OAAOiJ,EAAKK,oBAAoB9L,GAEhC,IAAM+L,EAAmB1I,EAAO2I,cAC/BhM,EAAOQ,KACPgC,GAGD,IAAKuJ,EACJ,MAAM,IAAIrE,MACT,2BAA2BlF,EAA3B,oBACoBxC,EAAOQ,MAI7B,IAAKuL,EAAiBX,YACrB,MAAM,IAAI1D,MACT,UAAU1H,EAAOQ,KAAjB,eACIuL,EAAiBvL,KADrB,0EAOF,OAAOuL,EAAiBE,iBAMrBrI,EAAS5D,EAAOwH,QAAPmB,MAAA3I,EAAA4I,EAAkBiD,IAIhC7L,EAAOiM,wBADJrI,EACqBA,EAEAgI,EAAW7L,QAGpCC,EAAOwL,UAAU1D,QAAQ9H,EAAOiM,gBAC/B,MAAOxB,GAKR,MAJKzK,EAAOwL,UAAUU,WACrBlM,EAAOwL,UAAUP,OAAOR,GAGnBA,kDAWWzK,GAAQ,IAAAmM,EAAA7I,KACrBD,EAASC,KAAKC,QACd6I,EAAe9I,KAAKgD,cAEpB+F,EAAe,SAACrI,GAAwB,QAAAsI,EAAAnG,UAAAhE,OAAToK,EAASvG,MAAAsG,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAATD,EAASC,EAAA,GAAArG,UAAAqG,GAC7C,GAAID,EAAKpK,OAAS,EACjB,OAAOgK,EAAKzG,QAALiD,MAAAwD,GAAanI,GAAbhB,OAA4BuJ,IAEnC,IAAME,EAAeL,EAAavE,YACjC7H,EAAOQ,KACPwD,GAGK+H,EAAmB1I,EAAO2I,cAC/BhM,EAAOQ,KACPiM,GAGD,KACEV,GACC,mBAAoBA,GAEtB,MAAM,IAAIrE,MACT,WACC1D,EACA,0CACAhE,EAAOQ,MAIV,OAAOuL,EAAiBE,gBAU1B,OANAI,EAAaK,MAAQ,SAAA1I,GAGpB,OAFmBmI,EAAKzF,YAAYiG,OAAO3I,IAEzB,GAAGK,KAGfgI,oDASkB7I,GAGzB,OAFeF,KAAKC,QAGlBgI,WAAW/H,GACX0B,IAAI,SAAAlF,GAAA,OAAUA,EAAOiM,uBAroBJxG,GAqoBIwG,UAroBJxG,EAyoBrBA,EAAO3D,UAAU6D,OAAOC,69BCrpBxB/F,EAAA,IAKqB0G,aAMpB,SAAAA,IAAsB,IAAVpB,EAAUgB,UAAAhE,OAAA,YAAAgE,UAAA,GAAAA,UAAA,gBAAAjE,EAAAf,GAAA,KAAAe,aAAAf,GAAA,UAAAkF,UAAA,sCAAA/C,KAAAiD,GACrBjD,KAAKsJ,YACLtJ,KAAKuJ,SACLvJ,KAAKwJ,UAELxJ,KAAKC,SAAWwJ,QAAUpI,UAC1BrB,KAAK0J,OAAO7H,EAAK,uBACjB7B,KAAK0J,OAAO7H,EAAK,yBACjB7B,KAAK0J,OAAO7H,EAAK,mBACjB7B,KAAK0J,OAAO7H,EAAK,cAAe,KAChC7B,KAAK0J,OAAO7H,EAAK,WAAY,KAC7B7B,KAAK0J,OAAO7H,EAAK,cAAe,yBAChC7B,KAAK0J,OAAO7H,EAAK,cACjB7B,KAAK0J,OAAO7H,EAAK,MAAO,IACxB7B,KAAK0J,OAAO7H,EAAK,eAAgB,YAAAlF,EAAAiC,EAAA,EAAAV,IAAA,YAAAN,MAAA,SAkFxB8C,GAAmC,IAAvBiJ,EAAuB9G,UAAAhE,OAAA,YAAAgE,UAAA,GAAAA,UAAA,MAC5C,GAAI7C,KAAKsJ,SAAS5I,GACjB,MAAM,IAAI0D,MAAJ,iCAA2C1D,GAGlD,IAAMhE,EAAS,IAAIkN,UAAOlJ,GAQ1B,OANArD,OAAOwM,QAAQF,GAAkBlJ,QAAQ,SAAA2E,GAAkB,IAAA0E,EAAAC,EAAA3E,EAAA,GAAhBlH,EAAgB4L,EAAA,GAAXlM,EAAWkM,EAAA,GAC1DpN,EAAOwB,GAAON,IAGfoC,KAAKsJ,SAAS5I,GAAchE,EAErBA,sCAOIsN,GACX3M,OAAOqK,OAAO1H,KAAKuJ,MAAOS,oCAOlB3I,GACRhE,OAAOqK,OAAO1H,KAAKwJ,OAAQnI,wCASQ,IAAAlB,EAAAH,KAAzBE,EAAyB2C,UAAAhE,OAAA,YAAAgE,UAAA,GAAAA,UAAA,UACnC,gBAAI3C,EACI7C,OAAO4M,OAAOjK,KAAKsJ,UAGpBpJ,EAAY0B,IAAI,SAAAlB,GAAA,OAAcP,EAAKQ,UAAUD,uCAQ3CA,GACT,IAAIhE,EAASsD,KAAKsJ,SAAS5I,GAE3B,IAAKhE,EAAQ,CACZ,IAAMwN,EAAalK,KAAKmK,WAAWzJ,GAEnChE,EAASsD,KAAKsJ,SAASY,GAGxB,OAAOxN,wCASMgE,EAAYlB,GACzB,IAAM9C,EAASsD,KAAKW,UAAUD,GAE1B+H,EAAmBzI,KAAKsJ,SAAS9J,GAErC,IAAKiJ,EAAkB,CACtB,IAAMyB,EAAalK,KAAKmK,WAAW3K,EAAgB9C,EAAOkF,KAE1D6G,EAAmBzI,KAAKsJ,SAASY,GAGlC,OAAOzB,iCASD5G,EAAKtD,EAAU6L,GACrBpK,KAAKC,QAAQ1B,GAAYsD,EAAIpD,eAAeF,GACzCsD,EAAItD,GACJ6L,qCAuBO1J,EAAY2J,GAStB,OARIA,IACH3J,EAAaV,KAAKsK,YAAY5J,EAAY2J,IAGvChN,OAAOiE,KAAKtB,KAAKuJ,OAAO1K,OAAS,IACpC6B,EAAaV,KAAKsK,YAAY5J,EAAYV,KAAKuJ,QAGzC7I,sCAUIA,EAAY+I,GACvB,IAAIc,EAAQd,EAAK/I,GAEjB,OAAI6J,EACkB,qBAAVA,EAAP,YAAAC,EAAOD,IACHA,EAAM3M,MAGP2M,IAGRA,EAAQvK,KAAKyK,eAAe/J,EAAY+I,MAKvCc,EAAQvK,KAAK0K,iBAAiBhK,EAAY+I,IAKtCc,IACJA,EAAQvK,KAAK2K,kBAAkBjK,EAAY+I,IAGrCc,GAAS7J,0CAWFhE,EAAQ+M,GACtB,IAAK,IAAMmB,KAASnB,EACnB,GAAIpM,OAAOmB,UAAUC,eAAe3B,KAAK2M,EAAMmB,GAAQ,CACtD,IAAMC,EAAapB,EAAKmB,GAExB,GAAIC,EAAWjN,OAASiN,EAAWC,YAC9BpO,IAAWkO,EACd,OAAOC,EAAWjN,gDAeNlB,EAAQ+M,GACxB,IAAK,IAAMmB,KAASnB,EACnB,GAAIpM,OAAOmB,UAAUC,eAAe3B,KAAK2M,EAAMmB,GAAQ,CACtD,IAAIC,EAAapB,EAAKmB,GAEtB,IAAKC,EAAWC,aACXD,EAAWjN,QACdiN,EAAaA,EAAWjN,OAGrBlB,IAAWkO,GAAyC,IAAhClO,EAAOyC,QAAQyL,EAAQ,MAC9C,OAAOC,EAAanO,EAAO8E,UAAUoJ,EAAM/L,mDAe9BnC,EAAQ+M,GACzB,GAAyB,mBAAdA,EAAK,KACf,OAAOA,EAAK,KAAK/M,8CAvSlB,OAAOsD,KAAKC,QAAQoE,wDAOpB,OAAOrE,KAAKC,QAAQ6D,iDAOpB,OAAO9D,KAAKC,QAAQ2H,6CAOpB,OAAO5H,KAAKC,QAAQM,6CAOpB,OAAOP,KAAKC,QAAQsE,4CAOpB,OAAOvE,KAAKC,QAAQa,oCAOpB,OAAOd,KAAKC,QAAQc,yCAQpB,OAAOf,KAAKC,QAAQiB,sDAOpB,OAAOlB,KAAKC,QAAQyB,+CAOpB,OAAO1B,KAAKwJ,aA3FOvG,GA2FPuG,UA3FOvG,8XCLrB1G,EAAA,IAKqBqN,aAIpB,SAAAA,EAAY1M,iGAAM8C,KAAA4J,GACjB5J,KAAK+K,MAAQ7N,EACb8C,KAAKgL,qBACLhL,KAAKiL,gBACLjL,KAAKkL,uBACLlL,KAAKmL,YAELnL,KAAKoL,QACJC,OAAQC,UAAkBC,MAC1BC,QAASF,UAAkBC,MAC3BE,WAAYH,UAAkBC,8CAQ/B,OAAOvL,KAAK+K,oBA0FJ7N,GACR,MAAM,IAAIkH,MAAJ,kBAA4BpE,KAAK9C,KAAjC,oBAAAgB,IAAA,eAAAV,IAAA,WApFN,OAAOwC,KAAKgL,4BA2FI/G,GAChB,GAAIjE,KAAKgL,cACR,MAAM,IAAI5G,MAAJ,0BAAoCpE,KAAK9C,KAAzC,gBAGP8C,KAAKgL,cAAgB/G,kCAzFrB,OAAOjE,KAAKiL,uBAgGD/G,GACX,GAAIlE,KAAKiL,SACR,MAAM,IAAI7G,MAAJ,qBAA+BpE,KAAK9C,KAApC,gBAGP8C,KAAKiL,SAAW/G,yCA9FhB,OAAOlE,KAAKkL,8BAqGMvC,GAClB,GAAI3I,KAAKkL,gBACR,MAAM,IAAI9G,MAAJ,4BACuBpE,KAAK9C,KAD5B,gBAKP8C,KAAKkL,gBAAkBvC,8BArGvB,OAAO3I,KAAKmL,mBA4GLvJ,GACP,GAAI5B,KAAKmL,KACR,MAAM,IAAI/G,MAAJ,8BACyBpE,KAAK9C,KAD9B,gBAKP8C,KAAKmL,KAAOvJ,gCAvGZ,OAAO5B,KAAKoL,OAAOC,uCAOnB,OAAOrL,KAAK0L,MAAMC,wCAclB,OAAO3L,KAAKoL,OAAOI,wCAOnB,OAAOxL,KAAKqC,OAAOsJ,2CAQnB,OAAO3L,KAAKoL,OAAOK,+CAOnB,OAAOzL,KAAKkI,UAAUyD,eAzGH/B,GAyGG+B,UAzGH/B,qFCEA0B,EAKpB,SAAAA,IACC,eAAA1M,EAAAf,GAAA,KAAAe,aAAAf,GAAA,UAAAkF,UAAA,sCADa/C,KAAAsL,GACP,IAAIlH,MACT,gGAmEH,SAASwH,EAAoBC,GAC5B,GAAIA,EAAkBjD,UACrB,MAAM,IAAIxE,MAAM,6BAAAvG,EAAAQ,QA5EGiN,EAarBA,EAAkBC,IAAM,WACvB,IAAMO,KAEAC,EAAU,IAAIhE,QAAQ,SAACvD,EAASmD,GACrCmE,EAAQE,SAAWxH,EACnBsH,EAAQG,QAAUtE,IAmBnB,OAhBAtK,OAAOqK,OAAOqE,EAASD,GACtBlD,aACA+C,YACAvD,YACApC,kBACAqC,mBAGD0D,EAAQvH,QAAU,SAAA5G,GAAA,OAgBnB,SAAiBiO,EAAmBjO,GACnCgO,EAAoBC,GAEpBA,EAAkBjD,aAClBiD,EAAkBF,YAClBE,EAAkB7F,WAAapI,EAE/BiO,EAAkBG,SAASpO,GAP5B,CAhBoCmO,EAASnO,IAC5CmO,EAAQpE,OAAS,SAAAnC,GAAA,OA8BlB,SAAgBqG,EAAmBrG,GAClCoG,EAAoBC,GAEpBA,EAAkBjD,aAClBiD,EAAkBzD,YAClByD,EAAkBxD,UAAY7C,EAE9BqG,EAAkBI,QAAQzG,GAP3B,CA9BkCuG,EAASvG,IAGtB,oBAAT0G,MACVH,EAAQ7E,MAAM,cAGR6E,+XC5CRxP,EAAA,IAKqB4G,aAMpB,SAAAA,EAAYpD,iGAAQC,KAAAmD,GACnBnD,KAAKC,QAAUF,EAEfC,KAAKgD,cAAgB,IAAIhE,UACzBgB,KAAKmM,gEAUEtP,GAAS,IAAAsD,EAAAH,KAChB,YAAInD,GAA2C,GAAlBA,EAAQgC,OACpC,MAAM,IAAIuF,MAAJ,mDAGP,IAAMrE,EAASC,KAAKC,QAEpB,OAAO,IAAI8H,QAAQ,SAACvD,EAASmD,GAC5B,IAAM3B,EAAa7F,EAAKgM,mBAAmBtP,GAE3C,GAAImJ,EACHxB,EAAQwB,OADT,CAKA,IAAMoG,aAA0BC,mBAAmBxP,GAC/CkE,EAAShB,EAAOwE,YAAhB,IAA+B6H,EAC/BE,KAEAvL,EAAIlC,OAASkB,EAAOmB,eACvBH,EAAMhB,EAAOwE,YACb+H,GACCC,OAAQ,OACRC,KAAMJ,IAIRV,MAAM3K,EAAKuL,GACTvG,KAAK,SAAA0G,GAAA,OAAYA,EAASC,SAC1B3G,KAAK,SAAA2G,GACL,IAAM1G,EAAa2G,KAAKC,MAAMF,GAC9BvM,EAAKgM,mBAAmBtP,GAAWmJ,EACnCxB,EAAQwB,KAERkB,MAAMS,YAtDUxE,GAsDVwE,UAtDUxE,8XCLrB5G,EAAA,IAQqB+G,aAKpB,SAAAA,EAAYR,EAAU/C,iGAAQC,KAAAsD,GAC7BtD,KAAK6M,UAAY/J,EACjB9C,KAAKC,QAAUF,EAEfC,KAAKoD,YAAc,IAAItD,UAAWC,GAElCC,KAAK8M,kEASM5M,GAAa,IAAAC,EAAAH,KAClB+M,EAAa/M,KAAKoD,YAExB,GAA0B,GAAtBlD,EAAYrB,OACf,OAAOkJ,QAAQvD,UAGhB,IAEMwI,EAFcD,EAAW1D,MAAMnJ,GAER0B,IAAI,SAAAvB,GAAA,OAChCF,EAAK8M,YAAY5M,KAGlB,OAAO0H,QAAQC,IAAIgF,uCAWR3M,GAAY,IAAAoE,EAAAzE,KACjBD,EAASC,KAAKC,QACdpD,EAAUkD,EAAOkI,WAAW5H,EAAWxD,SAEzCqQ,EAASlN,KAAK8M,iBAAiBzM,EAAWU,KA8D9C,OA5DKmM,KACJA,EAASlN,KAAK6M,UAAUM,cAAc,WAE/BC,IAAM/M,EAAWU,IACxBmM,EAAOG,SAEPH,EAAOI,OAASJ,EAAOK,mBAAqB,WAE1C9I,EAAK+I,YACe,aAApB/I,EAAK+I,YACe,SAApB/I,EAAK+I,aAKNN,EAAOI,OAASJ,EAAOK,mBAAqB,KAC5CL,EAAOO,QAAU,KAEjB5Q,EAAQ4D,QAAQ,SAAA/D,GACXA,EAAOgP,MAAM9C,UACZ7I,EAAO+D,cACVC,QAAQC,KACP,+BAA+BtH,EAAOQ,KAAtC,4BAC2BgQ,EAAOE,IADlC,oCAGE1Q,EAAOgP,MAAMC,SACXjP,EAAOgP,MAAM1F,WAAWoH,IACxB1Q,EAAOgP,MAAMrD,UAAU6E,OAAOE,MAOrC1Q,EAAOgP,MAAMlH,QAAQ0I,OAIvBA,EAAOO,QAAU,WAChBP,EAAOI,OAASJ,EAAOK,mBAAqB,KAC5CL,EAAOO,QAAU,KAEjB,IAAMjI,EAAQnI,OAAOqK,OACpB,IAAItD,MAAJ,kCACmC/D,EAAWU,MAG7CA,IAAKV,EAAWU,IAChBlE,QAASwD,EAAWxD,QACpBqQ,WAIFrQ,EAAQ4D,QAAQ,SAAA/D,GAAA,OAAUA,EAAOgP,MAAM/D,OAAOnC,MAG/CxF,KAAK8M,iBAAiBzM,EAAWU,KAAOmM,EACxClN,KAAK6M,UAAUa,KAAKC,YAAYT,IAG1BnF,QAAQC,IAAInL,EAAQ+E,IAAI,SAAAlF,GAAA,OAAUA,EAAOgP,eA9G7BpI,GA8G6BoI,UA9G7BpI","file":"loader-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * A class to resolve paths inside modules.\n */\nexport default class PathResolver {\n\t/**\n\t * Resolves the path of module\n\t * @param {string} root root path which will be used as reference to resolve\n\t *     \t\t\t\t\t\tthe path of the dependency\n\t * @param {string} dependency the dependency path, which has to be\n\t *     \t\t\t\t\t\t\tresolved\n\t * @return {string} the resolved dependency path.\n\t */\n\tresolvePath(root, dependency) {\n\t\tif (\n\t\t\tdependency === 'require' ||\n\t\t\tdependency === 'exports' ||\n\t\t\tdependency === 'module' ||\n\t\t\t!(dependency.indexOf('.') === 0 || dependency.indexOf('..') === 0)\n\t\t) {\n\t\t\treturn dependency;\n\t\t}\n\n\t\t// Split module directories\n\t\tlet moduleParts = root.split('/');\n\n\t\t// Remove module name\n\t\tmoduleParts.splice(-1, 1);\n\n\t\t// Split dependency directories\n\t\tconst dependencyParts = dependency.split('/');\n\n\t\t// Extract dependency name\n\t\tconst dependencyName = dependencyParts.splice(-1, 1);\n\n\t\tfor (let i = 0; i < dependencyParts.length; i++) {\n\t\t\tconst dependencyPart = dependencyParts[i];\n\n\t\t\tif (dependencyPart === '.') {\n\t\t\t\tcontinue;\n\t\t\t} else if (dependencyPart === '..') {\n\t\t\t\tif (moduleParts.length) {\n\t\t\t\t\tmoduleParts.splice(-1, 1);\n\t\t\t\t} else {\n\t\t\t\t\tmoduleParts = moduleParts.concat(dependencyParts.slice(i));\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmoduleParts.push(dependencyPart);\n\t\t\t}\n\t\t}\n\n\t\tmoduleParts.push(dependencyName);\n\n\t\treturn moduleParts.join('/');\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n *\n */\nexport default class URLBuilder {\n\t/**\n\t * Creates an instance of URLBuilder class\n\t * @constructor\n\t * @param {Config} config\n\t */\n\tconstructor(config) {\n\t\tthis._config = config;\n\t}\n\n\t/**\n\t * Returns a list of URLs from provided list of modules.\n\t * @param {array} moduleNames list of modules for which URLs should be\n\t * \t\t\t\t\t\t\t\tcreated\n\t * @return {array} list of URLs\n\t */\n\tbuild(moduleNames) {\n\t\tconst config = this._config;\n\n\t\tconst bufferURL = [];\n\t\tconst modulesURL = [];\n\t\tlet result = [];\n\n\t\tlet basePath = config.basePath;\n\n\t\tif (basePath.length && basePath.charAt(basePath.length - 1) !== '/') {\n\t\t\tbasePath += '/';\n\t\t}\n\n\t\tmoduleNames.forEach(moduleName => {\n\t\t\tconst module = config.getModule(moduleName);\n\t\t\tconst path = this._getModulePath(module);\n\n\t\t\tif (config.combine) {\n\t\t\t\tbufferURL.push(path);\n\t\t\t\tmodulesURL.push(module.name);\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tmodules: [module.name],\n\t\t\t\t\turl: this._getURLWithParams(config.url + basePath + path),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Add to the result all modules, which have to be combined.\n\t\tif (bufferURL.length) {\n\t\t\tresult = result.concat(\n\t\t\t\tthis._generateBufferURLs(modulesURL, bufferURL, {\n\t\t\t\t\tbasePath,\n\t\t\t\t\turl: config.url,\n\t\t\t\t\turlMaxLength: config.urlMaxLength,\n\t\t\t\t})\n\t\t\t);\n\t\t\tbufferURL.length = 0;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generate the appropriate set of URLs based on the list of\n\t * required modules and the maximum allowed URL length\n\t * @param {Array<String>} modules Array of module names\n\t * @param {Array<String>} urls Array of module URLs\n\t * @param {Object} config Configuration object containing URL, basePath and\n\t *     \t\t\t\t\t\turlMaxLength\n\t * @return {Array<Object>} Resulting array of {modules, url} objects\n\t */\n\t_generateBufferURLs(modules, urls, config) {\n\t\tconst basePath = config.basePath;\n\t\tconst result = [];\n\t\tconst urlMaxLength = config.urlMaxLength;\n\n\t\tlet urlResult = {\n\t\t\tmodules: [modules[0]],\n\t\t\turl: config.url + basePath + urls[0],\n\t\t};\n\n\t\tfor (let i = 1; i < urls.length; i++) {\n\t\t\tconst module = modules[i];\n\t\t\tconst path = urls[i];\n\n\t\t\tif (\n\t\t\t\turlResult.url.length + basePath.length + path.length + 1 <\n\t\t\t\turlMaxLength\n\t\t\t) {\n\t\t\t\turlResult.modules.push(module);\n\t\t\t\turlResult.url += '&' + basePath + path;\n\t\t\t} else {\n\t\t\t\tresult.push(urlResult);\n\n\t\t\t\turlResult = {\n\t\t\t\t\tmodules: [module],\n\t\t\t\t\turl: config.url + basePath + path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\turlResult.url = this._getURLWithParams(urlResult.url);\n\n\t\tresult.push(urlResult);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the path for a module. If module has property path, it will be\n\t * returned directly. Otherwise, the name of module will be used and\n\t * extension .js will be added to module name if omitted.\n\t * @param {object} module The module which path should be returned.\n\t * @return {string} Module path.\n\t */\n\t_getModulePath(module) {\n\t\tconst paths = this._config.paths;\n\n\t\tlet path = module.name;\n\n\t\tObject.keys(paths).forEach(function(item) {\n\t\t\tif (path === item || path.indexOf(item + '/') === 0) {\n\t\t\t\tpath = paths[item] + path.substring(item.length);\n\t\t\t}\n\t\t});\n\n\t\tif (path.lastIndexOf('.js') !== path.length - 3) {\n\t\t\tpath += '.js';\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns an url with parameters defined in config.defaultURLParams. If\n\t * config.defaultURLParams is not defined or is an empty map, the url will\n\t * be returned unmodified.\n\t * @param {string} url The url to be returned with parameters.\n\t * @return {string} url The url with parameters.\n\t */\n\t_getURLWithParams(url) {\n\t\tconst config = this._config;\n\n\t\tconst defaultURLParams = config.defaultURLParams || {};\n\n\t\tconst keys = Object.keys(defaultURLParams);\n\n\t\tif (!keys.length) {\n\t\t\treturn url;\n\t\t}\n\n\t\tconst queryString = keys\n\t\t\t.map(function(key) {\n\t\t\t\treturn key + '=' + defaultURLParams[key];\n\t\t\t})\n\t\t\t.join('&');\n\n\t\treturn url + (url.indexOf('?') > -1 ? '&' : '?') + queryString;\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Loader from './loader.js';\n\nconst cfg = window.__CONFIG__ || {};\nconst namespace = typeof cfg.namespace === 'string' ? cfg.namespace : undefined;\nconst exposeGlobal = cfg.exposeGlobal === undefined ? true : cfg.exposeGlobal;\nconst loader = new Loader(cfg);\n\nif (namespace) {\n\tconst ns = window[namespace] ? window[namespace] : {};\n\tns.Loader = loader;\n\twindow[namespace] = ns;\n} else {\n\twindow.Loader = loader;\n}\n\nif (exposeGlobal) {\n\twindow.Loader = loader;\n\twindow.require = Loader.prototype.require.bind(loader);\n\twindow.define = Loader.prototype.define.bind(loader);\n\twindow.define.amd = {};\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Config from './config';\nimport DependencyResolver from './dependency-resolver';\nimport ScriptLoader from './script-loader';\nimport PathResolver from './path-resolver';\nimport URLBuilder from './url-builder';\nimport packageJson from '../../package.json';\n\n/* eslint-disable no-console */\n\n/**\n *\n */\nexport default class Loader {\n\t/**\n\t * Creates an instance of Loader class.\n\t * @namespace Loader\n\t * @constructor\n\t * @param {object=} config Configuration options (defaults to\n\t * \t\t\t\t\t\t\twindow.__CONFIG__)\n\t * @param {object} document DOM document object to use (defaults to\n\t * \t\t\t\t\t\t\t\twindow.document)\n\t */\n\tconstructor(config = null, document = null) {\n\t\tthis._pathResolver = new PathResolver();\n\n\t\tthis._config = new Config(config || window.__CONFIG__);\n\n\t\tthis._dependencyResolver = new DependencyResolver(this._config);\n\t\tthis._urlBuilder = new URLBuilder(this._config);\n\t\tthis._scriptLoader = new ScriptLoader(\n\t\t\tdocument || window.document,\n\t\t\tthis._config\n\t\t);\n\n\t\tthis._requireCallId = 0;\n\t}\n\n\t/**\n\t * Get loader version\n\t * @return {String} the version number as specified in package.json\n\t */\n\tversion() {\n\t\treturn packageJson.version;\n\t}\n\n\t/**\n\t * Defines a module in the system and fires\n\t * @param {string} name the name of the module\n\t * @param {array} dependencies list of module dependencies\n\t * @param {function} factory the AMD factory function of the module\n\t */\n\tdefine(...args) {\n\t\tconst config = this._config;\n\n\t\tconst name = args[0];\n\n\t\tlet module = config.getModule(name);\n\n\t\tif (module && module.defined) {\n\t\t\tif (config.showWarnings) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Liferay AMD Loader: Module '${name}' is being ` +\n\t\t\t\t\t\t'redefined; only the first definition will be used'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet dependencies = args[1];\n\t\tlet factory = args[2];\n\n\t\t// Acccount for call polymorphism\n\t\tif (args.length == 2) {\n\t\t\tfactory = dependencies;\n\t\t\tdependencies = ['require', 'exports', 'module'];\n\t\t}\n\n\t\t// Normalize factory argument\n\t\tif (typeof factory !== 'function') {\n\t\t\tconst exportedValue = factory;\n\n\t\t\tfactory = () => exportedValue;\n\t\t}\n\n\t\t// Do the things\n\t\tmodule = config.getModule(name);\n\n\t\tif (!module) {\n\t\t\tthrow new Error(\n\t\t\t\t`Trying to define a module that was not registered: ${name}\\n` +\n\t\t\t\t\t'This usually means that someone is calling define() ' +\n\t\t\t\t\t'for a module that has not been previously required.'\n\t\t\t);\n\t\t}\n\n\t\tif (module.defined) {\n\t\t\tthrow new Error(\n\t\t\t\t`Trying to define a module more than once: ${name}\\n` +\n\t\t\t\t\t'This usually means that someone is calling define() ' +\n\t\t\t\t\t'more than once for the same module, which can lead to ' +\n\t\t\t\t\t'unexpected results.'\n\t\t\t);\n\t\t}\n\n\t\tif (config.explainResolutions) {\n\t\t\tconsole.log('Liferay AMD Loader:', 'Defining', module.name);\n\t\t}\n\n\t\tmodule.factory = factory;\n\t\tmodule.dependencies = dependencies.map(dependency =>\n\t\t\tthis._pathResolver.resolvePath(name, dependency)\n\t\t);\n\n\t\tmodule.define.resolve(args);\n\t}\n\n\t/**\n\t * Requires list of modules. If a module is not yet registered, it will be\n\t * ignored and its implementation in the provided success callback will be\n\t * left undefined.\n\t * @param {array|string[]} modules Modules can be specified as an array of\n\t * \t\t\t\t\t\t\t\t\tstrings or provided as multiple string\n\t * \t\t\t\t\t\t\t\t\tparameters.\n\t * @param {function} success Callback, which will be invoked in case of\n\t * \t\t\t\t\t\t\t\tsuccess. The provided parameters will be\n\t * \t\t\t\t\t\t\t\timplementations of all required modules.\n\t * @param {function} failure Callback, which will be invoked in case of\n\t * \t\t\t\t\t\t\t\tfailure. One parameter with information\n\t * \t\t\t\t\t\t\t\tabout the error will be provided.\n\t */\n\trequire(...args) {\n\t\tconst moduleLoader = this._scriptLoader;\n\t\tconst config = this._config;\n\t\tconst requireCallId = this._requireCallId++;\n\n\t\tlet moduleNames;\n\t\tlet success;\n\t\tlet failure;\n\n\t\t// Account for call polymorphism\n\t\tif (args.length == 1) {\n\t\t\tmoduleNames = args[0];\n\t\t\tsuccess = undefined;\n\t\t\tfailure = undefined;\n\t\t} else if (args.length == 2) {\n\t\t\tconst lastArg = args[args.length - 1];\n\n\t\t\tif (typeof lastArg === 'function') {\n\t\t\t\tmoduleNames = args[0];\n\t\t\t\tsuccess = lastArg;\n\t\t\t\tfailure = undefined;\n\t\t\t} else if (lastArg == null) {\n\t\t\t\tmoduleNames = args[0];\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t} else {\n\t\t\t\tmoduleNames = args;\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst lastArg = args[args.length - 1];\n\t\t\tlet successGiven = false;\n\n\t\t\tif (typeof lastArg === 'function' || lastArg == null) {\n\t\t\t\tsuccessGiven = true;\n\t\t\t}\n\n\t\t\tif (!successGiven) {\n\t\t\t\tmoduleNames = args;\n\t\t\t\tsuccess = undefined;\n\t\t\t\tfailure = undefined;\n\t\t\t} else {\n\t\t\t\tconst penultimateArg = args[args.length - 2];\n\t\t\t\tlet failureGiven = false;\n\n\t\t\t\tif (\n\t\t\t\t\ttypeof penultimateArg === 'function' ||\n\t\t\t\t\tpenultimateArg == null\n\t\t\t\t) {\n\t\t\t\t\tfailureGiven = true;\n\t\t\t\t}\n\n\t\t\t\tif (!failureGiven) {\n\t\t\t\t\tmoduleNames = args.slice(0, args.length - 1);\n\t\t\t\t\tsuccess = lastArg;\n\t\t\t\t\tfailure = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tmoduleNames = args.slice(0, args.length - 2);\n\t\t\t\t\tsuccess = penultimateArg;\n\t\t\t\t\tfailure = lastArg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten moduleNames argument if necessary\n\t\tif (typeof moduleNames === 'string') {\n\t\t\tmoduleNames = [moduleNames];\n\t\t} else if (moduleNames.length == 1 && Array.isArray(moduleNames[0])) {\n\t\t\tmoduleNames = [].concat(...moduleNames);\n\t\t}\n\n\t\t// Provide default value for success\n\t\tif (success === undefined) {\n\t\t\tsuccess = () => {};\n\t\t}\n\n\t\t// Provide default value for failure\n\t\tif (failure === undefined) {\n\t\t\tconst stack = new Error(\n\t\t\t\t'This is not a real error, but a fake one created to capture ' +\n\t\t\t\t\t\"require()'s caller stack trace\"\n\t\t\t);\n\n\t\t\tfailure = error => {\n\t\t\t\tif (!config.explainResolutions) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.log('---------------------------------------');\n\t\t\t\tconsole.log('Liferay AMD Loader: Unhandled require failure:');\n\t\t\t\tconsole.log(\n\t\t\t\t\t'\\nNOTE: You are seeing this message because you have\\n' +\n\t\t\t\t\t\t'invoked require() without a failure handler. It\\n' +\n\t\t\t\t\t\t'does not necessarily mean that the Loader is\\n' +\n\t\t\t\t\t\t'broken and may be caused by errors in your code or\\n' +\n\t\t\t\t\t\t'third party modules.\\n\\n' +\n\t\t\t\t\t\t'If you want to avoid it make sure to provide a\\n' +\n\t\t\t\t\t\t'failure handler when calling require().\\n\\n'\n\t\t\t\t);\n\t\t\t\tconsole.log('A detailed report of what happened follows:');\n\t\t\t\tconsole.log('  · Require call id:', requireCallId);\n\t\t\t\tconsole.log('  · Required modules:', moduleNames);\n\t\t\t\tconsole.log('  · Error cause:', error);\n\t\t\t\tif (error.missingModules) {\n\t\t\t\t\tconsole.log('  · Missing modules:', error.missingModules);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  · Caller's stack trace:\", stack);\n\t\t\t\tconsole.log('---------------------------------------');\n\t\t\t};\n\t\t}\n\n\t\t// Intercept handlers to explain resolutions\n\t\tsuccess = this._interceptHandler(success, 'success', requireCallId);\n\t\tfailure = this._interceptHandler(failure, 'failure', requireCallId);\n\n\t\t// Global closure variables\n\t\tlet resolvedModuleNames;\n\t\tlet unregisteredModuleNames;\n\t\tlet rejectTimeout;\n\t\tlet timeoutRejected = false;\n\n\t\t// Do the things (note that each then() block contains a synchronous\n\t\t// block of code, that means that between then() blocks may be\n\t\t// interrupted by any parallel call)\n\t\tthis._dependencyResolver\n\t\t\t.resolve(moduleNames)\n\t\t\t.then(resolution => {\n\t\t\t\t// Show extra information when explainResolutions is active\n\t\t\t\tthis._explainResolution(requireCallId, moduleNames, resolution);\n\n\t\t\t\t// Fail if resolution errors present\n\t\t\t\tthis._throwOnResolutionErrors(resolution);\n\n\t\t\t\t// Merge global maps from resolution into config\n\t\t\t\tconfig.addMappings(resolution.configMap);\n\n\t\t\t\t// Merge global paths from resolution into config\n\t\t\t\tconfig.addPaths(resolution.pathMap);\n\n\t\t\t\t// Store resolved module names\n\t\t\t\tresolvedModuleNames = resolution.resolvedModules;\n\n\t\t\t\t// Grab unregistered module names (some of the resolved modules\n\t\t\t\t// may have been registered by a parallel require() call, so we\n\t\t\t\t// are not responsible for loading them).\n\t\t\t\tunregisteredModuleNames = this._getUnregisteredModuleNames(\n\t\t\t\t\tresolvedModuleNames\n\t\t\t\t);\n\n\t\t\t\t// Register the modules\n\t\t\t\tunregisteredModuleNames.forEach(moduleName =>\n\t\t\t\t\tconfig.addModule(moduleName, {\n\t\t\t\t\t\tmap: resolution.moduleMap[moduleName],\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\t// Prepare load timeout\n\t\t\t\trejectTimeout = this._setRejectTimeout(\n\t\t\t\t\tmoduleNames,\n\t\t\t\t\tresolution,\n\t\t\t\t\t(...args) => {\n\t\t\t\t\t\ttimeoutRejected = true;\n\t\t\t\t\t\tfailure(...args);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Load the modules we are responsible for\n\t\t\t\tif (config.explainResolutions) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t\t\t'Fetching',\n\t\t\t\t\t\tunregisteredModuleNames,\n\t\t\t\t\t\t'from require call',\n\t\t\t\t\t\trequireCallId\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn moduleLoader.loadModules(unregisteredModuleNames);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\t// Wait for all unregistered modules to be defined\n\t\t\t\treturn this._waitForModuleDefinitions(resolvedModuleNames);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\t// Everything went well so we can clear the timeout\n\t\t\t\tclearTimeout(rejectTimeout);\n\n\t\t\t\t// Set the implementations of all needed modules. Note that we\n\t\t\t\t// set the implementation of modules not loaded by this\n\t\t\t\t// require() call but it is necessary in case the require()\n\t\t\t\t// call that loaded them aborted because of an error in the\n\t\t\t\t// implementation of some module.\n\t\t\t\tthis._setModuleImplementations(\n\t\t\t\t\trequireCallId,\n\t\t\t\t\tresolvedModuleNames\n\t\t\t\t);\n\n\t\t\t\t// Now get all needed modules implementations\n\t\t\t\tconst implementations = this._getModuleImplementations(\n\t\t\t\t\tmoduleNames\n\t\t\t\t);\n\n\t\t\t\t// And invoke the sucess handler\n\t\t\t\tsuccess(...implementations);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\t// If reject timeout was hit don't do anything else\n\t\t\t\tif (timeoutRejected) return;\n\n\t\t\t\tif (rejectTimeout) {\n\t\t\t\t\tclearTimeout(rejectTimeout);\n\t\t\t\t}\n\n\t\t\t\tfailure(err);\n\t\t\t});\n\t}\n\n\t/**\n\t * Intercept a require success or failure handler to show information to\n\t * explain resolutions.\n\t * @param {function} handler\n\t * @param {string} type\n\t * @param {number} requireCallId\n\t */\n\t_interceptHandler(handler, type, requireCallId) {\n\t\tconst config = this._config;\n\n\t\treturn (...args) => {\n\t\t\tif (config.explainResolutions) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'Liferay AMD Loader: Invoking',\n\t\t\t\t\ttype,\n\t\t\t\t\t'handler for',\n\t\t\t\t\t'require call',\n\t\t\t\t\trequireCallId\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\thandler(...args);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Explain resolution if flag is active\n\t * @param {number} requireCallId\n\t * @param {Array<string>} moduleNames\n\t * @param {object} resolution\n\t */\n\t_explainResolution(requireCallId, moduleNames, resolution) {\n\t\tconst config = this._config;\n\n\t\tif (config.explainResolutions) {\n\t\t\tconsole.log(\n\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t'Require call',\n\t\t\t\trequireCallId,\n\t\t\t\t'resolved modules',\n\t\t\t\tmoduleNames,\n\t\t\t\t'to',\n\t\t\t\tresolution\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Traverse a resolved dependencies array looking for server sent errors and\n\t * throw an Error if any is found.\n\t * @param {object} resolution the resolution object\n\t * @throws {Error} if a resolution error is found\n\t */\n\t_throwOnResolutionErrors(resolution) {\n\t\tconst resolutionErrors = resolution.resolvedModules\n\t\t\t.filter(dep => dep.indexOf(':ERROR:') === 0)\n\t\t\t.map(dep => dep.substr(7));\n\n\t\tif (resolutionErrors.length > 0) {\n\t\t\tthrow Object.assign(\n\t\t\t\tnew Error(\n\t\t\t\t\t'The following problems where detected while ' +\n\t\t\t\t\t\t'resolving modules:\\n' +\n\t\t\t\t\t\tresolutionErrors.join('\\n')\n\t\t\t\t),\n\t\t\t\t{resolutionErrors}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Filters a list of modules and returns only those which are not yet\n\t * registered.\n\t * @param {array} moduleNames list of module names to be tested\n\t * @return {array} list of modules matching the specified filter\n\t */\n\t_getUnregisteredModuleNames(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn moduleNames.filter(moduleName => !config.getModule(moduleName));\n\t}\n\n\t/**\n\t * Set a timeout (only if allowed by configuration) to reject a Promise if\n\t * a certain set of modules has not been successfully loaded.\n\t * @param {Array} modules the modules to be loaded\n\t * @param {object} resolution the resolution object associated to the\n\t * \t\t\t\t\t\t\t\tmodules\n\t * @param {function} reject the promise reject function\n\t * @return {int} a timeout id or undefined if configuration disabled timeout\n\t */\n\t_setRejectTimeout(modules, resolution, reject) {\n\t\tconst config = this._config;\n\n\t\tif (config.waitTimeout === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn setTimeout(() => {\n\t\t\tconst resolvedModuleNames = resolution.resolvedModules;\n\n\t\t\tconst missingModules = resolvedModuleNames.filter(moduleName => {\n\t\t\t\tconst module = config.getModule(moduleName);\n\t\t\t\treturn !module || !module.implemented;\n\t\t\t});\n\n\t\t\tconst error = Object.assign(\n\t\t\t\tnew Error('Load timeout for modules: ' + modules),\n\t\t\t\t{\n\t\t\t\t\tmodules,\n\t\t\t\t\tresolution,\n\t\t\t\t\tmissingModules,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treject(error);\n\t\t}, config.waitTimeout);\n\t}\n\n\t/**\n\t * Resolves a Promise as soon as all provided modules are defined.\n\t * @param {array} moduleNames list of module names for which to wait\n\t * @return {Promise}\n\t */\n\t_waitForModuleDefinitions(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn Promise.all(\n\t\t\tconfig.getModules(moduleNames).map(module => module.define)\n\t\t);\n\t}\n\n\t/**\n\t * Resolves a Promise as soon as all provided modules are implemented.\n\t * @param {array} moduleNames list of module names for which to wait\n\t * @return {Promise}\n\t */\n\t_waitForModuleImplementations(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn Promise.all(\n\t\t\tconfig.getModules(moduleNames).map(module => module.implement)\n\t\t);\n\t}\n\n\t/**\n\t * Invokes the implementation method of modules passing the implementations\n\t * of its dependencies.\n\t * @throws {Error} as soon as any factory fails\n\t * @param {number} requireCallId\n\t * @param {array} moduleNames list of modules to invoke\n\t */\n\t_setModuleImplementations(requireCallId, moduleNames) {\n\t\tconst config = this._config;\n\n\t\tconfig.getModules(moduleNames).forEach(module => {\n\t\t\t// Skip already implemented modules\n\t\t\tif (module.implemented) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fail for already rejected implementations\n\t\t\tif (module.implement.rejected) {\n\t\t\t\tthrow module.implement.rejection;\n\t\t\t}\n\n\t\t\t// Show info about resolution\n\t\t\tif (config.explainResolutions) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'Liferay AMD Loader:',\n\t\t\t\t\t'Implementing',\n\t\t\t\t\tmodule.name,\n\t\t\t\t\t'from require call',\n\t\t\t\t\trequireCallId\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Prepare CommonJS module implementation object\n\t\t\t\tconst moduleImpl = {exports: {}};\n\n\t\t\t\t// Prepare arguments for the AMD factory function\n\t\t\t\tconst dependencyImplementations = module.dependencies.map(\n\t\t\t\t\tdependency => {\n\t\t\t\t\t\tif (dependency === 'exports') {\n\t\t\t\t\t\t\treturn moduleImpl.exports;\n\t\t\t\t\t\t} else if (dependency === 'module') {\n\t\t\t\t\t\t\treturn moduleImpl;\n\t\t\t\t\t\t} else if (dependency === 'require') {\n\t\t\t\t\t\t\treturn this._createLocalRequire(module);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dependencyModule = config.getDependency(\n\t\t\t\t\t\t\t\tmodule.name,\n\t\t\t\t\t\t\t\tdependency\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (!dependencyModule) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Unsatisfied dependency: ${dependency} ` +\n\t\t\t\t\t\t\t\t\t\t`found in module ${module.name}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!dependencyModule.implemented) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Module ${module.name} depends on ` +\n\t\t\t\t\t\t\t\t\t\t`${dependencyModule.name} which is ` +\n\t\t\t\t\t\t\t\t\t\t'not yet implemented (this may be ' +\n\t\t\t\t\t\t\t\t\t\t'due to a cyclic dependency)'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn dependencyModule.implementation;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Invoke AMD factory function\n\t\t\t\tconst result = module.factory(...dependencyImplementations);\n\n\t\t\t\t// Resolve the implementation\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tmodule.implementation = result;\n\t\t\t\t} else {\n\t\t\t\t\tmodule.implementation = moduleImpl.exports;\n\t\t\t\t}\n\n\t\t\t\tmodule.implement.resolve(module.implementation);\n\t\t\t} catch (err) {\n\t\t\t\tif (!module.implement.fulfilled) {\n\t\t\t\t\tmodule.implement.reject(err);\n\t\t\t\t}\n\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Create a function implementing the local require method of the AMD\n\t * specification.\n\t * @param  {Object} module a module descriptor\n\t * @return {function} the local require implementation for the given module\n\t */\n\t_createLocalRequire(module) {\n\t\tconst config = this._config;\n\t\tconst pathResolver = this._pathResolver;\n\n\t\tconst localRequire = (moduleName, ...rest) => {\n\t\t\tif (rest.length > 0) {\n\t\t\t\treturn this.require(moduleName, ...rest);\n\t\t\t} else {\n\t\t\t\tconst resolvedPath = pathResolver.resolvePath(\n\t\t\t\t\tmodule.name,\n\t\t\t\t\tmoduleName\n\t\t\t\t);\n\n\t\t\t\tconst dependencyModule = config.getDependency(\n\t\t\t\t\tmodule.name,\n\t\t\t\t\tresolvedPath\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\t!dependencyModule ||\n\t\t\t\t\t!('implementation' in dependencyModule)\n\t\t\t\t) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Module \"' +\n\t\t\t\t\t\t\tmoduleName +\n\t\t\t\t\t\t\t'\" has not been loaded yet for context: ' +\n\t\t\t\t\t\t\tmodule.name\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn dependencyModule.implementation;\n\t\t\t}\n\t\t};\n\n\t\tlocalRequire.toUrl = moduleName => {\n\t\t\tconst moduleURLs = this._urlBuilder.build([moduleName]);\n\n\t\t\treturn moduleURLs[0].url;\n\t\t};\n\n\t\treturn localRequire;\n\t}\n\n\t/**\n\t * Retrieves module implementations to an array.\n\t * @param {array} moduleNames list of modules, which implementations\n\t * \t\t\t\t\twill be collected\n\t * @return {array} list of modules implementations.\n\t */\n\t_getModuleImplementations(moduleNames) {\n\t\tconst config = this._config;\n\n\t\treturn config\n\t\t\t.getModules(moduleNames)\n\t\t\t.map(module => module.implementation);\n\t}\n}\n\nLoader.prototype.define.amd = {};\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport Module from './module';\n\n/**\n *\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of Configuration class\n\t * @constructor\n\t * @param {object=} cfg configuration properties\n\t */\n\tconstructor(cfg = {}) {\n\t\tthis._modules = {};\n\t\tthis._maps = {};\n\t\tthis._paths = {};\n\n\t\tthis._config = {maps: {}, paths: {}};\n\t\tthis._parse(cfg, 'defaultURLParams', {});\n\t\tthis._parse(cfg, 'explainResolutions', false);\n\t\tthis._parse(cfg, 'showWarnings', false);\n\t\tthis._parse(cfg, 'waitTimeout', 7000);\n\t\tthis._parse(cfg, 'basePath', '/');\n\t\tthis._parse(cfg, 'resolvePath', '/o/js_resolve_modules');\n\t\tthis._parse(cfg, 'combine', false);\n\t\tthis._parse(cfg, 'url', '');\n\t\tthis._parse(cfg, 'urlMaxLength', 2000);\n\t}\n\n\t/**\n\t * Whether to explain how require() calls are resolved\n\t */\n\tget explainResolutions() {\n\t\treturn this._config.explainResolutions;\n\t}\n\n\t/**\n\t * Whether to show development warnings\n\t */\n\tget showWarnings() {\n\t\treturn this._config.showWarnings;\n\t}\n\n\t/**\n\t * Time to wait for module script requests to load (in milliseconds)\n\t */\n\tget waitTimeout() {\n\t\treturn this._config.waitTimeout;\n\t}\n\n\t/**\n\t * The base path from where modules must be retrieved\n\t */\n\tget basePath() {\n\t\treturn this._config.basePath;\n\t}\n\n\t/**\n\t * The path to use when calling the server to resolve module dependencies\n\t */\n\tget resolvePath() {\n\t\treturn this._config.resolvePath;\n\t}\n\n\t/**\n\t * Whether to combine module requests into combo URLs\n\t */\n\tget combine() {\n\t\treturn this._config.combine;\n\t}\n\n\t/**\n\t * The URL of the server\n\t */\n\tget url() {\n\t\treturn this._config.url;\n\t}\n\n\t/**\n\t * The maximum length of a combo URL. If URL is larger than that it is split\n\t * in as many requests as needed.\n\t */\n\tget urlMaxLength() {\n\t\treturn this._config.urlMaxLength;\n\t}\n\n\t/**\n\t * Default parameters to add to the module request URLs\n\t */\n\tget defaultURLParams() {\n\t\treturn this._config.defaultURLParams;\n\t}\n\n\t/**\n\t * An object with registered module paths\n\t */\n\tget paths() {\n\t\treturn this._paths;\n\t}\n\n\t/**\n\t * Adds a module to the configuration with default field values if it\n\t * doesn't exist. Otherwise, throws an exception.\n\t * @param {string} moduleName\n\t * @param {object} moduleProperties initial properties to set on module in\n\t * \t\t\t\t\t\t\t\t\taddition to its name\n\t * @return {Object} the module\n\t */\n\taddModule(moduleName, moduleProperties = {}) {\n\t\tif (this._modules[moduleName]) {\n\t\t\tthrow new Error(`Module is already registered: ${moduleName}`);\n\t\t}\n\n\t\tconst module = new Module(moduleName);\n\n\t\tObject.entries(moduleProperties).forEach(([key, value]) => {\n\t\t\tmodule[key] = value;\n\t\t});\n\n\t\tthis._modules[moduleName] = module;\n\n\t\treturn module;\n\t}\n\n\t/**\n\t * Add mappings to the current configuration\n\t * @param {object} mappings an object with one or more mappings\n\t */\n\taddMappings(mappings) {\n\t\tObject.assign(this._maps, mappings);\n\t}\n\n\t/**\n\t * Add path mappings to the current configuration\n\t * @param {object} paths an object with one or more path mappings\n\t */\n\taddPaths(paths) {\n\t\tObject.assign(this._paths, paths);\n\t}\n\n\t/**\n\t * Returns array with all registered modules or the requested subset of\n\t * them.\n\t * @param {?Array} moduleNames optional list of module names to retrieve\n\t * @return {Array}\n\t */\n\tgetModules(moduleNames = undefined) {\n\t\tif (moduleNames === undefined) {\n\t\t\treturn Object.values(this._modules);\n\t\t}\n\n\t\treturn moduleNames.map(moduleName => this.getModule(moduleName));\n\t}\n\n\t/**\n\t * Returns the registered module for the moduleName.\n\t * @param {string} moduleName the module name\n\t * @return {Object} the registed module object\n\t */\n\tgetModule(moduleName) {\n\t\tlet module = this._modules[moduleName];\n\n\t\tif (!module) {\n\t\t\tconst mappedName = this._mapModule(moduleName);\n\n\t\t\tmodule = this._modules[mappedName];\n\t\t}\n\n\t\treturn module;\n\t}\n\n\t/**\n\t * Returns the registered module for the dependency of moduleName.\n\t * @param {string} moduleName the module name\n\t * @param {string} dependencyName the dependencyName name\n\t * @return {Object} the registed module object\n\t */\n\tgetDependency(moduleName, dependencyName) {\n\t\tconst module = this.getModule(moduleName);\n\n\t\tlet dependencyModule = this._modules[dependencyName];\n\n\t\tif (!dependencyModule) {\n\t\t\tconst mappedName = this._mapModule(dependencyName, module.map);\n\n\t\t\tdependencyModule = this._modules[mappedName];\n\t\t}\n\n\t\treturn dependencyModule;\n\t}\n\n\t/**\n\t * Parse a configuration property to store it in _config.\n\t * @param {object} cfg\n\t * @param {string} property\n\t * @param {*} defaultValue\n\t */\n\t_parse(cfg, property, defaultValue) {\n\t\tthis._config[property] = cfg.hasOwnProperty(property)\n\t\t\t? cfg[property]\n\t\t\t: defaultValue;\n\t}\n\n\t/**\n\t * Maps module names to their aliases. Example:\n\t * __CONFIG__.maps = {\n\t *      liferay: 'liferay@1.0.0'\n\t * }\n\t *\n\t * When someone does require('liferay/html/js/ac.es',...),\n\t * if the module 'liferay/html/js/ac.es' is not defined,\n\t * then a corresponding alias will be searched. If found, the name will be\n\t * replaced, so it will look like user did\n\t * require('liferay@1.0.0/html/js/ac.es',...).\n\t *\n\t * Additionally, modules can define a custom map to alias module names just\n\t * in the context of that module loading operation. When present, the\n\t * contextual module mapping will take precedence over the general one.\n\t * @param {string} moduleName The module which have to be mapped\n\t * @param {?object} contextMap Contextual module mapping information\n\t *     relevant to the current load operation\n\t * @return {array} The mapped module\n\t */\n\t_mapModule(moduleName, contextMap) {\n\t\tif (contextMap) {\n\t\t\tmoduleName = this._mapMatches(moduleName, contextMap);\n\t\t}\n\n\t\tif (Object.keys(this._maps).length > 0) {\n\t\t\tmoduleName = this._mapMatches(moduleName, this._maps);\n\t\t}\n\n\t\treturn moduleName;\n\t}\n\n\t/**\n\t * Creates a function that transforms module names based on a provided\n\t * set of mappings.\n\t * @param {string} moduleName module name\n\t * @param {object} maps Mapping information.\n\t * @return {function} The generated mapper function\n\t */\n\t_mapMatches(moduleName, maps) {\n\t\tlet match = maps[moduleName];\n\n\t\tif (match) {\n\t\t\tif (typeof match === 'object') {\n\t\t\t\treturn match.value;\n\t\t\t}\n\n\t\t\treturn match;\n\t\t}\n\n\t\tmatch = this._mapExactMatch(moduleName, maps);\n\n\t\t// Apply partial mapping only if exactMatch hasn't been\n\t\t// already applied for this mapping\n\t\tif (!match) {\n\t\t\tmatch = this._mapPartialMatch(moduleName, maps);\n\t\t}\n\n\t\t// Apply * mapping only if neither exactMatch nor\n\t\t// partialMatch have been already applied for this mapping\n\t\tif (!match) {\n\t\t\tmatch = this._mapWildcardMatch(moduleName, maps);\n\t\t}\n\n\t\treturn match || moduleName;\n\t}\n\n\t/**\n\t * Transforms a module name using the exactMatch mappings\n\t * in a provided mapping object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapExactMatch(module, maps) {\n\t\tfor (const alias in maps) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(maps, alias)) {\n\t\t\t\tconst aliasValue = maps[alias];\n\n\t\t\t\tif (aliasValue.value && aliasValue.exactMatch) {\n\t\t\t\t\tif (module === alias) {\n\t\t\t\t\t\treturn aliasValue.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms a module name using the partial mappings\n\t * in a provided mapping object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapPartialMatch(module, maps) {\n\t\tfor (const alias in maps) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(maps, alias)) {\n\t\t\t\tlet aliasValue = maps[alias];\n\n\t\t\t\tif (!aliasValue.exactMatch) {\n\t\t\t\t\tif (aliasValue.value) {\n\t\t\t\t\t\taliasValue = aliasValue.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (module === alias || module.indexOf(alias + '/') === 0) {\n\t\t\t\t\t\treturn aliasValue + module.substring(alias.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms a module name using the wildcard mapping in a provided mapping\n\t * object.\n\t * @param {string} module The module which have to be mapped.\n\t * @param {object} maps Mapping information.\n\t * @return {object} An object with a boolean `matched` field and a string\n\t *     \t\t\t\t\t`result` field containing the mapped module name\n\t */\n\t_mapWildcardMatch(module, maps) {\n\t\tif (typeof maps['*'] === 'function') {\n\t\t\treturn maps['*'](module);\n\t\t}\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport ResolvablePromise from './resolvable-promise';\n\n/**\n * A module descriptor\n */\nexport default class Module {\n\t/**\n\t * @param {string} name name of module\n\t */\n\tconstructor(name) {\n\t\tthis._name = name;\n\t\tthis._dependencies = undefined;\n\t\tthis._factory = undefined;\n\t\tthis._implementation = undefined;\n\t\tthis._map = undefined;\n\n\t\tthis._state = {\n\t\t\t_fetch: ResolvablePromise.new(),\n\t\t\t_define: ResolvablePromise.new(),\n\t\t\t_implement: ResolvablePromise.new(),\n\t\t};\n\t}\n\n\t/**\n\t * Name of module\n\t */\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * Dependencies of module\n\t */\n\tget dependencies() {\n\t\treturn this._dependencies;\n\t}\n\n\t/**\n\t * AMD factory function\n\t */\n\tget factory() {\n\t\treturn this._factory;\n\t}\n\n\t/**\n\t * Result of factory invocation (module.exports)\n\t */\n\tget implementation() {\n\t\treturn this._implementation;\n\t}\n\n\t/**\n\t * Local module mappings for module\n\t */\n\tget map() {\n\t\treturn this._map;\n\t}\n\n\t/**\n\t * Get the fetch promise which is fulfilled when the script containing the\n\t * module definition has been loaded/failed.\n\t *\n\t * Note that a module may be defined even if it is not yet fetched because\n\t * define() gets called while the script is being loaded.\n\t * @return {ResolvablePromise}\n\t */\n\tget fetch() {\n\t\treturn this._state._fetch;\n\t}\n\n\t/**\n\t * Shorthand for this.fetch.resolved\n\t */\n\tget fetched() {\n\t\treturn this.fetch.resolved;\n\t}\n\n\t/**\n\t * Get the define promise which if fulfilled when the script had been\n\t * registered by the AMD define() function.\n\t *\n\t * Note that definition does not imply implementation.\n\t *\n\t * Also note that a module may be defined even if it is not yet fetched\n\t * because define() gets called while the script is being loaded.\n\t * @return {ResolvablePromise}\n\t */\n\tget define() {\n\t\treturn this._state._define;\n\t}\n\n\t/**\n\t * Shorthand for this.define.resolved\n\t */\n\tget defined() {\n\t\treturn this.define.resolved;\n\t}\n\n\t/**\n\t * Get the implement promise which if fulfilled when the module has been\n\t * defined and its AMD factory function has been invoked successfully.\n\t */\n\tget implement() {\n\t\treturn this._state._implement;\n\t}\n\n\t/**\n\t * Shorthand for this.implement.resolved\n\t */\n\tget implemented() {\n\t\treturn this.implement.resolved;\n\t}\n\n\t/**\n\t * Name of module\n\t * @param {string} name\n\t */\n\tset name(name) {\n\t\tthrow new Error(`Name of module ${this.name} is read-only`);\n\t}\n\n\t/**\n\t * Dependencies of module\n\t * @param {Array} dependencies\n\t */\n\tset dependencies(dependencies) {\n\t\tif (this._dependencies) {\n\t\t\tthrow new Error(`Dependencies of module ${this.name} already set`);\n\t\t}\n\n\t\tthis._dependencies = dependencies;\n\t}\n\n\t/**\n\t * AMD factory function\n\t * @param {function} factory\n\t */\n\tset factory(factory) {\n\t\tif (this._factory) {\n\t\t\tthrow new Error(`Factory of module ${this.name} already set`);\n\t\t}\n\n\t\tthis._factory = factory;\n\t}\n\n\t/**\n\t * Result of factory invocation (module.exports)\n\t * @param {*} implementation\n\t */\n\tset implementation(implementation) {\n\t\tif (this._implementation) {\n\t\t\tthrow new Error(\n\t\t\t\t`Implementation of module ${this.name} already set`\n\t\t\t);\n\t\t}\n\n\t\tthis._implementation = implementation;\n\t}\n\n\t/**\n\t * Local module mappings for module\n\t * @param {object} map\n\t */\n\tset map(map) {\n\t\tif (this._map) {\n\t\t\tthrow new Error(\n\t\t\t\t`Local module map of module ${this.name} already set`\n\t\t\t);\n\t\t}\n\n\t\tthis._map = map;\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * A Promise with resolve() and reject() methods so that it can be fulfilled\n * asynchronously from outside instead of the callback.\n *\n * Because Promise cannot be extended in the usual way, we need to do some\n * magic to define this class.\n */\nexport default class ResolvablePromise {\n\t/**\n\t * Don't construct ResolvablePromise objects directly: rely on\n\t * ResolvablePromise.new() instead.\n\t */\n\tconstructor() {\n\t\tthrow new Error(\n\t\t\t\"Don't construct ResolvablePromise objects directly: \" +\n\t\t\t\t'rely on ResolvablePromise.new() instead'\n\t\t);\n\t}\n}\n\nResolvablePromise.new = () => {\n\tconst capture = {};\n\n\tconst promise = new Promise((resolve, reject) => {\n\t\tcapture._resolve = resolve;\n\t\tcapture._reject = reject;\n\t});\n\n\tObject.assign(promise, capture, {\n\t\tfulfilled: false,\n\t\tresolved: false,\n\t\trejected: false,\n\t\tresolution: undefined,\n\t\trejection: undefined,\n\t});\n\n\tpromise.resolve = value => resolve(promise, value);\n\tpromise.reject = error => reject(promise, error);\n\n\t// This is to avoid UnhandledPromiseRejectionWarning errors during the tests\n\tif (typeof jest !== 'undefined') {\n\t\tpromise.catch(() => {});\n\t}\n\n\treturn promise;\n};\n\n/**\n * Resolve the promise\n * @param {ResolvablePromise} resolvablePromise\n * @param {*} value\n */\nfunction resolve(resolvablePromise, value) {\n\t_assertNotFulfilled(resolvablePromise);\n\n\tresolvablePromise.fulfilled = true;\n\tresolvablePromise.resolved = true;\n\tresolvablePromise.resolution = value;\n\n\tresolvablePromise._resolve(value);\n}\n\n/**\n * Reject the Promise\n * @param {ResolvablePromise} resolvablePromise\n * @param {Error} error\n */\nfunction reject(resolvablePromise, error) {\n\t_assertNotFulfilled(resolvablePromise);\n\n\tresolvablePromise.fulfilled = true;\n\tresolvablePromise.rejected = true;\n\tresolvablePromise.rejection = error;\n\n\tresolvablePromise._reject(error);\n}\n\n/**\n * Throws if Promise is already fulfilled\n * @param {ResolvablePromise} resolvablePromise\n */\nfunction _assertNotFulfilled(resolvablePromise) {\n\tif (resolvablePromise.fulfilled) {\n\t\tthrow new Error('Promise already fulfilled');\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport PathResolver from './path-resolver';\n\n/**\n * A class that calls the server to resolve module dependencies.\n */\nexport default class DependencyResolver {\n\t/**\n\t * Creates an instance of DependencyResolver class\n\t * @constructor\n\t * @param {Config} config\n\t */\n\tconstructor(config) {\n\t\tthis._config = config;\n\n\t\tthis._pathResolver = new PathResolver();\n\t\tthis._cachedResolutions = {};\n\t}\n\n\t/**\n\t * Resolves modules dependencies\n\t * @param {array} modules list of modules which dependencies should be\n\t *     \t\t\t\t\t\tresolved\n\t * @return {array} list of module names, representing module dependencies\n\t *     \t\t\t\t(module name itself is being returned too)\n\t */\n\tresolve(modules) {\n\t\tif (modules === undefined || modules.length == 0) {\n\t\t\tthrow new Error(`Argument 'modules' cannot be undefined or empty`);\n\t\t}\n\n\t\tconst config = this._config;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst resolution = this._cachedResolutions[modules];\n\n\t\t\tif (resolution) {\n\t\t\t\tresolve(resolution);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modulesParam = `modules=${encodeURIComponent(modules)}`;\n\t\t\tlet url = `${config.resolvePath}?${modulesParam}`;\n\t\t\tlet options = {};\n\n\t\t\tif (url.length > config.urlMaxLength) {\n\t\t\t\turl = config.resolvePath;\n\t\t\t\toptions = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: modulesParam,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tfetch(url, options)\n\t\t\t\t.then(response => response.text())\n\t\t\t\t.then(text => {\n\t\t\t\t\tconst resolution = JSON.parse(text);\n\t\t\t\t\tthis._cachedResolutions[modules] = resolution;\n\t\t\t\t\tresolve(resolution);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n}\n","/**\n * © 2014 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport URLBuilder from './url-builder';\n\n/* eslint-disable no-console */\n\n/**\n * A class responsible for loading the script resources that contain modules\n * from the server.\n */\nexport default class ScriptLoader {\n\t/**\n\t * @param {object} document DOM document object to use\n\t * @param {Config} config\n\t */\n\tconstructor(document, config) {\n\t\tthis._document = document;\n\t\tthis._config = config;\n\n\t\tthis._urlBuilder = new URLBuilder(config);\n\n\t\tthis._injectedScripts = {};\n\t}\n\n\t/**\n\t * Loads list of modules\n\t * @param {Array} moduleNames List of modules to be loaded.\n\t * @return {Promise} Promise which will be resolved as soon as all modules\n\t * \t\t\t\t\t\thave been loaded.\n\t */\n\tloadModules(moduleNames) {\n\t\tconst urlBuilder = this._urlBuilder;\n\n\t\tif (moduleNames.length == 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst modulesURLs = urlBuilder.build(moduleNames);\n\n\t\tconst promises = modulesURLs.map(modulesURL =>\n\t\t\tthis._loadScript(modulesURL)\n\t\t);\n\n\t\treturn Promise.all(promises);\n\t}\n\n\t/**\n\t * Places a script element on the page and waits for it to load.\n\t * @param {object} modulesURL an object with two properties:\n\t * \t\t\t\t\t- modules: list of the modules which should be loaded\n\t * \t\t\t\t\t- url: the URL from which the modules should be loaded\n\t * @return {Promise} a Promise which will be resolved as soon as the script\n\t * \t\t\t\t\t\tis loaded\n\t */\n\t_loadScript(modulesURL) {\n\t\tconst config = this._config;\n\t\tconst modules = config.getModules(modulesURL.modules);\n\n\t\tlet script = this._injectedScripts[modulesURL.url];\n\n\t\tif (!script) {\n\t\t\tscript = this._document.createElement('script');\n\n\t\t\tscript.src = modulesURL.url;\n\t\t\tscript.async = false;\n\n\t\t\tscript.onload = script.onreadystatechange = () => {\n\t\t\t\tif (\n\t\t\t\t\tthis.readyState &&\n\t\t\t\t\tthis.readyState !== 'complete' &&\n\t\t\t\t\tthis.readyState !== 'load'\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscript.onload = script.onreadystatechange = null;\n\t\t\t\tscript.onerror = null;\n\n\t\t\t\tmodules.forEach(module => {\n\t\t\t\t\tif (module.fetch.fulfilled) {\n\t\t\t\t\t\tif (config.showWarnings) {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`Liferay AMD Loader: Module '${module.name}' ` +\n\t\t\t\t\t\t\t\t\t`is being fetched from\\n${script.src}\\n` +\n\t\t\t\t\t\t\t\t\t`but was already fetched from\\n` +\n\t\t\t\t\t\t\t\t\t(module.fetch.resolved\n\t\t\t\t\t\t\t\t\t\t? module.fetch.resolution.src\n\t\t\t\t\t\t\t\t\t\t: module.fetch.rejection.script.src)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodule.fetch.resolve(script);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscript.onerror = () => {\n\t\t\t\tscript.onload = script.onreadystatechange = null;\n\t\t\t\tscript.onerror = null;\n\n\t\t\t\tconst error = Object.assign(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Unable to load script from URL ${modulesURL.url}`\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\turl: modulesURL.url,\n\t\t\t\t\t\tmodules: modulesURL.modules,\n\t\t\t\t\t\tscript,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tmodules.forEach(module => module.fetch.reject(error));\n\t\t\t};\n\n\t\t\tthis._injectedScripts[modulesURL.url] = script;\n\t\t\tthis._document.head.appendChild(script);\n\t\t}\n\n\t\treturn Promise.all(modules.map(module => module.fetch));\n\t}\n}\n"],"sourceRoot":""}