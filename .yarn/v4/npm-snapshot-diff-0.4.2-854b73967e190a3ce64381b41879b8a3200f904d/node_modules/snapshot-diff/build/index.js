'use strict';

var diff = require('jest-diff');
var snapshot = require('jest-snapshot');
var prettyFormat = require('pretty-format');

var ReactElement = prettyFormat.plugins.ReactElement;

var reactElement = Symbol.for('react.element');

var defaultOptions = {
  expand: false,
  colors: false,
  contextLines: -1, // Forces to use default from Jest
  aAnnotation: 'First value',
  bAnnotation: 'Second value'
};

var SNAPSHOT_TITLE = 'Snapshot Diff:\n';

var snapshotDiff = function snapshotDiff(valueA, valueB, options) {
  var difference = void 0;
  var mergedOptions = Object.assign({}, defaultOptions, options);

  if (isReactComponent(valueA) && isReactComponent(valueB)) {
    difference = diffReactComponents(valueA, valueB, mergedOptions);
  } else {
    difference = diffStrings(valueA, valueB, mergedOptions);
  }

  if (!mergedOptions.colors) {
    var stripAnsi = require('strip-ansi');

    difference = stripAnsi(difference);
  }

  return SNAPSHOT_TITLE + difference;
};

var isReactComponent = function isReactComponent(value) {
  return value && value.$$typeof === reactElement;
};

function diffStrings(valueA, valueB, options) {
  return diff(valueA, valueB, {
    expand: options.expand,
    contextLines: options.contextLines,
    aAnnotation: options.aAnnotation,
    bAnnotation: options.bAnnotation
  });
}

function requireReactTestRenderer() {
  try {
    return require('react-test-renderer'); // eslint-disable-line import/no-extraneous-dependencies
  } catch (error) {
    if (error.code === 'MODULE_NOT_FOUND') {
      throw new Error(`Failed to load optional module "react-test-renderer". ` + `If you need to compare React elements, please add "react-test-renderer" to your ` + `project's dependencies.\n` + `${error.message}`);
    }
    throw error;
  }
}

function diffReactComponents(valueA, valueB, options) {
  var renderer = requireReactTestRenderer();
  var reactValueA = renderer.create(valueA).toJSON();
  var reactValueB = renderer.create(valueB).toJSON();
  var prettyFormatOptions = { plugins: [ReactElement], min: true };

  return diff(reactValueA, reactValueB, {
    expand: options.expand,
    contextLines: options.contextLines,
    aAnnotation: prettyFormat(valueA, prettyFormatOptions),
    bAnnotation: prettyFormat(valueB, prettyFormatOptions)
  });
}

function toMatchDiffSnapshot(valueA, valueB, options) {
  var difference = snapshotDiff(valueA, valueB, options);

  return snapshot.toMatchSnapshot.call(this, difference);
}

function getSnapshotDiffSerializer() {
  return {
    test(value) {
      return typeof value === 'string' && value.indexOf(SNAPSHOT_TITLE) === 0;
    },
    print(value) {
      return value;
    }
  };
}

module.exports = snapshotDiff;
module.exports.snapshotDiff = snapshotDiff;
module.exports.toMatchDiffSnapshot = toMatchDiffSnapshot;
module.exports.getSnapshotDiffSerializer = getSnapshotDiffSerializer;