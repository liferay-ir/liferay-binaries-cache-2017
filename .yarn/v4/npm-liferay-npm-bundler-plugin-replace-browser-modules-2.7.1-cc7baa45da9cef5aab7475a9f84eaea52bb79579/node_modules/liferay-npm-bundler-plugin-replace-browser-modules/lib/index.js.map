{"version":3,"sources":["../src/index.js"],"names":["log","pkg","pkgJson","browser","unpkg","jsdelivr","replaceMainModule","dir","replaceModules","info","pkgs","pkgDir","pkgId","name","version","main","src","join","resolveModuleFile","dest","replaceFile","Object","keys","forEach","to","from","ignoreFile","srcName","destName","srcModuleName","replace","destModuleName","contents","readFileSync","toString","err","code","mkdirsSync","dirname","writeFileSync","file","fileName"],"mappings":";;;;;;kBAae,uBAAgC;AAAA,KAAtBA,GAAsB,QAAtBA,GAAsB;AAAA,KAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,KAAVC,OAAU,SAAVA,OAAU;;AAC9C,KAAMC,UAAUD,QAAQC,OAAR,IAAmBD,QAAQE,KAA3B,IAAoCF,QAAQG,QAA5D;;AAEA,KAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAChCG,oBAAkBL,IAAIM,GAAtB,EAA2BJ,OAA3B,EAAoCD,OAApC,EAA6CF,GAA7C;AACA,EAFD,MAEO,IAAIG,OAAJ,EAAa;AACnBK,iBAAeP,IAAIM,GAAnB,EAAwBJ,OAAxB,EAAiCD,OAAjC,EAA0CF,GAA1C;AACA,EAFM,MAEA;AACNA,MAAIS,IAAJ,CAAS,yBAAT,EAAoC,0BAApC;AACA;AACD,C;;AAjBD;;;;AACA;;IAAYC,I;;AACZ;;;;;;;;AAiBA;;;;;;;;AAzBA;;;;;;AAiCA,SAASJ,iBAAT,CAA2BK,MAA3B,EAAmCR,OAAnC,EAA4CD,OAA5C,EAAqDF,GAArD,EAA0D;AACzD,KAAMY,QAAWV,QAAQW,IAAnB,SAA2BX,QAAQY,OAAzC;AACA,KAAMC,OAAOb,QAAQa,IAAR,IAAgB,UAA7B;;AAEA,KAAMC,MAAM,eAAKC,IAAL,CAAUN,MAAV,EAAkBD,KAAKQ,iBAAL,CAAuBP,MAAvB,EAA+BR,OAA/B,CAAlB,CAAZ;AACA,KAAMgB,OAAO,eAAKF,IAAL,CAAUN,MAAV,EAAkBD,KAAKQ,iBAAL,CAAuBP,MAAvB,EAA+BI,IAA/B,CAAlB,CAAb;;AAEAK,aAAYR,KAAZ,EAAmBI,GAAnB,EAAwBb,OAAxB,EAAiCgB,IAAjC,EAAuCJ,IAAvC,EAA6Cf,GAA7C;AACA;;AAED;;;;;;;;;;AAjCA;;;AAyCA,SAASQ,cAAT,CAAwBG,MAAxB,EAAgCR,OAAhC,EAAyCD,OAAzC,EAAkDF,GAAlD,EAAuD;AACtD,KAAMY,QAAWV,QAAQW,IAAnB,SAA2BX,QAAQY,OAAzC;;AAEAO,QAAOC,IAAP,CAAYnB,OAAZ,EAAqBoB,OAArB,CAA6B,gBAAQ;AACpC,MAAMC,KAAKrB,QAAQsB,IAAR,CAAX;AACA,MAAMN,OAAO,eAAKF,IAAL,CAAUN,MAAV,EAAkBD,KAAKQ,iBAAL,CAAuBP,MAAvB,EAA+Bc,IAA/B,CAAlB,CAAb;;AAEA,MAAID,MAAM,KAAV,EAAiB;AAChBE,cAAWP,IAAX,EAAiBM,IAAjB,EAAuBzB,GAAvB;AACA,GAFD,MAEO;AACN,OAAMgB,MAAM,eAAKC,IAAL,CAAUN,MAAV,EAAkBD,KAAKQ,iBAAL,CAAuBP,MAAvB,EAA+Ba,EAA/B,CAAlB,CAAZ;;AAEAJ,eAAYR,KAAZ,EAAmBI,GAAnB,EAAwBQ,EAAxB,EAA4BL,IAA5B,EAAkCM,IAAlC,EAAwCzB,GAAxC;AACA;AACD,EAXD;AAYA;;AAED;;;;;;;;;;AAUA,SAASoB,WAAT,CAAqBR,KAArB,EAA4BI,GAA5B,EAAiCW,OAAjC,EAA0CR,IAA1C,EAAgDS,QAAhD,EAA0D5B,GAA1D,EAA+D;AAC9D,KAAM6B,gBAAgBF,QAAQG,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAtB;AACA,KAAMC,iBAAiBH,SAASE,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAvB;;AAEA9B,KAAIS,IAAJ,CACC,yBADD,wBAEqBmB,QAFrB,qBAE6CD,OAF7C;;AAKA,KAAI;AACH,MAAIK,WAAW,EAAf;;AAEA,MAAI;AACHA,cAAW,kBAAGC,YAAH,CAAgBjB,GAAhB,EAAqBkB,QAArB,EAAX;AACA,GAFD,CAEE,OAAOC,GAAP,EAAY;AACb,OAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AAC1B,UAAMD,GAAN;AACA;AACD;;AAEDH,aAAWA,SAASF,OAAT,QACNlB,KADM,SACGiB,aADH,gBAENjB,KAFM,SAEGmB,cAFH,QAAX;;AAKA,oBAAGM,UAAH,CAAc,eAAKC,OAAL,CAAanB,IAAb,CAAd;;AAEA,oBAAGoB,aAAH,CACCpB,IADD,EAEC,6BACCQ,OADD,GAEC,6DAFD,GAGCK,QALF;AAOA,EAzBD,CAyBE,OAAOG,GAAP,EAAY;AACb,MAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AAC1B,SAAMD,GAAN;AACA;AACD;AACD;;AAED;;;;;;;AAOA,SAAST,UAAT,CAAoBc,IAApB,EAA0BC,QAA1B,EAAoCzC,GAApC,EAAyC;AACxCA,KAAIS,IAAJ,CACC,yBADD,uBAEoBgC,QAFpB;;AAKA,mBAAGJ,UAAH,CAAc,eAAKC,OAAL,CAAaE,IAAb,CAAd;;AAEA,mBAAGD,aAAH,CACCC,IADD,EAEC,0BACC,yDAHF;AAKA","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport fs from 'fs-extra';\nimport * as pkgs from 'liferay-npm-build-tools-common/lib/packages';\nimport path from 'path';\n\n/**\n * @return {void}\n */\nexport default function({log, pkg}, {pkgJson}) {\n\tconst browser = pkgJson.browser || pkgJson.unpkg || pkgJson.jsdelivr;\n\n\tif (typeof browser === 'string') {\n\t\treplaceMainModule(pkg.dir, browser, pkgJson, log);\n\t} else if (browser) {\n\t\treplaceModules(pkg.dir, browser, pkgJson, log);\n\t} else {\n\t\tlog.info('replace-browser-modules', 'No browser modules found');\n\t}\n}\n\n/**\n * Copy \"browser\"/\"module\" module file on top of \"main\" module file.\n * @param {String} pkgDir directory where package is placed\n * @param {String} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceMainModule(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\tconst main = pkgJson.main || 'index.js';\n\n\tconst src = path.join(pkgDir, pkgs.resolveModuleFile(pkgDir, browser));\n\tconst dest = path.join(pkgDir, pkgs.resolveModuleFile(pkgDir, main));\n\n\treplaceFile(pkgId, src, browser, dest, main, log);\n}\n\n/**\n * Copy \"browser\"/\"module\" module files on top of their server versions.\n * @param {String} pkgDir directory where package is placed\n * @param {Object} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceModules(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\n\tObject.keys(browser).forEach(from => {\n\t\tconst to = browser[from];\n\t\tconst dest = path.join(pkgDir, pkgs.resolveModuleFile(pkgDir, from));\n\n\t\tif (to == false) {\n\t\t\tignoreFile(dest, from, log);\n\t\t} else {\n\t\t\tconst src = path.join(pkgDir, pkgs.resolveModuleFile(pkgDir, to));\n\n\t\t\treplaceFile(pkgId, src, to, dest, from, log);\n\t\t}\n\t});\n}\n\n/**\n * Replace one package file with another.\n * @param {String} pkgId package id (name@version)\n * @param {String} src path to source file\n * @param {String} srcName the name of the source file\n * @param {String} dest path to destination file\n * @param {String} destName the name of the destination file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceFile(pkgId, src, srcName, dest, destName, log) {\n\tconst srcModuleName = srcName.replace('.js', '');\n\tconst destModuleName = destName.replace('.js', '');\n\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Replacing module ${destName} with module ${srcName}`\n\t);\n\n\ttry {\n\t\tlet contents = '';\n\n\t\ttry {\n\t\t\tcontents = fs.readFileSync(src).toString();\n\t\t} catch (err) {\n\t\t\tif (err.code !== 'ENOENT') {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\tcontents = contents.replace(\n\t\t\t`'${pkgId}/${srcModuleName}'`,\n\t\t\t`'${pkgId}/${destModuleName}'`\n\t\t);\n\n\t\tfs.mkdirsSync(path.dirname(dest));\n\n\t\tfs.writeFileSync(\n\t\t\tdest,\n\t\t\t'/* Module replaced with ' +\n\t\t\t\tsrcName +\n\t\t\t\t' by liferay-npm-bundler-plugin-replace-browser-modules */\\n' +\n\t\t\t\tcontents\n\t\t);\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Ignores one package\n * @param {String} file path to file to be ignored\n * @param {String} fileName the name of the file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction ignoreFile(file, fileName, log) {\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Emptying module ${fileName} because it is server-only`\n\t);\n\n\tfs.mkdirsSync(path.dirname(file));\n\n\tfs.writeFileSync(\n\t\tfile,\n\t\t'/* Module ignored by ' +\n\t\t\t'liferay-npm-bundler-plugin-replace-browser-modules */\\n'\n\t);\n}\n"]}