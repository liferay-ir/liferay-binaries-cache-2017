'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (_ref, _ref2) {
	var log = _ref.log,
	    pkg = _ref.pkg;
	var pkgJson = _ref2.pkgJson;

	var browser = pkgJson.browser || pkgJson.unpkg || pkgJson.jsdelivr;

	if (typeof browser === 'string') {
		replaceMainModule(pkg.dir, browser, pkgJson, log);
	} else if (browser) {
		replaceModules(pkg.dir, browser, pkgJson, log);
	} else {
		log.info('replace-browser-modules', 'No browser modules found');
	}
};

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _packages = require('liferay-npm-build-tools-common/lib/packages');

var pkgs = _interopRequireWildcard(_packages);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copy "browser"/"module" module file on top of "main" module file.
 * @param {String} pkgDir directory where package is placed
 * @param {String} browser the value of the "browser"/"module" field
 * @param {Object} pkgJson package.json contents
 * @param {PluginLogger} log a logger
 * @return {void}
 */
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

function replaceMainModule(pkgDir, browser, pkgJson, log) {
	var pkgId = pkgJson.name + '@' + pkgJson.version;
	var main = pkgJson.main || 'index.js';

	var src = _path2.default.join(pkgDir, pkgs.resolveModuleFile(pkgDir, browser));
	var dest = _path2.default.join(pkgDir, pkgs.resolveModuleFile(pkgDir, main));

	replaceFile(pkgId, src, browser, dest, main, log);
}

/**
 * Copy "browser"/"module" module files on top of their server versions.
 * @param {String} pkgDir directory where package is placed
 * @param {Object} browser the value of the "browser"/"module" field
 * @param {Object} pkgJson package.json contents
 * @param {PluginLogger} log a logger
 * @return {void}
 */


/**
 * @return {void}
 */
function replaceModules(pkgDir, browser, pkgJson, log) {
	var pkgId = pkgJson.name + '@' + pkgJson.version;

	Object.keys(browser).forEach(function (from) {
		var to = browser[from];
		var dest = _path2.default.join(pkgDir, pkgs.resolveModuleFile(pkgDir, from));

		if (to == false) {
			ignoreFile(dest, from, log);
		} else {
			var src = _path2.default.join(pkgDir, pkgs.resolveModuleFile(pkgDir, to));

			replaceFile(pkgId, src, to, dest, from, log);
		}
	});
}

/**
 * Replace one package file with another.
 * @param {String} pkgId package id (name@version)
 * @param {String} src path to source file
 * @param {String} srcName the name of the source file
 * @param {String} dest path to destination file
 * @param {String} destName the name of the destination file
 * @param {PluginLogger} log a logger
 * @return {void}
 */
function replaceFile(pkgId, src, srcName, dest, destName, log) {
	var srcModuleName = srcName.replace('.js', '');
	var destModuleName = destName.replace('.js', '');

	log.info('replace-browser-modules', 'Replacing module ' + destName + ' with module ' + srcName);

	try {
		var contents = '';

		try {
			contents = _fsExtra2.default.readFileSync(src).toString();
		} catch (err) {
			if (err.code !== 'ENOENT') {
				throw err;
			}
		}

		contents = contents.replace('\'' + pkgId + '/' + srcModuleName + '\'', '\'' + pkgId + '/' + destModuleName + '\'');

		_fsExtra2.default.mkdirsSync(_path2.default.dirname(dest));

		_fsExtra2.default.writeFileSync(dest, '/* Module replaced with ' + srcName + ' by liferay-npm-bundler-plugin-replace-browser-modules */\n' + contents);
	} catch (err) {
		if (err.code !== 'ENOENT') {
			throw err;
		}
	}
}

/**
 * Ignores one package
 * @param {String} file path to file to be ignored
 * @param {String} fileName the name of the file
 * @param {PluginLogger} log a logger
 * @return {void}
 */
function ignoreFile(file, fileName, log) {
	log.info('replace-browser-modules', 'Emptying module ' + fileName + ' because it is server-only');

	_fsExtra2.default.mkdirsSync(_path2.default.dirname(file));

	_fsExtra2.default.writeFileSync(file, '/* Module ignored by ' + 'liferay-npm-bundler-plugin-replace-browser-modules */\n');
}
//# sourceMappingURL=index.js.map