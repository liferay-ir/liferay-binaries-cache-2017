{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["fs","pkg","id","name","version","dir","__dirname","log","beforeEach","overwrite","then","done","afterEach","emptyDirSync","rmdirSync","it","pkgJson","main","browser","expect","messages","toMatchSnapshot","readFileSync","toString","unpkg","jsdelivr","describe"],"mappings":"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","file":"index.test.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as fs from 'fs-extra';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport rcopy from 'recursive-copy';\nimport plugin from '../index';\n\n// Package descriptor used in tests\nconst pkg = {\n\tid: 'package@1.0.0',\n\tname: 'package',\n\tversion: '1.0.0',\n\tdir: `${__dirname}/pkg`,\n};\n\nlet log;\n\n// Restore package status prior to running each test\nbeforeEach(done => {\n\tlog = new PluginLogger();\n\n\trcopy(`${__dirname}/__fixtures__`, pkg.dir, {overwrite: true}).then(done);\n});\n\n// Delete result files after running each test\nafterEach(() => {\n\tfs.emptyDirSync(pkg.dir);\n\tfs.rmdirSync(pkg.dir);\n});\n\nit('logs results correctly', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js',\n\t\tbrowser: 'test-browser.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(log.messages).toMatchSnapshot();\n});\n\nit('replaces main file with browser file', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js',\n\t\tbrowser: 'test-browser.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js`).toString()\n\t).toMatchSnapshot();\n});\n\nit('replaces main directory with browser file', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: './dir',\n\t\tbrowser: 'test-browser.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/dir/index.js`).toString()\n\t).toMatchSnapshot();\n});\n\nit('works with unpkg field too', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js',\n\t\tunpkg: 'test-browser.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js`).toString()\n\t).toMatchSnapshot();\n});\n\nit('works with jsdelivr field too', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js',\n\t\tjsdelivr: 'test-browser.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js`).toString()\n\t).toMatchSnapshot();\n});\n\nit('replaces server files with browser files', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tbrowser: {\n\t\t\tdir: 'test-main.js',\n\t\t\t'test-browser.js': 'test.js',\n\t\t\t'test-browser-2.js': 'test-2.js',\n\t\t},\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/dir/index.js`).toString()\n\t).toMatchSnapshot();\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser.js`).toString()\n\t).toMatchSnapshot();\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser-2.js`).toString()\n\t).toMatchSnapshot();\n});\n\nit('does replace ignored modules with empty objects', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'main.js',\n\t\tbrowser: {\n\t\t\t'test-browser.js': false,\n\t\t},\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser.js`).toString()\n\t).toMatchSnapshot();\n});\n\ndescribe('works well with non-existent files', () => {\n\tit('when browser field has a unique file', () => {\n\t\tconst pkgJson = {\n\t\t\tname: pkg.name,\n\t\t\tversion: pkg.version,\n\t\t\tmain: 'main.js',\n\t\t\tbrowser: 'non-existent-file.js',\n\t\t};\n\n\t\tplugin({pkg, log}, {pkgJson});\n\n\t\texpect(\n\t\t\tfs.readFileSync(`${pkg.dir}/main.js`).toString()\n\t\t).toMatchSnapshot();\n\t});\n\n\tit('when browser field has several files', () => {\n\t\tconst pkgJson = {\n\t\t\tname: pkg.name,\n\t\t\tversion: pkg.version,\n\t\t\tmain: 'main.js',\n\t\t\tbrowser: {\n\t\t\t\t'non-existent-file.js': false,\n\t\t\t\t'non-existent-dir/non-existent-file-in-dir.js': false,\n\t\t\t\t'non-existent-file-2.js': 'test-browser.js',\n\t\t\t\t'non-existent-file-3.js': 'non-existent-file-4.js',\n\t\t\t},\n\t\t};\n\n\t\tplugin({pkg, log}, {pkgJson});\n\n\t\texpect(\n\t\t\tfs.readFileSync(`${pkg.dir}/non-existent-file.js`).toString()\n\t\t).toMatchSnapshot();\n\t\texpect(\n\t\t\tfs\n\t\t\t\t.readFileSync(\n\t\t\t\t\t`${pkg.dir}/non-existent-dir/non-existent-file-in-dir.js`\n\t\t\t\t)\n\t\t\t\t.toString()\n\t\t).toMatchSnapshot();\n\t\texpect(\n\t\t\tfs.readFileSync(`${pkg.dir}/non-existent-file-2.js`).toString()\n\t\t).toMatchSnapshot();\n\t\texpect(\n\t\t\tfs.readFileSync(`${pkg.dir}/non-existent-file-3.js`).toString()\n\t\t).toMatchSnapshot();\n\t});\n});\n"]}