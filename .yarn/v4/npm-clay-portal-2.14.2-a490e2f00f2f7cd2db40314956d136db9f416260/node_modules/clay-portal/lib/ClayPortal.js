'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ClayPortal = undefined;

var _clayComponent = require('clay-component');

var _clayComponent2 = _interopRequireDefault(_clayComponent);

var _metalSoy = require('metal-soy');

var _metalSoy2 = _interopRequireDefault(_metalSoy);

var _metalState = require('metal-state');

var _ClayPortalSoy = require('./ClayPortal.soy.js');

var _ClayPortalSoy2 = _interopRequireDefault(_ClayPortalSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Metal ClayPortal component.
 * @extends ClayComponent
 */
var ClayPortal = function (_ClayComponent) {
	_inherits(ClayPortal, _ClayComponent);

	function ClayPortal() {
		_classCallCheck(this, ClayPortal);

		return _possibleConstructorReturn(this, (ClayPortal.__proto__ || Object.getPrototypeOf(ClayPortal)).apply(this, arguments));
	}

	return ClayPortal;
}(_clayComponent2.default);

/**
 * State definition.
 * @static
 * @type {!Object}
 */


ClayPortal.STATE = {
	/**
  * @default undefined
  * @instance
  * @memberof ClayPortal
  * @type {!(html|string)}
  * CSS classes to be applied to the element.
  */
	content: _metalState.Config.required(),

	/**
  * Data to add to the element.
  * @default undefined
  * @instance
  * @memberof ClayPortal
  * @type {?object}
  */
	data: _metalState.Config.object(),

	/**
  * Object that wires events with default listeners
  * @default undefined
  * @instance
  * @memberof ClayPortal
  * @review
  * @type {?(object|undefined)}
  */
	defaultEventHandler: _metalState.Config.object()
};

_metalSoy2.default.register(ClayPortal, _ClayPortalSoy2.default);

exports.ClayPortal = ClayPortal;
exports.default = ClayPortal;
//# sourceMappingURL=ClayPortal.js.map