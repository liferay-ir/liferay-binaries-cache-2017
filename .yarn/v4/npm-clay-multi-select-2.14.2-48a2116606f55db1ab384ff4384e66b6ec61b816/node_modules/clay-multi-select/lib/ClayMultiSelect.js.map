{"version":3,"sources":["../src/ClayMultiSelect.js"],"names":["ClayMultiSelect","_itemFocused","_eventHandler","EventHandler","addListener","_defaultAutocompleteItemSelected","_defaultInputBlur","_defaultInputChange","_defaultInputFocus","_defaultLabelItemAdded","_defaultLabelItemRemoved","_defaultLabelItemCloseButtonClick","_defaultLabelItemKeyDown","removeAllListeners","event","data","item","label","value","_createItemObject","_addLabelItem","filteredItems","length","_inputFocused","inputValue","char","words","_getWords","forEach","added","word","replace","_removeLabelItem","key","preventDefault","element","emit","name","originalEvent","newVal","prevVal","_focusLastLabelItem","Object","assign","target","currentTarget","filteredItem","filter","toLowerCase","map","creatable","itemIsSelected","_isItemSelected","newSelectedItems","selectedItems","push","itemDoesNotExists","focus","labelItems","_getLabelItems","_focusLabelItem","autocomplete","refs","querySelectorAll","string","hasComma","includes","split","Boolean","find","selectedItem","index","Number","getAttribute","splice","ClayComponent","STATE","Config","bool","internal","autocompleteFilterCondition","oneOfType","func","elem","contentRenderer","object","dataProviderDebounceTime","number","dataProviderInitialData","array","dataSource","defaultEventHandler","dropdownPortalElement","elementClasses","enableAutocomplete","validator","console","warn","helpText","required","id","inputAllowedCharacters","instanceOf","RegExp","inputName","labelLocator","placeholder","pollingInterval","requestOptions","shapeOf","method","mode","cache","credentials","headers","redirect","referrer","body","requestPolling","requestRetries","requestTimeout","showSelectButton","spritemap","valueLocator","Soy","register","templates"],"mappings":"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","file":"ClayMultiSelect.js","sourcesContent":["import 'clay-autocomplete';\nimport 'clay-button';\nimport 'clay-label';\nimport {Config} from 'metal-state';\nimport {EventHandler} from 'metal-events';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayMultiSelect.soy.js';\n\n/**\n * Metal ClayMultiSelect component.\n * @extends ClayComponent\n */\nclass ClayMultiSelect extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis._itemFocused = null;\n\t\tthis._eventHandler = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.addListener(\n\t\t\t'autocompleteItemSelected',\n\t\t\tthis._defaultAutocompleteItemSelected,\n\t\t\ttrue\n\t\t);\n\t\tthis.addListener('inputBlur', this._defaultInputBlur, true);\n\t\tthis.addListener('inputChange', this._defaultInputChange, true);\n\t\tthis.addListener('inputFocus', this._defaultInputFocus, true);\n\t\tthis.addListener('labelItemAdded', this._defaultLabelItemAdded, true);\n\t\tthis.addListener(\n\t\t\t'labelItemRemoved',\n\t\t\tthis._defaultLabelItemRemoved,\n\t\t\ttrue\n\t\t);\n\t\tthis.addListener(\n\t\t\t'labelItemCloseButtonClick',\n\t\t\tthis._defaultLabelItemCloseButtonClick,\n\t\t\ttrue\n\t\t);\n\t\tthis.addListener(\n\t\t\t'labelItemKeyDown',\n\t\t\tthis._defaultLabelItemKeyDown,\n\t\t\ttrue\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis._eventHandler.removeAllListeners();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tthis._eventHandler.removeAllListeners();\n\t\tthis._itemFocused = null;\n\t}\n\n\t/**\n\t * Handles the autocomplete selected item event.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultAutocompleteItemSelected(event) {\n\t\tconst {label, value} = event.data.item;\n\n\t\tconst item = this._createItemObject(label, value);\n\n\t\tthis._addLabelItem(item);\n\t}\n\n\t/**\n\t *\n\t * @protected\n\t */\n\t_defaultInputBlur() {\n\t\tif (\n\t\t\t!this.filteredItems ||\n\t\t\t(this.filteredItems && this.filteredItems.length === 0)\n\t\t) {\n\t\t\tthis._inputFocused = false;\n\t\t\tthis.inputValue = '';\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultInputChange(event) {\n\t\tconst char = event.data.char;\n\t\tlet inputValue = event.data.value;\n\t\tconst words = this._getWords(inputValue);\n\n\t\tif (char === ',' || words.length > 1) {\n\t\t\twords.forEach(word => {\n\t\t\t\tlet added = this._addLabelItem(\n\t\t\t\t\tthis._createItemObject(word, word)\n\t\t\t\t);\n\n\t\t\t\tinputValue = inputValue.replace(word + ',', added ? '' : word);\n\t\t\t});\n\t\t}\n\n\t\tthis.inputValue = inputValue;\n\t}\n\n\t/**\n\t *\n\t * @protected\n\t */\n\t_defaultInputFocus() {\n\t\tthis._inputFocused = true;\n\t}\n\n\t/**\n\t *\n\t * @protected\n\t */\n\t_defaultLabelItemAdded() {\n\t\tthis.inputValue = '';\n\t\tthis._inputFocused = true;\n\t}\n\n\t/**\n\t * Handles the click on the close label item button.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultLabelItemCloseButtonClick(event) {\n\t\tthis._removeLabelItem(event.data.item);\n\t}\n\n\t/**\n\t * Handles the click on the close label item button.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultLabelItemKeyDown(event) {\n\t\tif (event.data.key == 'Backspace' || event.data.key == 'Enter') {\n\t\t\tevent.preventDefault();\n\n\t\t\tthis._removeLabelItem(event.data.element);\n\t\t}\n\t}\n\n\t/**\n\t * Focus the input after a labelItem is removed.\n\t * @protected\n\t */\n\t_defaultLabelItemRemoved() {\n\t\tthis.inputValue = '';\n\t\tthis._inputFocused = true;\n\t}\n\n\t/**\n\t * Continues the propagation of the autocomplete item selected event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {?Boolean} If the event has been prevented or not.\n\t */\n\t_handleAutocompleteItemSelected(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'autocompleteItemSelected',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the data change event\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleDataChange(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'dataChange',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the filteredItemsChanged event\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_handleFilteredItemsChange(event) {\n\t\tif (event.newVal !== event.prevVal) {\n\t\t\tthis.filteredItems = event.newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Continues the propagation of the the input blur event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {?Boolean} If the event has been prevented or not.\n\t */\n\t_handleInputBlur(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'inputBlur',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the the input change event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleInputChange(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'inputChange',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Handles form interactions and propagates corresponding events.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleInputKeyDown(event) {\n\t\tconst {element, key} = event.data;\n\n\t\tswitch (key) {\n\t\tcase 'Backspace':\n\t\t\t// Prevents page from returning when input is empty.\n\t\t\t// See: https://support.mozilla.org/en-US/questions/1057630\n\t\t\tif (!element.value) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn this._focusLastLabelItem();\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Enter':\n\t\t\tevent.preventDefault();\n\n\t\t\tif (element.value) {\n\t\t\t\tthis._addLabelItem(\n\t\t\t\t\tthis._createItemObject(element.value, element.value)\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Continues the propagation of the the input focus event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleInputFocus(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'inputFocus',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the the autocomplete label item click event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {?Boolean} If the event has been prevented or not.\n\t */\n\t_handleLabelItemClick(event) {\n\t\treturn !this.emit({\n\t\t\tdata: event.data,\n\t\t\tname: 'labelItemClick',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the item close event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleLabelItemCloseButtonClick(event) {\n\t\treturn !this.emit({\n\t\t\tdata: Object.assign(event.data || {}, {\n\t\t\t\titem: event.target.element,\n\t\t\t}),\n\t\t\tname: 'labelItemCloseButtonClick',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the item focused event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleLabelItemKeyDown(event) {\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\telement: event.currentTarget,\n\t\t\t\tkey: event.key,\n\t\t\t},\n\t\t\tname: 'labelItemKeyDown',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the select button clicked event.\n\t * @param {!Event} event\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleSelectButtonClicked(event) {\n\t\treturn !this.emit({\n\t\t\tname: 'selectButtonClick',\n\t\t\toriginalEvent: event,\n\t\t});\n\t}\n\n\t/**\n\t * Continues the propagation of the itemAdded event.\n\t * @param {!String} item\n\t * @protected\n\t * @return {?Boolean} If the item has been added or not.\n\t */\n\t_addLabelItem(item) {\n\t\tconst {label, value} = item;\n\n\t\tconst filteredItem = this.filteredItems\n\t\t\t.filter(filteredItem => {\n\t\t\t\treturn (\n\t\t\t\t\tfilteredItem.data.label.toLowerCase() ===\n\t\t\t\t\tlabel.toLowerCase()\n\t\t\t\t);\n\t\t\t})\n\t\t\t.map(filteredItem => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: filteredItem.data.label,\n\t\t\t\t\tvalue: filteredItem.data.value,\n\t\t\t\t};\n\t\t\t})[0];\n\n\t\tif (!this.creatable) {\n\t\t\titem = filteredItem;\n\t\t} else {\n\t\t\titem = filteredItem || item;\n\t\t}\n\n\t\tconst itemIsSelected = item && this._isItemSelected(item);\n\n\t\tif (item && value && !itemIsSelected) {\n\t\t\tlet newSelectedItems = this.selectedItems.map(item => item);\n\t\t\tnewSelectedItems.push(item);\n\t\t\tthis.selectedItems = newSelectedItems;\n\n\t\t\tthis.filteredItems = [];\n\n\t\t\tthis.emit({\n\t\t\t\tdata: {\n\t\t\t\t\titem,\n\t\t\t\t\tselectedItems: this.selectedItems,\n\t\t\t\t},\n\t\t\t\tname: 'labelItemAdded',\n\t\t\t});\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.emit({\n\t\t\t\tdata: {\n\t\t\t\t\titemIsSelected,\n\t\t\t\t\titemDoesNotExists: !this.creatable && !item,\n\t\t\t\t},\n\t\t\t\tname: 'errorAddinglabelItem',\n\t\t\t});\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Assemble the schema of the item.\n\t * @param {!string} label\n\t * @param {!string} value\n\t * @protected\n\t * @return {!Object}\n\t */\n\t_createItemObject(label, value) {\n\t\treturn {\n\t\t\tlabel: label,\n\t\t\tvalue: value,\n\t\t};\n\t}\n\n\t/**\n\t * Focus a label item and emits the itemFocused event.\n\t * @param {!Element} item\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_focusLabelItem(item) {\n\t\tif (item) {\n\t\t\titem.focus();\n\n\t\t\treturn !this.emit({\n\t\t\t\tdata: {\n\t\t\t\t\titem,\n\t\t\t\t},\n\t\t\t\tname: 'labelItemFocused',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Focus the last label item.\n\t * @param {!Element} item\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_focusLastLabelItem() {\n\t\tconst labelItems = this._getLabelItems();\n\n\t\treturn this._focusLabelItem(labelItems[labelItems.length - 1]);\n\t}\n\n\t/**\n\t * Returns all the label items present in the autocomplete\n\t * @protected\n\t * @return {NodeList} The list of label items nodes\n\t */\n\t_getLabelItems() {\n\t\tlet labelItems = [];\n\n\t\tif (this.selectedItems.length > 0) {\n\t\t\tconst {autocomplete} = this.refs;\n\t\t\tlabelItems = autocomplete.element.querySelectorAll(\n\t\t\t\t'span[id=\"item-tag\"]'\n\t\t\t);\n\t\t}\n\n\t\treturn labelItems;\n\t}\n\n\t/**\n\t * Analyze the string and separate the values that\n\t * get a comma at the end.\n\t * @param {!string} string\n\t * @return {Array}\n\t */\n\t_getWords(string) {\n\t\tconst hasComma = string.includes(',');\n\n\t\tif (hasComma) {\n\t\t\tconst words = string.split(/\\s*(?:,|$)\\s*/).filter(Boolean);\n\n\t\t\treturn words;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * @param {!Object} item\n\t * @return {Boolean} If the item is already selected.\n\t */\n\t_isItemSelected(item) {\n\t\treturn Boolean(\n\t\t\tthis.selectedItems.find(selectedItem => {\n\t\t\t\treturn (\n\t\t\t\t\tselectedItem.label.toLowerCase() ===\n\t\t\t\t\t\titem.label.toLowerCase() &&\n\t\t\t\t\tselectedItem.value.toLowerCase() ===\n\t\t\t\t\t\titem.value.toLowerCase()\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Removes an item and emits the 'itemRoved' event.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\t_removeLabelItem(element) {\n\t\tconst index = Number(element.getAttribute('data-tag'));\n\t\tconst item = this.selectedItems[index];\n\n\t\tlet newSelectedItems = this.selectedItems.map(item => item);\n\t\tnewSelectedItems.splice(index, 1);\n\n\t\tthis.selectedItems = newSelectedItems;\n\n\t\tthis.emit({\n\t\t\tdata: {\n\t\t\t\titem,\n\t\t\t\tselectedItems: this.selectedItems,\n\t\t\t},\n\t\t\tname: 'labelItemRemoved',\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayMultiSelect.STATE = {\n\t/**\n\t * Internal flag to indicate that if the input is focused.\n\t * @instance\n\t * @default false\n\t * @memberof ClayMultiSelect\n\t * @type {?bool}\n\t */\n\t_inputFocused: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Method or string as condition to filter items in autocomplete.\n\t * @instance\n\t * @default (elem) => elem\n\t * @memberof ClayMultiSelect\n\t * @type {?(function|string)}\n\t */\n\tautocompleteFilterCondition: Config.oneOfType([\n\t\tConfig.func(),\n\t\tConfig.string(),\n\t]).value(elem => elem),\n\n\t/**\n\t * Variation name to render different deltemplates.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\tcontentRenderer: Config.string(),\n\n\t/**\n\t * Flag to indicate if only items from autocomplete should be accepted.\n\t * @default true\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?bool}\n\t */\n\tcreatable: Config.bool().value(true),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Set the request debounce time\n\t * @instance\n\t * @default 200\n\t * @memberof ClayMultiSelect\n\t * @type {?(number)}\n\t */\n\tdataProviderDebounceTime: Config.number().value(200),\n\n\t/**\n\t * Set some initial data while the first request is being made\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayMultiSelect\n\t * @type {?(object|array)}\n\t */\n\tdataProviderInitialData: Config.oneOfType([\n\t\tConfig.object(),\n\t\tConfig.array(),\n\t]),\n\n\t/**\n\t * The array of data items that the data source contains,\n\t * the URL for the data provider to request, or a function\n\t * that receives the query and returns a promise with the\n\t * elements.\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayMultiSelect\n\t * @type {!(string|object|array|function)}\n\t */\n\tdataSource: Config.oneOfType([\n\t\tConfig.array(),\n\t\tConfig.func(),\n\t\tConfig.object(),\n\t\tConfig.string(),\n\t]),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Element selector to render the autocomplete dropdown in.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdropdownPortalElement: Config.string(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Flag to enable the filtered items with autocomplete default.\n\t * @default true\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?bool}\n\t */\n\tenableAutocomplete: Config.validator(value => {\n\t\tif (value) {\n\t\t\tconsole.warn(\n\t\t\t\t'🚨 `enableAutocomplete` has been deprecated and will be removed in the next major version.'\n\t\t\t);\n\t\t}\n\t}),\n\n\t/**\n\t * List of filtered items for suggestion or autocomplete.\n\t * @default []\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?Array}\n\t */\n\tfilteredItems: Config.array(Config.object()).value([]),\n\n\t/**\n\t * Help text to guide the user in the interaction.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {!string}\n\t */\n\thelpText: Config.string().required(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Characters allowed in the input element (e.g /[a-zA-Z0-9_]/g).\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?RegExp}\n\t */\n\tinputAllowedCharacters: Config.instanceOf(RegExp),\n\n\t/**\n\t * Name for each selected item input hidden.\n\t * @default selectedItems\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\tinputName: Config.string().value('selectedItems'),\n\n\t/*\n\t * Value of the input.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @private\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: Config.string(),\n\n\t/**\n\t * Label of the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\tlabel: Config.string(),\n\n\t/**\n\t * Sets the name of the field to map the label of the item.\n\t * @default label\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(function|string)}\n\t */\n\tlabelLocator: Config.oneOfType([Config.func(), Config.string()]).value(\n\t\t'label'\n\t),\n\n\t/**\n\t * Input placeholder.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(string|undefined)}\n\t */\n\tplaceholder: Config.string(),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayMultiSelect\n\t * @type {?(number|undefined)}\n\t */\n\tpollingInterval: Config.number().value(0),\n\n\t/**\n\t * Set ups the request options\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayMultiSelect\n\t * @type {?(object|undefined)}\n\t */\n\trequestOptions: Config.shapeOf({\n\t\tmethod: Config.string(),\n\t\tmode: Config.string(),\n\t\tcache: Config.string(),\n\t\tcredentials: Config.string(),\n\t\theaders: Config.object(),\n\t\tredirect: Config.string(),\n\t\treferrer: Config.string(),\n\t\tbody: Config.object(),\n\t}),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayMultiSelect\n\t * @type {?(number|undefined)}\n\t */\n\trequestPolling: Config.validator(value => {\n\t\tif (value) {\n\t\t\tconsole.warn(\n\t\t\t\t'🚨 `requestPolling` has been renamed to `pollingInterval` and will be deprecated and removed in the next release.'\n\t\t\t);\n\t\t}\n\t}),\n\n\t/**\n\t * Define how many attempts will be made when the request fails\n\t * @instance\n\t * @default 5\n\t * @memberof ClayMultiSelect\n\t * @type {?(number|undefined)}\n\t */\n\trequestRetries: Config.number().value(5),\n\n\t/**\n\t * Set timeout of the request\n\t * @instance\n\t * @default 30000\n\t * @memberof ClayMultiSelect\n\t * @type {?(number|undefined)}\n\t */\n\trequestTimeout: Config.number().value(30000),\n\n\t/**\n\t * List of the selected Items.\n\t * @default []\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?Array<Object>}\n\t */\n\tselectedItems: Config.array(Config.object()).value([]),\n\n\t/**\n\t * Flag to indicate if select button should be shown or not.\n\t * @default true\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?bool}\n\t */\n\tshowSelectButton: Config.bool().value(true),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {!string}\n\t */\n\tspritemap: Config.string().required(),\n\n\t/**\n\t * Sets the name of the field to map the value of the item.\n\t * @default value\n\t * @instance\n\t * @memberof ClayMultiSelect\n\t * @type {?(function|string)}\n\t */\n\tvalueLocator: Config.oneOfType([Config.func(), Config.string()]).value(\n\t\t'value'\n\t),\n};\n\ndefineWebComponent('clay-multi-select', ClayMultiSelect);\n\nSoy.register(ClayMultiSelect, templates);\n\nexport {ClayMultiSelect};\nexport default ClayMultiSelect;\n"]}